
NUCLEO745_BareMetalStream_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002740  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080029d8  080029d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab0  08002ab0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002ab0  08002ab0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ab0  08002ab0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ab0  08002ab0  00012ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ab4  08002ab4  00012ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08002ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  20000000  20000000  00030000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  20000448  00030000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a947  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c5  00000000  00000000  0003a985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00007a48  00000000  00000000  0003dd4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  00045798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f10  00000000  00000000  00046208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003da1a  00000000  00000000  00047118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109e8  00000000  00000000  00084b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00181a97  00000000  00000000  0009551a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000004d  00000000  00000000  00216fb1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000019e0  00000000  00000000  00217000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000000 	.word	0x20000000
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080029c0 	.word	0x080029c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000004 	.word	0x20000004
 80002d4:	080029c0 	.word	0x080029c0

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <_ZN10NumConvert9divmodu10ImEE10divmod10_tIT_ERKS2_.isra.0>:
private:
	template<typename N>
	static divmod10_t<N> divmodu10(const N& n){
		divmod10_t<N> res;
		res.quot = n >> 1;
		res.quot += res.quot >> 1;
 80002e8:	088b      	lsrs	r3, r1, #2
 80002ea:	eb03 0351 	add.w	r3, r3, r1, lsr #1
		res.quot += res.quot >> 4;
 80002ee:	eb03 1313 	add.w	r3, r3, r3, lsr #4
		if(sizeof(N) > 1)
			res.quot += res.quot >> 8;
 80002f2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
		if(sizeof(N) > 2)
			res.quot += res.quot >> 16;
 80002f6:	eb03 4313 	add.w	r3, r3, r3, lsr #16
		N qq = res.quot;
		res.quot >>= 3;
 80002fa:	08da      	lsrs	r2, r3, #3
		res.rem = std::uint8_t(n - ((res.quot << 1) + (qq & ~std::uint32_t{7})));
 80002fc:	f023 0307 	bic.w	r3, r3, #7
 8000300:	1acb      	subs	r3, r1, r3
		res.quot >>= 3;
 8000302:	6002      	str	r2, [r0, #0]
		res.rem = std::uint8_t(n - ((res.quot << 1) + (qq & ~std::uint32_t{7})));
 8000304:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8000308:	b2db      	uxtb	r3, r3
		if(res.rem > 9)
 800030a:	2b09      	cmp	r3, #9
		{
			res.rem -= 10;
 800030c:	bf85      	ittet	hi
 800030e:	3b0a      	subhi	r3, #10
			res.quot++;
 8000310:	3201      	addhi	r2, #1
		res.rem = std::uint8_t(n - ((res.quot << 1) + (qq & ~std::uint32_t{7})));
 8000312:	7103      	strbls	r3, [r0, #4]
			res.rem -= 10;
 8000314:	7103      	strbhi	r3, [r0, #4]
			res.quot++;
 8000316:	bf88      	it	hi
 8000318:	6002      	strhi	r2, [r0, #0]
		}
		return res;
	}
 800031a:	4770      	bx	lr

0800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>:

private:

	static constexpr BusMode mode = Mode;

	void send_block (const char arr[], const index_t num) noexcept{
 800031c:	4401      	add	r1, r0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800031e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000322:	b510      	push	{r4, lr}

		std::uint8_t* a = bit_cast<std::uint8_t*>(arr);

		for (fast_t i = 0; i != num; i++){
 8000324:	4288      	cmp	r0, r1
 8000326:	d00f      	beq.n	8000348 <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0+0x2c>
 8000328:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 800032c:	07d4      	lsls	r4, r2, #31
 800032e:	d509      	bpl.n	8000344 <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0+0x28>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000330:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000334:	07d2      	lsls	r2, r2, #31
 8000336:	d505      	bpl.n	8000344 <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0+0x28>
			ITM_SendChar( base_t(a[i]) ) ;
 8000338:	7802      	ldrb	r2, [r0, #0]
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800033a:	681c      	ldr	r4, [r3, #0]
 800033c:	b90c      	cbnz	r4, 8000342 <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0+0x26>
    {
      __NOP();
 800033e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000340:	e7fb      	b.n	800033a <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000342:	701a      	strb	r2, [r3, #0]
		for (fast_t i = 0; i != num; i++){
 8000344:	3001      	adds	r0, #1
 8000346:	e7ed      	b.n	8000324 <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0+0x8>
		}
	}
 8000348:	bd10      	pop	{r4, pc}
	...

0800034c <_ZN10NumConvert10ftoaEngineEfPci>:
	{
	    mantissa <<= 8;
		return (std::uint64_t(mantissa) * multiplier) >> 32;
	}

	static int ftoaEngine(float value, char *buffer, int presc)
 800034c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800034e:	ed8d 0a01 	vstr	s0, [sp, #4]
	{
//		std::uint32_t uvalue = *reinterpret_cast<std::uint32_t*>(&value);
		std::uint32_t uvalue = *bit_cast<std::uint32_t*>(&value);
 8000352:	9a01      	ldr	r2, [sp, #4]
		std::uint8_t exponent = static_cast<std::uint8_t>(uvalue >> 23);
		std::uint32_t fraction = (uvalue & 0x00ffffff) | 0x00800000;
		char *ptr = buffer;

		if(uvalue & 0x80000000){
	        *ptr++ = '-';
 8000354:	2a00      	cmp	r2, #0
		std::uint8_t exponent = static_cast<std::uint8_t>(uvalue >> 23);
 8000356:	f3c2 55c7 	ubfx	r5, r2, #23, #8
		std::uint32_t fraction = (uvalue & 0x00ffffff) | 0x00800000;
 800035a:	f3c2 0316 	ubfx	r3, r2, #0, #23
	        *ptr++ = '-';
 800035e:	bfac      	ite	ge
 8000360:	222b      	movge	r2, #43	; 0x2b
 8000362:	222d      	movlt	r2, #45	; 0x2d
 8000364:	7002      	strb	r2, [r0, #0]
		} else {
	        *ptr++ = '+';
		}

		if(exponent == 0) // don't care about a subnormals
 8000366:	b935      	cbnz	r5, 8000376 <_ZN10NumConvert10ftoaEngineEfPci+0x2a>
		{
			ptr[0] = '0';
 8000368:	2330      	movs	r3, #48	; 0x30
			ptr[1] = 0;
 800036a:	7085      	strb	r5, [r0, #2]
			ptr[0] = '0';
 800036c:	7043      	strb	r3, [r0, #1]
			return 0xff;
 800036e:	24ff      	movs	r4, #255	; 0xff
		while(ptr[0] == '0')
		{
		    *ptr-- = 0;
		}
	    return exp10;
	}
 8000370:	4620      	mov	r0, r4
 8000372:	b003      	add	sp, #12
 8000374:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(exponent == 0xff)
 8000376:	2dff      	cmp	r5, #255	; 0xff
 8000378:	d10e      	bne.n	8000398 <_ZN10NumConvert10ftoaEngineEfPci+0x4c>
		    if(fraction & 0x007fffff)
 800037a:	226e      	movs	r2, #110	; 0x6e
 800037c:	b133      	cbz	r3, 800038c <_ZN10NumConvert10ftoaEngineEfPci+0x40>
		    	ptr[1] = 'a';
 800037e:	2361      	movs	r3, #97	; 0x61
		    	ptr[0] = 'n';
 8000380:	7042      	strb	r2, [r0, #1]
		    	ptr[2] = 'n';
 8000382:	70c2      	strb	r2, [r0, #3]
		    	ptr[1] = 'a';
 8000384:	7083      	strb	r3, [r0, #2]
				ptr[3] = 0;
 8000386:	2300      	movs	r3, #0
				ptr[3] = 0;
 8000388:	7103      	strb	r3, [r0, #4]
 800038a:	e7f0      	b.n	800036e <_ZN10NumConvert10ftoaEngineEfPci+0x22>
		    	ptr[0] = 'i';
 800038c:	2169      	movs	r1, #105	; 0x69
		    	ptr[1] = 'n';
 800038e:	7082      	strb	r2, [r0, #2]
		    	ptr[2] = 'f';
 8000390:	2266      	movs	r2, #102	; 0x66
		    	ptr[0] = 'i';
 8000392:	7041      	strb	r1, [r0, #1]
		    	ptr[2] = 'f';
 8000394:	70c2      	strb	r2, [r0, #3]
 8000396:	e7f7      	b.n	8000388 <_ZN10NumConvert10ftoaEngineEfPci+0x3c>
		*ptr++ = '0';
 8000398:	2230      	movs	r2, #48	; 0x30
	    int exp10 = ((((exponent>>3))*77+63)>>5) - 38;
 800039a:	273f      	movs	r7, #63	; 0x3f
 800039c:	244d      	movs	r4, #77	; 0x4d
	    mantissa <<= 8;
 800039e:	021b      	lsls	r3, r3, #8
		*ptr++ = '0';
 80003a0:	7042      	strb	r2, [r0, #1]
	    int exp10 = ((((exponent>>3))*77+63)>>5) - 38;
 80003a2:	08ea      	lsrs	r2, r5, #3
	    mantissa <<= 8;
 80003a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
	    std::uint_fast8_t shift = 7 - (exponent & 7);
 80003a8:	43ed      	mvns	r5, r5
	    int exp10 = ((((exponent>>3))*77+63)>>5) - 38;
 80003aa:	fb14 7402 	smlabb	r4, r4, r2, r7
	    std::uint32_t t = MantissaMul(fraction, table2[exponent / 8]) + 1;
 80003ae:	4f25      	ldr	r7, [pc, #148]	; (8000444 <_ZN10NumConvert10ftoaEngineEfPci+0xf8>)
	    std::uint_fast8_t shift = 7 - (exponent & 7);
 80003b0:	f005 0507 	and.w	r5, r5, #7
		*ptr++ = '0';
 80003b4:	1c86      	adds	r6, r0, #2
		return (std::uint64_t(mantissa) * multiplier) >> 32;
 80003b6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
	    int exp10 = ((((exponent>>3))*77+63)>>5) - 38;
 80003ba:	1164      	asrs	r4, r4, #5
		return (std::uint64_t(mantissa) * multiplier) >> 32;
 80003bc:	fba3 2302 	umull	r2, r3, r3, r2
	    int exp10 = ((((exponent>>3))*77+63)>>5) - 38;
 80003c0:	3c26      	subs	r4, #38	; 0x26
	    std::uint32_t t = MantissaMul(fraction, table2[exponent / 8]) + 1;
 80003c2:	3301      	adds	r3, #1
	    t >>= shift;
 80003c4:	40eb      	lsrs	r3, r5
			t *= 10;
 80003c6:	250a      	movs	r5, #10
		digit >>= 4;
 80003c8:	0f1a      	lsrs	r2, r3, #28
	    while(digit == 0)
 80003ca:	b92a      	cbnz	r2, 80003d8 <_ZN10NumConvert10ftoaEngineEfPci+0x8c>
	        t &= 0x0fffffff;
 80003cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
	        exp10--;
 80003d0:	3c01      	subs	r4, #1
			t *= 10;
 80003d2:	436b      	muls	r3, r5
	        digit = (uint8_t)(t >> 28);
 80003d4:	0f1a      	lsrs	r2, r3, #28
	    while(digit == 0)
 80003d6:	e7f8      	b.n	80003ca <_ZN10NumConvert10ftoaEngineEfPci+0x7e>
	    for(std::uint_fast8_t i = presc+1; i > 0; i--)
 80003d8:	f101 0c03 	add.w	ip, r1, #3
 80003dc:	1c4a      	adds	r2, r1, #1
		*ptr++ = '0';
 80003de:	4635      	mov	r5, r6
			t *= 10;
 80003e0:	f04f 0e0a 	mov.w	lr, #10
 80003e4:	4484      	add	ip, r0
	    for(std::uint_fast8_t i = presc+1; i > 0; i--)
 80003e6:	4565      	cmp	r5, ip
 80003e8:	d008      	beq.n	80003fc <_ZN10NumConvert10ftoaEngineEfPci+0xb0>
			digit = (uint8_t)(t >> 28);
 80003ea:	0f1f      	lsrs	r7, r3, #28
	        t &= 0x0fffffff;
 80003ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
	        *ptr++ = digit + '0';
 80003f0:	3730      	adds	r7, #48	; 0x30
			t *= 10;
 80003f2:	fb0e f303 	mul.w	r3, lr, r3
	        *ptr++ = digit + '0';
 80003f6:	f805 7b01 	strb.w	r7, [r5], #1
	    for(std::uint_fast8_t i = presc+1; i > 0; i--)
 80003fa:	e7f4      	b.n	80003e6 <_ZN10NumConvert10ftoaEngineEfPci+0x9a>
		if(buffer[presc+2] >= '5')
 80003fc:	4401      	add	r1, r0
 80003fe:	4416      	add	r6, r2
 8000400:	788b      	ldrb	r3, [r1, #2]
 8000402:	2b34      	cmp	r3, #52	; 0x34
	        buffer[presc+1]++;
 8000404:	bf82      	ittt	hi
 8000406:	5c83      	ldrbhi	r3, [r0, r2]
 8000408:	3301      	addhi	r3, #1
 800040a:	5483      	strbhi	r3, [r0, r2]
	    ptr[-1] = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	f806 3c01 	strb.w	r3, [r6, #-1]
		for(std::uint_fast8_t i = presc + 1; i > 1; i--)
 8000412:	1883      	adds	r3, r0, r2
 8000414:	1a1a      	subs	r2, r3, r0
 8000416:	2a01      	cmp	r2, #1
 8000418:	d807      	bhi.n	800042a <_ZN10NumConvert10ftoaEngineEfPci+0xde>
 800041a:	3e01      	subs	r6, #1
		    *ptr-- = 0;
 800041c:	2300      	movs	r3, #0
		while(ptr[0] == '0')
 800041e:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8000422:	2a30      	cmp	r2, #48	; 0x30
 8000424:	d1a4      	bne.n	8000370 <_ZN10NumConvert10ftoaEngineEfPci+0x24>
		    *ptr-- = 0;
 8000426:	7033      	strb	r3, [r6, #0]
		while(ptr[0] == '0')
 8000428:	e7f9      	b.n	800041e <_ZN10NumConvert10ftoaEngineEfPci+0xd2>
			if(buffer[i] > '9')
 800042a:	781a      	ldrb	r2, [r3, #0]
 800042c:	2a39      	cmp	r2, #57	; 0x39
 800042e:	d906      	bls.n	800043e <_ZN10NumConvert10ftoaEngineEfPci+0xf2>
			    buffer[i]-=10;
 8000430:	3a0a      	subs	r2, #10
 8000432:	701a      	strb	r2, [r3, #0]
				buffer[i-1]++;
 8000434:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8000438:	3201      	adds	r2, #1
 800043a:	f803 2c01 	strb.w	r2, [r3, #-1]
		for(std::uint_fast8_t i = presc + 1; i > 1; i--)
 800043e:	3b01      	subs	r3, #1
 8000440:	e7e8      	b.n	8000414 <_ZN10NumConvert10ftoaEngineEfPci+0xc8>
 8000442:	bf00      	nop
 8000444:	08002a20 	.word	0x08002a20

08000448 <_ZN10NumConvert15to_string_floatEfPc>:
	static Ret to_string_float(const float value, char* result)
 8000448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800044c:	b089      	sub	sp, #36	; 0x24
 800044e:	4607      	mov	r7, r0
 8000450:	460e      	mov	r6, r1
		int exp10 = ftoaEngine(value, buffer, precision);
 8000452:	2106      	movs	r1, #6
 8000454:	a805      	add	r0, sp, #20
 8000456:	f7ff ff79 	bl	800034c <_ZN10NumConvert10ftoaEngineEfPci>
		if(exp10 == 0xff)
 800045a:	28ff      	cmp	r0, #255	; 0xff
		int exp10 = ftoaEngine(value, buffer, precision);
 800045c:	4605      	mov	r5, r0
		if(exp10 == 0xff)
 800045e:	d113      	bne.n	8000488 <_ZN10NumConvert15to_string_floatEfPc+0x40>
			std::uint32_t digits = strlen(buffer);
 8000460:	a805      	add	r0, sp, #20
 8000462:	f7ff ff39 	bl	80002d8 <strlen>
				*out_ptr++ = buffer[i];
 8000466:	a905      	add	r1, sp, #20
			std::uint32_t digits = strlen(buffer);
 8000468:	4604      	mov	r4, r0
				*out_ptr++ = buffer[i];
 800046a:	4602      	mov	r2, r0
 800046c:	4630      	mov	r0, r6
 800046e:	f002 fa91 	bl	8002994 <memcpy>
			*out_ptr = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	5533      	strb	r3, [r6, r4]
		return {result, strlen(in_ptr)};
 8000476:	4630      	mov	r0, r6
 8000478:	603e      	str	r6, [r7, #0]
 800047a:	f7ff ff2d 	bl	80002d8 <strlen>
 800047e:	6078      	str	r0, [r7, #4]
	}
 8000480:	4638      	mov	r0, r7
 8000482:	b009      	add	sp, #36	; 0x24
 8000484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(buffer[1] != '0')
 8000488:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800048c:	2b30      	cmp	r3, #48	; 0x30
			str_begin--;
 800048e:	bf16      	itet	ne
 8000490:	f10d 0915 	addne.w	r9, sp, #21
		char *str_begin = &buffer[2];
 8000494:	f10d 0916 	addeq.w	r9, sp, #22
			exp10++;
 8000498:	3501      	addne	r5, #1
		std::uint_fast8_t digits = (std::uint_fast8_t)strlen(str_begin);
 800049a:	4648      	mov	r0, r9
 800049c:	f7ff ff1c 	bl	80002d8 <strlen>
 80004a0:	4683      	mov	fp, r0
		if(abs(exp10) >= precision)
 80004a2:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 80004a6:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 80004aa:	2b05      	cmp	r3, #5
 80004ac:	dc79      	bgt.n	80005a2 <_ZN10NumConvert15to_string_floatEfPc+0x15a>
		}else if(exp10 >= 0)
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	db07      	blt.n	80004c2 <_ZN10NumConvert15to_string_floatEfPc+0x7a>
			intDigits = exp10+1;
 80004b2:	1c6b      	adds	r3, r5, #1
			exp10 = 0;
 80004b4:	2500      	movs	r5, #0
		std::uint_fast8_t fractDigits = digits > intDigits ? digits - intDigits : 0;
 80004b6:	459b      	cmp	fp, r3
 80004b8:	d869      	bhi.n	800058e <_ZN10NumConvert15to_string_floatEfPc+0x146>
 80004ba:	f04f 0800 	mov.w	r8, #0
 80004be:	46c2      	mov	sl, r8
 80004c0:	e009      	b.n	80004d6 <_ZN10NumConvert15to_string_floatEfPc+0x8e>
			leadingZeros = -exp10 - 1;
 80004c2:	ea6f 0a05 	mvn.w	sl, r5
		std::uint_fast8_t fractDigits = digits > intDigits ? digits - intDigits : 0;
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d064      	beq.n	8000594 <_ZN10NumConvert15to_string_floatEfPc+0x14c>
			intDigits = 0;
 80004ca:	2500      	movs	r5, #0
			exp10 = 0;
 80004cc:	462b      	mov	r3, r5
		std::uint_fast8_t fractDigits = digits > intDigits ? digits - intDigits : 0;
 80004ce:	ebab 0803 	sub.w	r8, fp, r3
		if(intDigits)
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d060      	beq.n	8000598 <_ZN10NumConvert15to_string_floatEfPc+0x150>
			std::uint_fast8_t count = intDigits > digits ? digits : intDigits;
 80004d6:	459b      	cmp	fp, r3
 80004d8:	465a      	mov	r2, fp
				*out_ptr++ = *str_begin++;
 80004da:	4649      	mov	r1, r9
 80004dc:	4630      	mov	r0, r6
 80004de:	bf28      	it	cs
 80004e0:	461a      	movcs	r2, r3
 80004e2:	e9cd 2300 	strd	r2, r3, [sp]
 80004e6:	f002 fa55 	bl	8002994 <memcpy>
			std::int_fast8_t tralingZeros = intDigits - digits;
 80004ea:	9b01      	ldr	r3, [sp, #4]
 80004ec:	9a00      	ldr	r2, [sp, #0]
				*out_ptr++ ='0';
 80004ee:	2130      	movs	r1, #48	; 0x30
			std::int_fast8_t tralingZeros = intDigits - digits;
 80004f0:	eba3 0b0b 	sub.w	fp, r3, fp
 80004f4:	18b4      	adds	r4, r6, r2
 80004f6:	4491      	add	r9, r2
				*out_ptr++ ='0';
 80004f8:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
 80004fc:	4620      	mov	r0, r4
 80004fe:	465a      	mov	r2, fp
 8000500:	f002 fa56 	bl	80029b0 <memset>
 8000504:	eb04 020b 	add.w	r2, r4, fp
		if(fractDigits)
 8000508:	f1b8 0f00 	cmp.w	r8, #0
 800050c:	d011      	beq.n	8000532 <_ZN10NumConvert15to_string_floatEfPc+0xea>
			*out_ptr++ = '.';
 800050e:	4613      	mov	r3, r2
 8000510:	222e      	movs	r2, #46	; 0x2e
				*out_ptr++ = '0';
 8000512:	2130      	movs	r1, #48	; 0x30
			*out_ptr++ = '.';
 8000514:	f803 2b01 	strb.w	r2, [r3], #1
				*out_ptr++ = '0';
 8000518:	4652      	mov	r2, sl
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fa48 	bl	80029b0 <memset>
 8000520:	4603      	mov	r3, r0
				*out_ptr++ = *str_begin++;
 8000522:	4642      	mov	r2, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4453      	add	r3, sl
 8000528:	4618      	mov	r0, r3
 800052a:	f002 fa33 	bl	8002994 <memcpy>
 800052e:	eb00 0208 	add.w	r2, r0, r8
		if(exp10 != 0)
 8000532:	2d00      	cmp	r5, #0
 8000534:	d028      	beq.n	8000588 <_ZN10NumConvert15to_string_floatEfPc+0x140>
			*out_ptr++ = 'e';
 8000536:	f04f 0365 	mov.w	r3, #101	; 0x65
 800053a:	4691      	mov	r9, r2

	static char *utoa_fast_div(std::uint32_t value, char *bufferEnd)
	{
	    *bufferEnd = 0;
 800053c:	f10d 081e 	add.w	r8, sp, #30
				upow10 = -exp10;
 8000540:	bfb8      	it	lt
 8000542:	4269      	neglt	r1, r5
			*out_ptr++ = 'e';
 8000544:	f809 3b02 	strb.w	r3, [r9], #2
				*out_ptr++ = '-';
 8000548:	bfb2      	itee	lt
 800054a:	232d      	movlt	r3, #45	; 0x2d
				*out_ptr++ = '+';
 800054c:	232b      	movge	r3, #43	; 0x2b
				upow10 = exp10;
 800054e:	4629      	movge	r1, r5
 8000550:	4645      	mov	r5, r8
 8000552:	7053      	strb	r3, [r2, #1]
	    *bufferEnd = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	f88d 301e 	strb.w	r3, [sp, #30]
		divmod10_t<std::uint32_t> res;
		res.quot = value;
	    do
	    {
	        res = divmodu10(res.quot);
 800055a:	a803      	add	r0, sp, #12
 800055c:	f7ff fec4 	bl	80002e8 <_ZN10NumConvert9divmodu10ImEE10divmod10_tIT_ERKS2_.isra.0>
	        *--bufferEnd = res.rem + '0';
 8000560:	f89d 3010 	ldrb.w	r3, [sp, #16]
	        res = divmodu10(res.quot);
 8000564:	9903      	ldr	r1, [sp, #12]
	        *--bufferEnd = res.rem + '0';
 8000566:	3330      	adds	r3, #48	; 0x30
 8000568:	f808 3d01 	strb.w	r3, [r8, #-1]!
	    }
	    while (res.quot);
 800056c:	2900      	cmp	r1, #0
 800056e:	d1f4      	bne.n	800055a <_ZN10NumConvert15to_string_floatEfPc+0x112>
				*out_ptr++ = *powPtr++;
 8000570:	eba5 0408 	sub.w	r4, r5, r8
 8000574:	4641      	mov	r1, r8
 8000576:	4648      	mov	r0, r9
 8000578:	45a8      	cmp	r8, r5
 800057a:	bf88      	it	hi
 800057c:	2400      	movhi	r4, #0
 800057e:	4622      	mov	r2, r4
 8000580:	f002 fa08 	bl	8002994 <memcpy>
 8000584:	eb09 0204 	add.w	r2, r9, r4
		*out_ptr = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	7013      	strb	r3, [r2, #0]
 800058c:	e773      	b.n	8000476 <_ZN10NumConvert15to_string_floatEfPc+0x2e>
		std::uint_fast8_t fractDigits = digits > intDigits ? digits - intDigits : 0;
 800058e:	f04f 0a00 	mov.w	sl, #0
 8000592:	e79c      	b.n	80004ce <_ZN10NumConvert15to_string_floatEfPc+0x86>
 8000594:	4605      	mov	r5, r0
			exp10 = 0;
 8000596:	4680      	mov	r8, r0
			*out_ptr++ = '0';
 8000598:	4632      	mov	r2, r6
 800059a:	2330      	movs	r3, #48	; 0x30
 800059c:	f802 3b01 	strb.w	r3, [r2], #1
 80005a0:	e7b2      	b.n	8000508 <_ZN10NumConvert15to_string_floatEfPc+0xc0>
			intDigits = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	e787      	b.n	80004b6 <_ZN10NumConvert15to_string_floatEfPc+0x6e>

080005a6 <_ZN10StreamBaseI12BusInterfaceI3ItmIL7BusMode0EEELc32EElsIfEERS5_T_>:
		}

		return *this;
	}

	stream_t& operator << (const std::floating_point auto f){
 80005a6:	b513      	push	{r0, r1, r4, lr}
 80005a8:	4604      	mov	r4, r0

		if constexpr (BusMode::BLOCKING == mode){

			auto [ptr, cnt] = NumConvert::to_string_float(f, buffer.data());
 80005aa:	6841      	ldr	r1, [r0, #4]
 80005ac:	4668      	mov	r0, sp
 80005ae:	f7ff ff4b 	bl	8000448 <_ZN10NumConvert15to_string_floatEfPc>

	void send (const char arr[], const index_t num) noexcept {

		if constexpr (BusMode::BLOCKING == mode){

			derived()->send_block(arr, num);
 80005b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80005b6:	f7ff feb1 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>

			it = std::next(it, cnt);
		}

		return *this;
	}
 80005ba:	4620      	mov	r0, r4
 80005bc:	b002      	add	sp, #8
 80005be:	bd10      	pop	{r4, pc}

080005c0 <test>:

#include "bm_stream.hpp"


extern "C"
void test (void){
 80005c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      class __extent_storage<dynamic_extent>
      {
      public:
	constexpr
	__extent_storage(size_t __extent) noexcept
	: _M_extent_value(__extent)
 80005c4:	2320      	movs	r3, #32
 80005c6:	b08c      	sub	sp, #48	; 0x30
      template<contiguous_iterator _It>
	requires __is_compatible_ref<iter_reference_t<_It>>::value
	constexpr explicit(extent != dynamic_extent)
	span(_It __first, size_type __count)
	noexcept
	: _M_extent(__count), _M_ptr(std::to_address(__first))
 80005c8:	4f62      	ldr	r7, [pc, #392]	; (8000754 <test+0x194>)
		res.quot = value;
 80005ca:	f240 76e5 	movw	r6, #2021	; 0x7e5
	: _M_extent_value(__extent)
 80005ce:	9308      	str	r3, [sp, #32]

	StreamSWO cout;

	float raw[] = {3.1416, 2.7183, 1.618};
 80005d0:	ac02      	add	r4, sp, #8
 80005d2:	4b61      	ldr	r3, [pc, #388]	; (8000758 <test+0x198>)
	std::array<int, 3> arr{123, 456, 789};
 80005d4:	ad05      	add	r5, sp, #20
	float raw[] = {3.1416, 2.7183, 1.618};
 80005d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
	std::array<int, 3> arr{123, 456, 789};
 80005da:	330c      	adds	r3, #12
	float raw[] = {3.1416, 2.7183, 1.618};
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	std::array<int, 3> arr{123, 456, 789};
 80005e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
		*out_ptr = 0;
 80005e4:	2300      	movs	r3, #0
	StreamBase() = default;
 80005e6:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 80005ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80005ee:	f807 3f1f 	strb.w	r3, [r7, #31]!
			res = divmodu10(res.quot);
 80005f2:	4631      	mov	r1, r6
 80005f4:	4668      	mov	r0, sp
 80005f6:	f7ff fe77 	bl	80002e8 <_ZN10NumConvert9divmodu10ImEE10divmod10_tIT_ERKS2_.isra.0>
			*--out_ptr = res.rem + '0';
 80005fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
			res = divmodu10(res.quot);
 80005fe:	9e00      	ldr	r6, [sp, #0]
			*--out_ptr = res.rem + '0';
 8000600:	3330      	adds	r3, #48	; 0x30
 8000602:	f807 3d01 	strb.w	r3, [r7, #-1]!
		}while (res.quot);
 8000606:	2e00      	cmp	r6, #0
 8000608:	d1f3      	bne.n	80005f2 <test+0x32>
		return {out_ptr, strlen(out_ptr)};
 800060a:	4638      	mov	r0, r7
 800060c:	f04f 080a 	mov.w	r8, #10
 8000610:	f7ff fe62 	bl	80002d8 <strlen>
 8000614:	4601      	mov	r1, r0
 8000616:	4638      	mov	r0, r7

	cout << base_t{2021}    << '\n'
	     << float{9.806}    << '\n'
 8000618:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800075c <test+0x19c>
 800061c:	f7ff fe7e 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>
 8000620:	2101      	movs	r1, #1
 8000622:	4668      	mov	r0, sp
 8000624:	f88d 8000 	strb.w	r8, [sp]
 8000628:	f7ff fe78 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>
 800062c:	a808      	add	r0, sp, #32
 800062e:	f7ff ffba 	bl	80005a6 <_ZN10StreamBaseI12BusInterfaceI3ItmIL7BusMode0EEELc32EElsIfEERS5_T_>
 8000632:	f04f 0a03 	mov.w	sl, #3
 8000636:	f88d 8000 	strb.w	r8, [sp]
 800063a:	f04f 0820 	mov.w	r8, #32
 800063e:	4607      	mov	r7, r0
 8000640:	2101      	movs	r1, #1
 8000642:	4668      	mov	r0, sp
 8000644:	f7ff fe6a 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>

      constexpr reference
      back() const noexcept
      {
	__glibcxx_assert(!empty());
	return *(this->_M_ptr + (size() - 1));
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	3b01      	subs	r3, #1
 800064e:	f855 2b04 	ldr.w	r2, [r5], #4
 8000652:	eb01 0903 	add.w	r9, r1, r3
		*out_ptr = 0;
 8000656:	54ce      	strb	r6, [r1, r3]
		res.quot += res.quot >> 1;
 8000658:	1093      	asrs	r3, r2, #2
 800065a:	eb03 0362 	add.w	r3, r3, r2, asr #1
		res.quot += res.quot >> 4;
 800065e:	eb03 1323 	add.w	r3, r3, r3, asr #4
			res.quot += res.quot >> 8;
 8000662:	eb03 2323 	add.w	r3, r3, r3, asr #8
			res.quot += res.quot >> 16;
 8000666:	eb03 4323 	add.w	r3, r3, r3, asr #16
		res.quot >>= 3;
 800066a:	10d9      	asrs	r1, r3, #3
		res.rem = std::uint8_t(n - ((res.quot << 1) + (qq & ~std::uint32_t{7})));
 800066c:	f023 0307 	bic.w	r3, r3, #7
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8000676:	b2db      	uxtb	r3, r3
		if(res.rem > 9)
 8000678:	2b09      	cmp	r3, #9
			res.rem -= 10;
 800067a:	bf85      	ittet	hi
 800067c:	3b0a      	subhi	r3, #10
			res.quot++;
 800067e:	1c4a      	addhi	r2, r1, #1
		res.quot >>= 3;
 8000680:	460a      	movls	r2, r1
			res.rem -= 10;
 8000682:	b2db      	uxtbhi	r3, r3
			*--out_ptr = res.rem + '0';
 8000684:	3330      	adds	r3, #48	; 0x30
 8000686:	f809 3d01 	strb.w	r3, [r9, #-1]!
		}while (res.quot);
 800068a:	2a00      	cmp	r2, #0
 800068c:	d1e4      	bne.n	8000658 <test+0x98>
		return {out_ptr, strlen(out_ptr)};
 800068e:	4648      	mov	r0, r9
 8000690:	f7ff fe22 	bl	80002d8 <strlen>
 8000694:	4601      	mov	r1, r0
 8000696:	4648      	mov	r0, r9
 8000698:	f7ff fe40 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>
 800069c:	2101      	movs	r1, #1
 800069e:	4668      	mov	r0, sp
 80006a0:	f88d 8000 	strb.w	r8, [sp]
 80006a4:	f7ff fe3a 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>
	     typename _Proj = identity,
	     indirectly_unary_invocable<projected<_Iter, _Proj>> _Fun>
      constexpr for_each_result<_Iter, _Fun>
      operator()(_Iter __first, _Sent __last, _Fun __f, _Proj __proj = {}) const
      {
	for (; __first != __last; ++__first)
 80006a8:	f1ba 0a01 	subs.w	sl, sl, #1
 80006ac:	d1cc      	bne.n	8000648 <test+0x88>
 80006ae:	230a      	movs	r3, #10
	     << arr             << '\n'
 80006b0:	2503      	movs	r5, #3
 80006b2:	2620      	movs	r6, #32
 80006b4:	2101      	movs	r1, #1
 80006b6:	4668      	mov	r0, sp
 80006b8:	f88d 3000 	strb.w	r3, [sp]
 80006bc:	f7ff fe2e 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>

			std::ranges::for_each(r, [this](const auto val){ *this << val; } );

		} else if (num_type<arg_type> || std::floating_point<arg_type>) {

			std::ranges::for_each(r, [this](const auto val){ *this << val << Delim; } );
 80006c0:	ecb4 0a01 	vldmia	r4!, {s0}
 80006c4:	4638      	mov	r0, r7
 80006c6:	f7ff ff6e 	bl	80005a6 <_ZN10StreamBaseI12BusInterfaceI3ItmIL7BusMode0EEELc32EElsIfEERS5_T_>
 80006ca:	2101      	movs	r1, #1
 80006cc:	4668      	mov	r0, sp
 80006ce:	f88d 6000 	strb.w	r6, [sp]
 80006d2:	f7ff fe23 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>
 80006d6:	3d01      	subs	r5, #1
 80006d8:	d1f2      	bne.n	80006c0 <test+0x100>
 80006da:	230a      	movs	r3, #10
	     << raw             << '\n'
 80006dc:	240d      	movs	r4, #13
 80006de:	4d20      	ldr	r5, [pc, #128]	; (8000760 <test+0x1a0>)
 80006e0:	2101      	movs	r1, #1
 80006e2:	4668      	mov	r0, sp
 80006e4:	f88d 3000 	strb.w	r3, [sp]
 80006e8:	f7ff fe18 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>
 80006ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80006f0:	2101      	movs	r1, #1
 80006f2:	4668      	mov	r0, sp
 80006f4:	f88d 3000 	strb.w	r3, [sp]
 80006f8:	f7ff fe10 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>
 80006fc:	3c01      	subs	r4, #1
 80006fe:	d1f5      	bne.n	80006ec <test+0x12c>
 8000700:	230a      	movs	r3, #10
	     << "Hello, Habr!"  << '\n'
 8000702:	2407      	movs	r4, #7
 8000704:	4d17      	ldr	r5, [pc, #92]	; (8000764 <test+0x1a4>)
 8000706:	2101      	movs	r1, #1
 8000708:	4668      	mov	r0, sp
 800070a:	f88d 3000 	strb.w	r3, [sp]
 800070e:	f7ff fe05 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>
 8000712:	3c01      	subs	r4, #1
 8000714:	d307      	bcc.n	8000726 <test+0x166>
 8000716:	5d63      	ldrb	r3, [r4, r5]
 8000718:	2101      	movs	r1, #1
 800071a:	4668      	mov	r0, sp
 800071c:	f88d 3000 	strb.w	r3, [sp]
 8000720:	f7ff fdfc 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>
      */
      _GLIBCXX17_CONSTEXPR reverse_iterator&
      operator++()
      {
	--current;
	return *this;
 8000724:	e7f5      	b.n	8000712 <test+0x152>
      reverse_iterator(const reverse_iterator& __x)
 8000726:	230a      	movs	r3, #10
	     << ("esreveR me!" | std::views::take(7) | std::views::reverse ) << '\n'
 8000728:	2416      	movs	r4, #22
 800072a:	4d0f      	ldr	r5, [pc, #60]	; (8000768 <test+0x1a8>)
 800072c:	2101      	movs	r1, #1
 800072e:	4668      	mov	r0, sp
 8000730:	f88d 3000 	strb.w	r3, [sp]
 8000734:	f7ff fdf2 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>
 8000738:	f815 3b01 	ldrb.w	r3, [r5], #1
 800073c:	2101      	movs	r1, #1
 800073e:	4668      	mov	r0, sp
 8000740:	f88d 3000 	strb.w	r3, [sp]
 8000744:	f7ff fdea 	bl	800031c <_ZN3ItmIL7BusMode0EE10send_blockEPKcj.constprop.0>
 8000748:	3c01      	subs	r4, #1
 800074a:	d1f5      	bne.n	8000738 <test+0x178>
		 << "--------------------\n";
}
 800074c:	b00c      	add	sp, #48	; 0x30
 800074e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000752:	bf00      	nop
 8000754:	2000001c 	.word	0x2000001c
 8000758:	080029d8 	.word	0x080029d8
 800075c:	411ce560 	.word	0x411ce560
 8000760:	080029f0 	.word	0x080029f0
 8000764:	08002a13 	.word	0x08002a13
 8000768:	080029fd 	.word	0x080029fd

0800076c <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800076c:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <SystemInit+0xb8>)
 800076e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000772:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800077a:	691a      	ldr	r2, [r3, #16]
 800077c:	f042 0210 	orr.w	r2, r2, #16
 8000780:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000782:	4a29      	ldr	r2, [pc, #164]	; (8000828 <SystemInit+0xbc>)
 8000784:	6813      	ldr	r3, [r2, #0]
 8000786:	f003 030f 	and.w	r3, r3, #15
 800078a:	2b06      	cmp	r3, #6
 800078c:	d805      	bhi.n	800079a <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800078e:	6813      	ldr	r3, [r2, #0]
 8000790:	f023 030f 	bic.w	r3, r3, #15
 8000794:	f043 0307 	orr.w	r3, r3, #7
 8000798:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800079a:	4b24      	ldr	r3, [pc, #144]	; (800082c <SystemInit+0xc0>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	f042 0201 	orr.w	r2, r2, #1
 80007a2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <SystemInit+0xc4>)
 80007aa:	6819      	ldr	r1, [r3, #0]
 80007ac:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ae:	491e      	ldr	r1, [pc, #120]	; (8000828 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 80007b0:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007b2:	680a      	ldr	r2, [r1, #0]
 80007b4:	0712      	lsls	r2, r2, #28
 80007b6:	d505      	bpl.n	80007c4 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007b8:	680a      	ldr	r2, [r1, #0]
 80007ba:	f022 020f 	bic.w	r2, r2, #15
 80007be:	f042 0207 	orr.w	r2, r2, #7
 80007c2:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007c4:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007c6:	491b      	ldr	r1, [pc, #108]	; (8000834 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 80007c8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80007ca:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80007cc:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80007ce:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007d0:	4919      	ldr	r1, [pc, #100]	; (8000838 <SystemInit+0xcc>)
 80007d2:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007d4:	4919      	ldr	r1, [pc, #100]	; (800083c <SystemInit+0xd0>)
 80007d6:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007da:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007dc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007de:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007e2:	6819      	ldr	r1, [r3, #0]
 80007e4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80007e8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007f0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <SystemInit+0xd4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	0c1b      	lsrs	r3, r3, #16
 8000802:	041b      	lsls	r3, r3, #16
 8000804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000808:	d203      	bcs.n	8000812 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <SystemInit+0xd8>)
 800080c:	2201      	movs	r2, #1
 800080e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <SystemInit+0xdc>)
 8000814:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000818:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800081a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800081e:	4b01      	ldr	r3, [pc, #4]	; (8000824 <SystemInit+0xb8>)
 8000820:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00
 8000828:	52002000 	.word	0x52002000
 800082c:	58024400 	.word	0x58024400
 8000830:	eaf6ed7f 	.word	0xeaf6ed7f
 8000834:	02020200 	.word	0x02020200
 8000838:	01ff0000 	.word	0x01ff0000
 800083c:	01010280 	.word	0x01010280
 8000840:	5c001000 	.word	0x5c001000
 8000844:	51008000 	.word	0x51008000
 8000848:	52004000 	.word	0x52004000

0800084c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_DMA_Init+0x20>)
{
 800084e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000850:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000854:	f042 0201 	orr.w	r2, r2, #1
 8000858:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800085c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	9b01      	ldr	r3, [sp, #4]

}
 8000868:	b002      	add	sp, #8
 800086a:	4770      	bx	lr
 800086c:	58024400 	.word	0x58024400

08000870 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_GPIO_Init+0x68>)
{
 8000872:	b084      	sub	sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000874:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000878:	f042 0204 	orr.w	r2, r2, #4
 800087c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000880:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000884:	f002 0204 	and.w	r2, r2, #4
 8000888:	9200      	str	r2, [sp, #0]
 800088a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000890:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000894:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000898:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800089c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80008a0:	9201      	str	r2, [sp, #4]
 80008a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008a8:	f042 0201 	orr.w	r2, r2, #1
 80008ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80008b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008b4:	f002 0201 	and.w	r2, r2, #1
 80008b8:	9202      	str	r2, [sp, #8]
 80008ba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008c0:	f042 0202 	orr.w	r2, r2, #2
 80008c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	f003 0302 	and.w	r3, r3, #2
 80008d0:	9303      	str	r3, [sp, #12]
 80008d2:	9b03      	ldr	r3, [sp, #12]

}
 80008d4:	b004      	add	sp, #16
 80008d6:	4770      	bx	lr
 80008d8:	58024400 	.word	0x58024400

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b500      	push	{lr}
 80008de:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e0:	224c      	movs	r2, #76	; 0x4c
 80008e2:	2100      	movs	r1, #0
 80008e4:	a809      	add	r0, sp, #36	; 0x24
 80008e6:	f002 f863 	bl	80029b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ea:	2220      	movs	r2, #32
 80008ec:	2100      	movs	r1, #0
 80008ee:	a801      	add	r0, sp, #4
 80008f0:	f002 f85e 	bl	80029b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008f4:	2004      	movs	r0, #4
 80008f6:	f000 fc73 	bl	80011e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008fa:	2300      	movs	r3, #0
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <SystemClock_Config+0xc0>)
 8000900:	699a      	ldr	r2, [r3, #24]
 8000902:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000906:	619a      	str	r2, [r3, #24]
 8000908:	699a      	ldr	r2, [r3, #24]
 800090a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800090e:	9200      	str	r2, [sp, #0]
 8000910:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <SystemClock_Config+0xc4>)
 8000912:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000914:	f041 0101 	orr.w	r1, r1, #1
 8000918:	62d1      	str	r1, [r2, #44]	; 0x2c
 800091a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800091c:	f002 0201 	and.w	r2, r2, #1
 8000920:	9200      	str	r2, [sp, #0]
 8000922:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000924:	699a      	ldr	r2, [r3, #24]
 8000926:	0492      	lsls	r2, r2, #18
 8000928:	d5fc      	bpl.n	8000924 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800092a:	4a1e      	ldr	r2, [pc, #120]	; (80009a4 <SystemClock_Config+0xc8>)
  RCC_OscInitStruct.PLL.PLLN = 120;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800092c:	200c      	movs	r0, #12
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800092e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000930:	f023 0303 	bic.w	r3, r3, #3
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000940:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000942:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000948:	2278      	movs	r2, #120	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094a:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 800094e:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000952:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000956:	2300      	movs	r3, #0
 8000958:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800095e:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f000 fc82 	bl	8001268 <HAL_RCC_OscConfig>
 8000964:	b108      	cbz	r0, 800096a <SystemClock_Config+0x8e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000966:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <SystemClock_Config+0x8c>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096a:	223f      	movs	r2, #63	; 0x3f
 800096c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800096e:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000970:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000976:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000978:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800097c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000980:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000982:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000984:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000988:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800098c:	f000 ffa4 	bl	80018d8 <HAL_RCC_ClockConfig>
 8000990:	b108      	cbz	r0, 8000996 <SystemClock_Config+0xba>
 8000992:	b672      	cpsid	i
  while (1)
 8000994:	e7fe      	b.n	8000994 <SystemClock_Config+0xb8>
}
 8000996:	b01d      	add	sp, #116	; 0x74
 8000998:	f85d fb04 	ldr.w	pc, [sp], #4
 800099c:	58024800 	.word	0x58024800
 80009a0:	58000400 	.word	0x58000400
 80009a4:	58024400 	.word	0x58024400

080009a8 <main>:
{
 80009a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009aa:	2210      	movs	r2, #16
 80009ac:	2100      	movs	r1, #0
 80009ae:	4668      	mov	r0, sp
 80009b0:	f001 fffe 	bl	80029b0 <memset>
  HAL_MPU_Disable();
 80009b4:	f000 fa2e 	bl	8000e14 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009b8:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009ba:	2000      	movs	r0, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009bc:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009c0:	f248 731f 	movw	r3, #34591	; 0x871f
 80009c4:	e9cd 0301 	strd	r0, r3, [sp, #4]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009c8:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009cc:	4668      	mov	r0, sp
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009ce:	9303      	str	r3, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009d0:	f000 fa3e 	bl	8000e50 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009d4:	2004      	movs	r0, #4
 80009d6:	f000 fa2b 	bl	8000e30 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009da:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <main+0x124>)
 80009dc:	695a      	ldr	r2, [r3, #20]
 80009de:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80009e2:	d111      	bne.n	8000a08 <main+0x60>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009e8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009f4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009f8:	695a      	ldr	r2, [r3, #20]
 80009fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80009fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a04:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a08:	4a30      	ldr	r2, [pc, #192]	; (8000acc <main+0x124>)
 8000a0a:	6953      	ldr	r3, [r2, #20]
 8000a0c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000a10:	d123      	bne.n	8000a5a <main+0xb2>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a16:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8000a1a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a1e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a22:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a26:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000a2a:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a2c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a30:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a32:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8000a36:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a38:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000a3c:	d2f9      	bcs.n	8000a32 <main+0x8a>
    } while(sets-- != 0U);
 8000a3e:	3b20      	subs	r3, #32
 8000a40:	f113 0f20 	cmn.w	r3, #32
 8000a44:	d1f2      	bne.n	8000a2c <main+0x84>
 8000a46:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a4a:	6953      	ldr	r3, [r2, #20]
 8000a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a50:	6153      	str	r3, [r2, #20]
 8000a52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a56:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a5e:	4d1c      	ldr	r5, [pc, #112]	; (8000ad0 <main+0x128>)
 8000a60:	682c      	ldr	r4, [r5, #0]
 8000a62:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8000a66:	d010      	beq.n	8000a8a <main+0xe2>
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	d1f9      	bne.n	8000a60 <main+0xb8>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <main+0xc6>
  MX_GPIO_Init();
 8000a70:	f7ff fefe 	bl	8000870 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a74:	f7ff feea 	bl	800084c <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a78:	f000 f84a 	bl	8000b10 <MX_USB_OTG_FS_PCD_Init>
	  HAL_Delay(3000);
 8000a7c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a80:	f000 f958 	bl	8000d34 <HAL_Delay>
	  test();
 8000a84:	f7ff fd9c 	bl	80005c0 <test>
  while (1)
 8000a88:	e7f8      	b.n	8000a7c <main+0xd4>
  HAL_Init();
 8000a8a:	f000 f913 	bl	8000cb4 <HAL_Init>
  SystemClock_Config();
 8000a8e:	f7ff ff25 	bl	80008dc <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a92:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a96:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a9c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000aa0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	9b00      	ldr	r3, [sp, #0]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000aac:	f000 fae6 	bl	800107c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f000 faf0 	bl	8001098 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <main+0x128>)
 8000abe:	6811      	ldr	r1, [r2, #0]
 8000ac0:	0409      	lsls	r1, r1, #16
 8000ac2:	d4d5      	bmi.n	8000a70 <main+0xc8>
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	d1fa      	bne.n	8000abe <main+0x116>
 8000ac8:	b672      	cpsid	i
  while (1)
 8000aca:	e7fe      	b.n	8000aca <main+0x122>
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	58024400 	.word	0x58024400

08000ad4 <Error_Handler>:
 8000ad4:	b672      	cpsid	i
 8000ad6:	e7fe      	b.n	8000ad6 <Error_Handler+0x2>

08000ad8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <HAL_MspInit+0x20>)
{
 8000ada:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000adc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ae0:	f042 0202 	orr.w	r2, r2, #2
 8000ae4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	b002      	add	sp, #8
 8000af6:	4770      	bx	lr
 8000af8:	58024400 	.word	0x58024400

08000afc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler>

08000afe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler>

08000b00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler>

08000b02 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler>

08000b04 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler>

08000b06 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	4770      	bx	lr

08000b08 <DebugMon_Handler>:
 8000b08:	4770      	bx	lr

08000b0a <PendSV_Handler>:
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 b900 	b.w	8000d10 <HAL_IncTick>

08000b10 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b10:	b508      	push	{r3, lr}
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x34>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b14:	2309      	movs	r3, #9
 8000b16:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <MX_USB_OTG_FS_PCD_Init+0x38>)
 8000b18:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	2202      	movs	r2, #2
 8000b20:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b24:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b28:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b2a:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b2c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b30:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b34:	f000 fab8 	bl	80010a8 <HAL_PCD_Init>
 8000b38:	b118      	cbz	r0, 8000b42 <MX_USB_OTG_FS_PCD_Init+0x32>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000b3e:	f7ff bfc9 	b.w	8000ad4 <Error_Handler>
}
 8000b42:	bd08      	pop	{r3, pc}
 8000b44:	2000003c 	.word	0x2000003c
 8000b48:	40080000 	.word	0x40080000

08000b4c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000b4c:	b530      	push	{r4, r5, lr}
 8000b4e:	b0b7      	sub	sp, #220	; 0xdc
 8000b50:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	2214      	movs	r2, #20
 8000b54:	2100      	movs	r1, #0
 8000b56:	a802      	add	r0, sp, #8
 8000b58:	f001 ff2a 	bl	80029b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5c:	22bc      	movs	r2, #188	; 0xbc
 8000b5e:	2100      	movs	r1, #0
 8000b60:	a807      	add	r0, sp, #28
 8000b62:	f001 ff25 	bl	80029b0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000b66:	6822      	ldr	r2, [r4, #0]
 8000b68:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <HAL_PCD_MspInit+0xbc>)
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d149      	bne.n	8000c02 <HAL_PCD_MspInit+0xb6>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b6e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    PeriphClkInitStruct.PLL3.PLL3M = 1;
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000b72:	2001      	movs	r0, #1
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000b74:	2204      	movs	r2, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b76:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000b78:	2318      	movs	r3, #24
 8000b7a:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000b7e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3R = 2;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b80:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000b82:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000b86:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000b88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b8c:	9315      	str	r3, [sp, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000b8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000b92:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b94:	f001 f8b6 	bl	8001d04 <HAL_RCCEx_PeriphCLKConfig>
 8000b98:	b108      	cbz	r0, 8000b9e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000b9a:	f7ff ff9b 	bl	8000ad4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4c1b      	ldr	r4, [pc, #108]	; (8000c0c <HAL_PCD_MspInit+0xc0>)
    HAL_PWREx_EnableUSBVoltageDetector();
 8000ba0:	f000 fb5a 	bl	8001258 <HAL_PWREx_EnableUSBVoltageDetector>
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	a902      	add	r1, sp, #8
 8000bb0:	4817      	ldr	r0, [pc, #92]	; (8000c10 <HAL_PCD_MspInit+0xc4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000bba:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bcc:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	e9cd 5504 	strd	r5, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bd2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f000 f968 	bl	8000ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	a902      	add	r1, sp, #8
 8000bde:	480c      	ldr	r0, [pc, #48]	; (8000c10 <HAL_PCD_MspInit+0xc4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be2:	e9cd 3502 	strd	r3, r5, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f000 f95f 	bl	8000ea8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bea:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bf2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8000bf6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000c02:	b037      	add	sp, #220	; 0xdc
 8000c04:	bd30      	pop	{r4, r5, pc}
 8000c06:	bf00      	nop
 8000c08:	40080000 	.word	0x40080000
 8000c0c:	58024400 	.word	0x58024400
 8000c10:	58020000 	.word	0x58020000

08000c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c18:	f7ff fda8 	bl	800076c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c1e:	490d      	ldr	r1, [pc, #52]	; (8000c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c34:	4c0a      	ldr	r4, [pc, #40]	; (8000c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c42:	f001 fe83 	bl	800294c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c46:	f7ff feaf 	bl	80009a8 <main>
  bx  lr
 8000c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c4c:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8000c50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c54:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c58:	08002ab8 	.word	0x08002ab8
  ldr r2, =_sbss
 8000c5c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c60:	20000448 	.word	0x20000448

08000c64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC3_IRQHandler>
	...

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_InitTick+0x40>)
{
 8000c6c:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8000c6e:	7818      	ldrb	r0, [r3, #0]
 8000c70:	b908      	cbnz	r0, 8000c76 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8000c72:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <HAL_InitTick+0x44>)
 8000c7c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c80:	6810      	ldr	r0, [r2, #0]
 8000c82:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c86:	f000 f8b1 	bl	8000dec <HAL_SYSTICK_Config>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d1f0      	bne.n	8000c72 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c90:	2d0f      	cmp	r5, #15
 8000c92:	d8ee      	bhi.n	8000c72 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	4602      	mov	r2, r0
 8000c96:	4629      	mov	r1, r5
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 f874 	bl	8000d88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_InitTick+0x48>)
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8000ca6:	e7e5      	b.n	8000c74 <HAL_InitTick+0xc>
 8000ca8:	24000008 	.word	0x24000008
 8000cac:	24000000 	.word	0x24000000
 8000cb0:	2400000c 	.word	0x2400000c

08000cb4 <HAL_Init>:
{
 8000cb4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f000 f854 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cbc:	f000 fd6c 	bl	8001798 <HAL_RCC_GetSysClockFreq>
 8000cc0:	490f      	ldr	r1, [pc, #60]	; (8000d00 <HAL_Init+0x4c>)
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_Init+0x50>)
 8000cc4:	698b      	ldr	r3, [r1, #24]
 8000cc6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	f003 031f 	and.w	r3, r3, #31
 8000cd0:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cd2:	698b      	ldr	r3, [r1, #24]
 8000cd4:	f003 030f 	and.w	r3, r3, #15
 8000cd8:	5cd3      	ldrb	r3, [r2, r3]
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_Init+0x54>)
 8000cdc:	f003 031f 	and.w	r3, r3, #31
 8000ce0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce4:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_Init+0x58>)
 8000ce8:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ffbc 	bl	8000c68 <HAL_InitTick>
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	b918      	cbnz	r0, 8000cfc <HAL_Init+0x48>
  HAL_MspInit();
 8000cf4:	f7ff fef0 	bl	8000ad8 <HAL_MspInit>
}
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000cfc:	2401      	movs	r4, #1
 8000cfe:	e7fb      	b.n	8000cf8 <HAL_Init+0x44>
 8000d00:	58024400 	.word	0x58024400
 8000d04:	08002aa0 	.word	0x08002aa0
 8000d08:	24000004 	.word	0x24000004
 8000d0c:	24000000 	.word	0x24000000

08000d10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000d10:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <HAL_IncTick+0x10>)
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_IncTick+0x14>)
 8000d14:	6811      	ldr	r1, [r2, #0]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	440b      	add	r3, r1
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000444 	.word	0x20000444
 8000d24:	24000008 	.word	0x24000008

08000d28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d28:	4b01      	ldr	r3, [pc, #4]	; (8000d30 <HAL_GetTick+0x8>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000444 	.word	0x20000444

08000d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff fff6 	bl	8000d28 <HAL_GetTick>
 8000d3c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d40:	bf1e      	ittt	ne
 8000d42:	4b04      	ldrne	r3, [pc, #16]	; (8000d54 <HAL_Delay+0x20>)
 8000d44:	781b      	ldrbne	r3, [r3, #0]
 8000d46:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	1b43      	subs	r3, r0, r5
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	d3fa      	bcc.n	8000d48 <HAL_Delay+0x14>
  {
  }
}
 8000d52:	bd38      	pop	{r3, r4, r5, pc}
 8000d54:	24000008 	.word	0x24000008

08000d58 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000d58:	4b01      	ldr	r3, [pc, #4]	; (8000d60 <HAL_GetREVID+0x8>)
 8000d5a:	6818      	ldr	r0, [r3, #0]
}
 8000d5c:	0c00      	lsrs	r0, r0, #16
 8000d5e:	4770      	bx	lr
 8000d60:	5c001000 	.word	0x5c001000

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d66:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000d72:	0412      	lsls	r2, r2, #16
 8000d74:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d80:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8a:	b530      	push	{r4, r5, lr}
 8000d8c:	68dc      	ldr	r4, [r3, #12]
 8000d8e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d92:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	2d04      	cmp	r5, #4
 8000d9a:	bf28      	it	cs
 8000d9c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da4:	bf8c      	ite	hi
 8000da6:	3c03      	subhi	r4, #3
 8000da8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000daa:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8000dae:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	fa01 f104 	lsl.w	r1, r1, r4
 8000dc0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000dc8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000dca:	db06      	blt.n	8000dda <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000dd0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000dd4:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000dd8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	f000 000f 	and.w	r0, r0, #15
 8000dde:	4a02      	ldr	r2, [pc, #8]	; (8000de8 <HAL_NVIC_SetPriority+0x60>)
 8000de0:	5413      	strb	r3, [r2, r0]
 8000de2:	e7f9      	b.n	8000dd8 <HAL_NVIC_SetPriority+0x50>
 8000de4:	e000ed00 	.word	0xe000ed00
 8000de8:	e000ed14 	.word	0xe000ed14

08000dec <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	3801      	subs	r0, #1
 8000dee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000df2:	d20b      	bcs.n	8000e0c <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <HAL_SYSTICK_Config+0x24>)
 8000dfa:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfc:	6158      	str	r0, [r3, #20]
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfe:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e04:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e06:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e08:	611a      	str	r2, [r3, #16]
  return (0UL);                                                     /* Function successful */
 8000e0a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e0c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e14:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <HAL_MPU_Disable+0x18>)
 8000e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e22:	2200      	movs	r2, #0
 8000e24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_MPU_Enable+0x1c>)
 8000e32:	f040 0001 	orr.w	r0, r0, #1
 8000e36:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e46:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e50:	7843      	ldrb	r3, [r0, #1]
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_MPU_ConfigRegion+0x54>)
{
 8000e54:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8000e56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8000e5a:	7801      	ldrb	r1, [r0, #0]
 8000e5c:	b1e9      	cbz	r1, 8000e9a <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000e5e:	6843      	ldr	r3, [r0, #4]
 8000e60:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e64:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e66:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e68:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e6a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e6e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e70:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e72:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e76:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e78:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e7c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e7e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e82:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e88:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000e8e:	7a01      	ldrb	r1, [r0, #8]
 8000e90:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e94:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000e98:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8000e9a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8000e9e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8000ea2:	e7f9      	b.n	8000e98 <HAL_MPU_ConfigRegion+0x48>
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8000eac:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001074 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000eb2:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eb6:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8001078 <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000eba:	680a      	ldr	r2, [r1, #0]
 8000ebc:	fa32 f503 	lsrs.w	r5, r2, r3
 8000ec0:	d102      	bne.n	8000ec8 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  }
}
 8000ec2:	b003      	add	sp, #12
 8000ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8000ed0:	ea1c 0202 	ands.w	r2, ip, r2
 8000ed4:	f000 80b7 	beq.w	8001046 <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed8:	684d      	ldr	r5, [r1, #4]
 8000eda:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ede:	2603      	movs	r6, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee0:	f025 0a10 	bic.w	sl, r5, #16
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ee4:	fa06 f60e 	lsl.w	r6, r6, lr
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee8:	f10a 37ff 	add.w	r7, sl, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eec:	43f6      	mvns	r6, r6
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eee:	2f01      	cmp	r7, #1
 8000ef0:	d811      	bhi.n	8000f16 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8000ef2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ef4:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef8:	68cf      	ldr	r7, [r1, #12]
 8000efa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000efe:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8000f02:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f04:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f06:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f0a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000f0e:	409f      	lsls	r7, r3
 8000f10:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000f14:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f16:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f18:	f1ba 0f02 	cmp.w	sl, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f1c:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f20:	688f      	ldr	r7, [r1, #8]
 8000f22:	fa07 f70e 	lsl.w	r7, r7, lr
 8000f26:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 8000f2a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2c:	d116      	bne.n	8000f5c <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3U];
 8000f2e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f32:	f003 0b07 	and.w	fp, r3, #7
 8000f36:	f04f 0c0f 	mov.w	ip, #15
 8000f3a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000f3e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8000f42:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f46:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f4a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f4e:	690f      	ldr	r7, [r1, #16]
 8000f50:	fa07 f70b 	lsl.w	r7, r7, fp
 8000f54:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000f58:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000f5c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f5e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f60:	f005 0703 	and.w	r7, r5, #3
 8000f64:	fa07 f70e 	lsl.w	r7, r7, lr
 8000f68:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000f6a:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f6c:	00ee      	lsls	r6, r5, #3
 8000f6e:	d56a      	bpl.n	8001046 <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f70:	f8d8 60f4 	ldr.w	r6, [r8, #244]	; 0xf4
 8000f74:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f78:	f003 0c03 	and.w	ip, r3, #3
 8000f7c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f80:	f046 0602 	orr.w	r6, r6, #2
 8000f84:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f88:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	f8c8 60f4 	str.w	r6, [r8, #244]	; 0xf4
 8000f90:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000f94:	f8d8 60f4 	ldr.w	r6, [r8, #244]	; 0xf4
 8000f98:	f006 0602 	and.w	r6, r6, #2
 8000f9c:	9601      	str	r6, [sp, #4]
 8000f9e:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fa0:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fa8:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fac:	4e30      	ldr	r6, [pc, #192]	; (8001070 <HAL_GPIO_Init+0x1c8>)
 8000fae:	42b0      	cmp	r0, r6
 8000fb0:	d04b      	beq.n	800104a <HAL_GPIO_Init+0x1a2>
 8000fb2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fb6:	42b0      	cmp	r0, r6
 8000fb8:	d049      	beq.n	800104e <HAL_GPIO_Init+0x1a6>
 8000fba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fbe:	42b0      	cmp	r0, r6
 8000fc0:	d047      	beq.n	8001052 <HAL_GPIO_Init+0x1aa>
 8000fc2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fc6:	42b0      	cmp	r0, r6
 8000fc8:	d045      	beq.n	8001056 <HAL_GPIO_Init+0x1ae>
 8000fca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fce:	42b0      	cmp	r0, r6
 8000fd0:	d043      	beq.n	800105a <HAL_GPIO_Init+0x1b2>
 8000fd2:	4548      	cmp	r0, r9
 8000fd4:	d043      	beq.n	800105e <HAL_GPIO_Init+0x1b6>
 8000fd6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000fda:	42b0      	cmp	r0, r6
 8000fdc:	d041      	beq.n	8001062 <HAL_GPIO_Init+0x1ba>
 8000fde:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fe2:	42b0      	cmp	r0, r6
 8000fe4:	d03f      	beq.n	8001066 <HAL_GPIO_Init+0x1be>
 8000fe6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fea:	42b0      	cmp	r0, r6
 8000fec:	d03d      	beq.n	800106a <HAL_GPIO_Init+0x1c2>
 8000fee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ff2:	42b0      	cmp	r0, r6
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2609      	moveq	r6, #9
 8000ff8:	260a      	movne	r6, #10
 8000ffa:	fa06 f60c 	lsl.w	r6, r6, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ffe:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001002:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001006:	60be      	str	r6, [r7, #8]
        temp &= ~(iocurrent);
 8001008:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI_CurrentCPU->IMR1;
 800100c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8001010:	bf0c      	ite	eq
 8001012:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001014:	4316      	orrne	r6, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001016:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI_CurrentCPU->IMR1 = temp;
 800101a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        temp = EXTI_CurrentCPU->EMR1;
 800101e:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8001022:	bf0c      	ite	eq
 8001024:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001026:	4316      	orrne	r6, r2
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001028:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        EXTI_CurrentCPU->EMR1 = temp;
 800102c:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        temp = EXTI->RTSR1;
 8001030:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 8001032:	bf0c      	ite	eq
 8001034:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001036:	4316      	orrne	r6, r2
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001038:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR1 = temp;
 800103a:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 800103c:	6866      	ldr	r6, [r4, #4]
        temp &= ~(iocurrent);
 800103e:	bf54      	ite	pl
 8001040:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001042:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8001044:	6066      	str	r6, [r4, #4]
    position++;
 8001046:	3301      	adds	r3, #1
 8001048:	e737      	b.n	8000eba <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800104a:	2600      	movs	r6, #0
 800104c:	e7d5      	b.n	8000ffa <HAL_GPIO_Init+0x152>
 800104e:	2601      	movs	r6, #1
 8001050:	e7d3      	b.n	8000ffa <HAL_GPIO_Init+0x152>
 8001052:	2602      	movs	r6, #2
 8001054:	e7d1      	b.n	8000ffa <HAL_GPIO_Init+0x152>
 8001056:	2603      	movs	r6, #3
 8001058:	e7cf      	b.n	8000ffa <HAL_GPIO_Init+0x152>
 800105a:	2604      	movs	r6, #4
 800105c:	e7cd      	b.n	8000ffa <HAL_GPIO_Init+0x152>
 800105e:	2605      	movs	r6, #5
 8001060:	e7cb      	b.n	8000ffa <HAL_GPIO_Init+0x152>
 8001062:	2606      	movs	r6, #6
 8001064:	e7c9      	b.n	8000ffa <HAL_GPIO_Init+0x152>
 8001066:	2607      	movs	r6, #7
 8001068:	e7c7      	b.n	8000ffa <HAL_GPIO_Init+0x152>
 800106a:	2608      	movs	r6, #8
 800106c:	e7c5      	b.n	8000ffa <HAL_GPIO_Init+0x152>
 800106e:	bf00      	nop
 8001070:	58020000 	.word	0x58020000
 8001074:	58024400 	.word	0x58024400
 8001078:	58021400 	.word	0x58021400

0800107c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_HSEM_FastTake+0x14>)
 800107e:	3020      	adds	r0, #32
 8001080:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_HSEM_FastTake+0x18>)
 8001086:	1ac0      	subs	r0, r0, r3
 8001088:	bf18      	it	ne
 800108a:	2001      	movne	r0, #1
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	58026400 	.word	0x58026400
 8001094:	80000300 	.word	0x80000300

08001098 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001098:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 800109c:	4b01      	ldr	r3, [pc, #4]	; (80010a4 <HAL_HSEM_Release+0xc>)
 800109e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80010a2:	4770      	bx	lr
 80010a4:	58026400 	.word	0x58026400

080010a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010aa:	4604      	mov	r4, r0
{
 80010ac:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80010ae:	b360      	cbz	r0, 800110a <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010b0:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 80010b4:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010ba:	b91b      	cbnz	r3, 80010c4 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010bc:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010c0:	f7ff fd44 	bl	8000b4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010c4:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010c6:	466e      	mov	r6, sp
 80010c8:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80010ca:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010ce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 80010d0:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010d2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 80010d6:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 80010da:	bf08      	it	eq
 80010dc:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 80010de:	f001 fb29 	bl	8002734 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010ee:	4625      	mov	r5, r4
 80010f0:	e886 0003 	stmia.w	r6, {r0, r1}
 80010f4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80010f8:	f855 0b10 	ldr.w	r0, [r5], #16
 80010fc:	f001 fad0 	bl	80026a0 <USB_CoreInit>
 8001100:	4606      	mov	r6, r0
 8001102:	b120      	cbz	r0, 800110e <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001104:	2302      	movs	r3, #2
 8001106:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800110a:	2501      	movs	r5, #1
 800110c:	e052      	b.n	80011b4 <HAL_PCD_Init+0x10c>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800110e:	4601      	mov	r1, r0
 8001110:	6820      	ldr	r0, [r4, #0]
 8001112:	f001 fb15 	bl	8002740 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001116:	4630      	mov	r0, r6
 8001118:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800111c:	261c      	movs	r6, #28
 800111e:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001122:	4601      	mov	r1, r0
 8001124:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001126:	3001      	adds	r0, #1
 8001128:	4594      	cmp	ip, r2
 800112a:	d81b      	bhi.n	8001164 <HAL_PCD_Init+0xbc>
 800112c:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800112e:	261c      	movs	r6, #28
 8001130:	4619      	mov	r1, r3
 8001132:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001134:	3301      	adds	r3, #1
 8001136:	4584      	cmp	ip, r0
 8001138:	d822      	bhi.n	8001180 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800113a:	466e      	mov	r6, sp
 800113c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001142:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001144:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001148:	e886 0003 	stmia.w	r6, {r0, r1}
 800114c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001150:	6820      	ldr	r0, [r4, #0]
 8001152:	f001 fb37 	bl	80027c4 <USB_DevInit>
 8001156:	2301      	movs	r3, #1
 8001158:	4605      	mov	r5, r0
 800115a:	b1f0      	cbz	r0, 800119a <HAL_PCD_Init+0xf2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800115c:	2202      	movs	r2, #2
 800115e:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001162:	e7d2      	b.n	800110a <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8001164:	fb06 4302 	mla	r3, r6, r2, r4
 8001168:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 800116c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001170:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001174:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8001178:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800117a:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800117e:	e7d1      	b.n	8001124 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8001180:	fb06 4200 	mla	r2, r6, r0, r4
 8001184:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8001188:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800118c:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001190:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001194:	e9c2 1181 	strd	r1, r1, [r2, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001198:	e7cb      	b.n	8001132 <HAL_PCD_Init+0x8a>
  }

  hpcd->USB_Address = 0U;
 800119a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800119e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <HAL_PCD_Init+0x106>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011a8:	4620      	mov	r0, r4
 80011aa:	f000 f806 	bl	80011ba <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80011ae:	6820      	ldr	r0, [r4, #0]
 80011b0:	f001 fbbe 	bl	8002930 <USB_DevDisconnect>

  return HAL_OK;
}
 80011b4:	4628      	mov	r0, r5
 80011b6:	b00b      	add	sp, #44	; 0x2c
 80011b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011ba <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ba:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80011bc:	2100      	movs	r1, #0
  hpcd->lpm_active = 1U;
 80011be:	2301      	movs	r3, #1
  hpcd->LPM_State = LPM_L0;
 80011c0:	f880 13f4 	strb.w	r1, [r0, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 80011c4:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 80011c8:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80011ca:	6993      	ldr	r3, [r2, #24]
 80011cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011d0:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80011d2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	f043 0303 	orr.w	r3, r3, #3
 80011dc:	6553      	str	r3, [r2, #84]	; 0x54
}
 80011de:	4770      	bx	lr

080011e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80011e0:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80011e2:	4d1c      	ldr	r5, [pc, #112]	; (8001254 <HAL_PWREx_ConfigSupply+0x74>)
{
 80011e4:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80011e6:	68eb      	ldr	r3, [r5, #12]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	2b06      	cmp	r3, #6
 80011ee:	d006      	beq.n	80011fe <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80011f0:	68e8      	ldr	r0, [r5, #12]
 80011f2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80011f6:	1b00      	subs	r0, r0, r4
 80011f8:	bf18      	it	ne
 80011fa:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80011fc:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80011fe:	68eb      	ldr	r3, [r5, #12]
 8001200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001204:	4303      	orrs	r3, r0
 8001206:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8001208:	f7ff fd8e 	bl	8000d28 <HAL_GetTick>
 800120c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800120e:	686b      	ldr	r3, [r5, #4]
 8001210:	049a      	lsls	r2, r3, #18
 8001212:	d508      	bpl.n	8001226 <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001214:	f1a4 031d 	sub.w	r3, r4, #29
 8001218:	2b01      	cmp	r3, #1
 800121a:	d90c      	bls.n	8001236 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800121c:	3c2d      	subs	r4, #45	; 0x2d
 800121e:	2c01      	cmp	r4, #1
 8001220:	d909      	bls.n	8001236 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8001222:	2000      	movs	r0, #0
 8001224:	e7ea      	b.n	80011fc <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001226:	f7ff fd7f 	bl	8000d28 <HAL_GetTick>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001230:	d9ed      	bls.n	800120e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8001232:	2001      	movs	r0, #1
 8001234:	e7e2      	b.n	80011fc <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8001236:	f7ff fd77 	bl	8000d28 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800123a:	4d06      	ldr	r5, [pc, #24]	; (8001254 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800123c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800123e:	68eb      	ldr	r3, [r5, #12]
 8001240:	03db      	lsls	r3, r3, #15
 8001242:	d4ee      	bmi.n	8001222 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001244:	f7ff fd70 	bl	8000d28 <HAL_GetTick>
 8001248:	1b00      	subs	r0, r0, r4
 800124a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800124e:	d9f6      	bls.n	800123e <HAL_PWREx_ConfigSupply+0x5e>
 8001250:	e7ef      	b.n	8001232 <HAL_PWREx_ConfigSupply+0x52>
 8001252:	bf00      	nop
 8001254:	58024800 	.word	0x58024800

08001258 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001258:	4a02      	ldr	r2, [pc, #8]	; (8001264 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800125a:	68d3      	ldr	r3, [r2, #12]
 800125c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001260:	60d3      	str	r3, [r2, #12]
}
 8001262:	4770      	bx	lr
 8001264:	58024800 	.word	0x58024800

08001268 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800126a:	4604      	mov	r4, r0
 800126c:	2800      	cmp	r0, #0
 800126e:	d074      	beq.n	800135a <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001270:	6803      	ldr	r3, [r0, #0]
 8001272:	07d8      	lsls	r0, r3, #31
 8001274:	d45e      	bmi.n	8001334 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	0799      	lsls	r1, r3, #30
 800127a:	f100 80b0 	bmi.w	80013de <HAL_RCC_OscConfig+0x176>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	06da      	lsls	r2, r3, #27
 8001282:	d527      	bpl.n	80012d4 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001284:	4ba1      	ldr	r3, [pc, #644]	; (800150c <HAL_RCC_OscConfig+0x2a4>)
 8001286:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001288:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800128e:	2a08      	cmp	r2, #8
 8001290:	d007      	beq.n	80012a2 <HAL_RCC_OscConfig+0x3a>
 8001292:	2a18      	cmp	r2, #24
 8001294:	f040 810e 	bne.w	80014b4 <HAL_RCC_OscConfig+0x24c>
 8001298:	f001 0203 	and.w	r2, r1, #3
 800129c:	2a01      	cmp	r2, #1
 800129e:	f040 8109 	bne.w	80014b4 <HAL_RCC_OscConfig+0x24c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	05db      	lsls	r3, r3, #23
 80012a6:	d502      	bpl.n	80012ae <HAL_RCC_OscConfig+0x46>
 80012a8:	69e3      	ldr	r3, [r4, #28]
 80012aa:	2b80      	cmp	r3, #128	; 0x80
 80012ac:	d155      	bne.n	800135a <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012ae:	f7ff fd53 	bl	8000d58 <HAL_GetREVID>
 80012b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80012b6:	6a21      	ldr	r1, [r4, #32]
 80012b8:	4298      	cmp	r0, r3
 80012ba:	4b94      	ldr	r3, [pc, #592]	; (800150c <HAL_RCC_OscConfig+0x2a4>)
 80012bc:	f200 80f3 	bhi.w	80014a6 <HAL_RCC_OscConfig+0x23e>
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	2920      	cmp	r1, #32
 80012c4:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 80012c8:	bf0c      	ite	eq
 80012ca:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 80012ce:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80012d2:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	0719      	lsls	r1, r3, #28
 80012d8:	f100 812e 	bmi.w	8001538 <HAL_RCC_OscConfig+0x2d0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	069a      	lsls	r2, r3, #26
 80012e0:	f100 814f 	bmi.w	8001582 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e4:	6823      	ldr	r3, [r4, #0]
 80012e6:	075d      	lsls	r5, r3, #29
 80012e8:	d51e      	bpl.n	8001328 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80012ea:	4d89      	ldr	r5, [pc, #548]	; (8001510 <HAL_RCC_OscConfig+0x2a8>)
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f2:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80012f4:	f7ff fd18 	bl	8000d28 <HAL_GetTick>
 80012f8:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80012fa:	682b      	ldr	r3, [r5, #0]
 80012fc:	05da      	lsls	r2, r3, #23
 80012fe:	f140 8165 	bpl.w	80015cc <HAL_RCC_OscConfig+0x364>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001302:	68a3      	ldr	r3, [r4, #8]
 8001304:	4d81      	ldr	r5, [pc, #516]	; (800150c <HAL_RCC_OscConfig+0x2a4>)
 8001306:	2b01      	cmp	r3, #1
 8001308:	f040 8167 	bne.w	80015da <HAL_RCC_OscConfig+0x372>
 800130c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001318:	f7ff fd06 	bl	8000d28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800131c:	4e7b      	ldr	r6, [pc, #492]	; (800150c <HAL_RCC_OscConfig+0x2a4>)
      tickstart = HAL_GetTick();
 800131e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001320:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001322:	079b      	lsls	r3, r3, #30
 8001324:	f140 817f 	bpl.w	8001626 <HAL_RCC_OscConfig+0x3be>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001328:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800132a:	2900      	cmp	r1, #0
 800132c:	f040 8182 	bne.w	8001634 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001330:	2000      	movs	r0, #0
 8001332:	e02a      	b.n	800138a <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001334:	4b75      	ldr	r3, [pc, #468]	; (800150c <HAL_RCC_OscConfig+0x2a4>)
 8001336:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001338:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800133e:	2a10      	cmp	r2, #16
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0xe6>
 8001342:	2a18      	cmp	r2, #24
 8001344:	d10b      	bne.n	800135e <HAL_RCC_OscConfig+0xf6>
 8001346:	f001 0203 	and.w	r2, r1, #3
 800134a:	2a02      	cmp	r2, #2
 800134c:	d107      	bne.n	800135e <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	039a      	lsls	r2, r3, #14
 8001352:	d590      	bpl.n	8001276 <HAL_RCC_OscConfig+0xe>
 8001354:	6863      	ldr	r3, [r4, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d18d      	bne.n	8001276 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800135a:	2001      	movs	r0, #1
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135e:	6862      	ldr	r2, [r4, #4]
 8001360:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001364:	d112      	bne.n	800138c <HAL_RCC_OscConfig+0x124>
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800136c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800136e:	f7ff fcdb 	bl	8000d28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001372:	4e66      	ldr	r6, [pc, #408]	; (800150c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8001374:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001376:	6833      	ldr	r3, [r6, #0]
 8001378:	039b      	lsls	r3, r3, #14
 800137a:	f53f af7c 	bmi.w	8001276 <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137e:	f7ff fcd3 	bl	8000d28 <HAL_GetTick>
 8001382:	1b40      	subs	r0, r0, r5
 8001384:	2864      	cmp	r0, #100	; 0x64
 8001386:	d9f6      	bls.n	8001376 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8001388:	2003      	movs	r0, #3
}
 800138a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138c:	4d5f      	ldr	r5, [pc, #380]	; (800150c <HAL_RCC_OscConfig+0x2a4>)
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	b99a      	cbnz	r2, 80013ba <HAL_RCC_OscConfig+0x152>
 8001392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001396:	602b      	str	r3, [r5, #0]
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013a0:	f7ff fcc2 	bl	8000d28 <HAL_GetTick>
 80013a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013a6:	682b      	ldr	r3, [r5, #0]
 80013a8:	039f      	lsls	r7, r3, #14
 80013aa:	f57f af64 	bpl.w	8001276 <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ae:	f7ff fcbb 	bl	8000d28 <HAL_GetTick>
 80013b2:	1b80      	subs	r0, r0, r6
 80013b4:	2864      	cmp	r0, #100	; 0x64
 80013b6:	d9f6      	bls.n	80013a6 <HAL_RCC_OscConfig+0x13e>
 80013b8:	e7e6      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ba:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80013be:	d107      	bne.n	80013d0 <HAL_RCC_OscConfig+0x168>
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	602b      	str	r3, [r5, #0]
 80013c6:	682b      	ldr	r3, [r5, #0]
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	602b      	str	r3, [r5, #0]
 80013ce:	e7ce      	b.n	800136e <HAL_RCC_OscConfig+0x106>
 80013d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d4:	602b      	str	r3, [r5, #0]
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013dc:	e7f6      	b.n	80013cc <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013de:	4b4b      	ldr	r3, [pc, #300]	; (800150c <HAL_RCC_OscConfig+0x2a4>)
 80013e0:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013e4:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 80013e8:	d003      	beq.n	80013f2 <HAL_RCC_OscConfig+0x18a>
 80013ea:	2a18      	cmp	r2, #24
 80013ec:	d11f      	bne.n	800142e <HAL_RCC_OscConfig+0x1c6>
 80013ee:	078e      	lsls	r6, r1, #30
 80013f0:	d11d      	bne.n	800142e <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	075d      	lsls	r5, r3, #29
 80013f6:	d502      	bpl.n	80013fe <HAL_RCC_OscConfig+0x196>
 80013f8:	68e3      	ldr	r3, [r4, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ad      	beq.n	800135a <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fe:	f7ff fcab 	bl	8000d58 <HAL_GetREVID>
 8001402:	f241 0303 	movw	r3, #4099	; 0x1003
 8001406:	6921      	ldr	r1, [r4, #16]
 8001408:	4298      	cmp	r0, r3
 800140a:	4b40      	ldr	r3, [pc, #256]	; (800150c <HAL_RCC_OscConfig+0x2a4>)
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	d809      	bhi.n	8001424 <HAL_RCC_OscConfig+0x1bc>
 8001410:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8001414:	2940      	cmp	r1, #64	; 0x40
 8001416:	bf0c      	ite	eq
 8001418:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 800141c:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	e72c      	b.n	800127e <HAL_RCC_OscConfig+0x16>
 8001424:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8001428:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800142c:	e7f8      	b.n	8001420 <HAL_RCC_OscConfig+0x1b8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800142e:	68e1      	ldr	r1, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001430:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001432:	b339      	cbz	r1, 8001484 <HAL_RCC_OscConfig+0x21c>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001434:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001438:	4d34      	ldr	r5, [pc, #208]	; (800150c <HAL_RCC_OscConfig+0x2a4>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800143e:	f7ff fc73 	bl	8000d28 <HAL_GetTick>
 8001442:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001444:	682b      	ldr	r3, [r5, #0]
 8001446:	0758      	lsls	r0, r3, #29
 8001448:	d511      	bpl.n	800146e <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	f7ff fc85 	bl	8000d58 <HAL_GetREVID>
 800144e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001452:	6922      	ldr	r2, [r4, #16]
 8001454:	4298      	cmp	r0, r3
 8001456:	686b      	ldr	r3, [r5, #4]
 8001458:	d80f      	bhi.n	800147a <HAL_RCC_OscConfig+0x212>
 800145a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800145e:	2a40      	cmp	r2, #64	; 0x40
 8001460:	bf0c      	ite	eq
 8001462:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8001466:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800146a:	606b      	str	r3, [r5, #4]
 800146c:	e707      	b.n	800127e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fc5b 	bl	8000d28 <HAL_GetTick>
 8001472:	1b80      	subs	r0, r0, r6
 8001474:	2802      	cmp	r0, #2
 8001476:	d9e5      	bls.n	8001444 <HAL_RCC_OscConfig+0x1dc>
 8001478:	e786      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800147e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001482:	e7f2      	b.n	800146a <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_DISABLE();
 8001484:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001488:	4e20      	ldr	r6, [pc, #128]	; (800150c <HAL_RCC_OscConfig+0x2a4>)
        __HAL_RCC_HSI_DISABLE();
 800148a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800148c:	f7ff fc4c 	bl	8000d28 <HAL_GetTick>
 8001490:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001492:	6833      	ldr	r3, [r6, #0]
 8001494:	0759      	lsls	r1, r3, #29
 8001496:	f57f aef2 	bpl.w	800127e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fc45 	bl	8000d28 <HAL_GetTick>
 800149e:	1b40      	subs	r0, r0, r5
 80014a0:	2802      	cmp	r0, #2
 80014a2:	d9f6      	bls.n	8001492 <HAL_RCC_OscConfig+0x22a>
 80014a4:	e770      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 80014ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	e70f      	b.n	80012d4 <HAL_RCC_OscConfig+0x6c>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80014b4:	69e2      	ldr	r2, [r4, #28]
 80014b6:	b36a      	cbz	r2, 8001514 <HAL_RCC_OscConfig+0x2ac>
        __HAL_RCC_CSI_ENABLE();
 80014b8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014ba:	4d14      	ldr	r5, [pc, #80]	; (800150c <HAL_RCC_OscConfig+0x2a4>)
        __HAL_RCC_CSI_ENABLE();
 80014bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014c2:	f7ff fc31 	bl	8000d28 <HAL_GetTick>
 80014c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	05df      	lsls	r7, r3, #23
 80014cc:	d511      	bpl.n	80014f2 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014ce:	f7ff fc43 	bl	8000d58 <HAL_GetREVID>
 80014d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80014d6:	6a22      	ldr	r2, [r4, #32]
 80014d8:	4298      	cmp	r0, r3
 80014da:	d810      	bhi.n	80014fe <HAL_RCC_OscConfig+0x296>
 80014dc:	686b      	ldr	r3, [r5, #4]
 80014de:	2a20      	cmp	r2, #32
 80014e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014e4:	bf0c      	ite	eq
 80014e6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80014ea:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80014ee:	606b      	str	r3, [r5, #4]
 80014f0:	e6f0      	b.n	80012d4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc19 	bl	8000d28 <HAL_GetTick>
 80014f6:	1b80      	subs	r0, r0, r6
 80014f8:	2802      	cmp	r0, #2
 80014fa:	d9e5      	bls.n	80014c8 <HAL_RCC_OscConfig+0x260>
 80014fc:	e744      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014fe:	68eb      	ldr	r3, [r5, #12]
 8001500:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001504:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001508:	60eb      	str	r3, [r5, #12]
 800150a:	e6e3      	b.n	80012d4 <HAL_RCC_OscConfig+0x6c>
 800150c:	58024400 	.word	0x58024400
 8001510:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8001514:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001516:	4e9f      	ldr	r6, [pc, #636]	; (8001794 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_CSI_DISABLE();
 8001518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800151c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800151e:	f7ff fc03 	bl	8000d28 <HAL_GetTick>
 8001522:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001524:	6833      	ldr	r3, [r6, #0]
 8001526:	05d8      	lsls	r0, r3, #23
 8001528:	f57f aed4 	bpl.w	80012d4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800152c:	f7ff fbfc 	bl	8000d28 <HAL_GetTick>
 8001530:	1b40      	subs	r0, r0, r5
 8001532:	2802      	cmp	r0, #2
 8001534:	d9f6      	bls.n	8001524 <HAL_RCC_OscConfig+0x2bc>
 8001536:	e727      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001538:	6963      	ldr	r3, [r4, #20]
 800153a:	4d96      	ldr	r5, [pc, #600]	; (8001794 <HAL_RCC_OscConfig+0x52c>)
 800153c:	b183      	cbz	r3, 8001560 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 800153e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001546:	f7ff fbef 	bl	8000d28 <HAL_GetTick>
 800154a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800154c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800154e:	079b      	lsls	r3, r3, #30
 8001550:	f53f aec4 	bmi.w	80012dc <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff fbe8 	bl	8000d28 <HAL_GetTick>
 8001558:	1b80      	subs	r0, r0, r6
 800155a:	2802      	cmp	r0, #2
 800155c:	d9f6      	bls.n	800154c <HAL_RCC_OscConfig+0x2e4>
 800155e:	e713      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8001560:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001568:	f7ff fbde 	bl	8000d28 <HAL_GetTick>
 800156c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800156e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001570:	079f      	lsls	r7, r3, #30
 8001572:	f57f aeb3 	bpl.w	80012dc <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001576:	f7ff fbd7 	bl	8000d28 <HAL_GetTick>
 800157a:	1b80      	subs	r0, r0, r6
 800157c:	2802      	cmp	r0, #2
 800157e:	d9f6      	bls.n	800156e <HAL_RCC_OscConfig+0x306>
 8001580:	e702      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001582:	69a3      	ldr	r3, [r4, #24]
 8001584:	4d83      	ldr	r5, [pc, #524]	; (8001794 <HAL_RCC_OscConfig+0x52c>)
 8001586:	b183      	cbz	r3, 80015aa <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8001588:	682b      	ldr	r3, [r5, #0]
 800158a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800158e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001590:	f7ff fbca 	bl	8000d28 <HAL_GetTick>
 8001594:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001596:	682b      	ldr	r3, [r5, #0]
 8001598:	0498      	lsls	r0, r3, #18
 800159a:	f53f aea3 	bmi.w	80012e4 <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800159e:	f7ff fbc3 	bl	8000d28 <HAL_GetTick>
 80015a2:	1b80      	subs	r0, r0, r6
 80015a4:	2802      	cmp	r0, #2
 80015a6:	d9f6      	bls.n	8001596 <HAL_RCC_OscConfig+0x32e>
 80015a8:	e6ee      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015b0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80015b2:	f7ff fbb9 	bl	8000d28 <HAL_GetTick>
 80015b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	0499      	lsls	r1, r3, #18
 80015bc:	f57f ae92 	bpl.w	80012e4 <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80015c0:	f7ff fbb2 	bl	8000d28 <HAL_GetTick>
 80015c4:	1b80      	subs	r0, r0, r6
 80015c6:	2802      	cmp	r0, #2
 80015c8:	d9f6      	bls.n	80015b8 <HAL_RCC_OscConfig+0x350>
 80015ca:	e6dd      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80015cc:	f7ff fbac 	bl	8000d28 <HAL_GetTick>
 80015d0:	1b80      	subs	r0, r0, r6
 80015d2:	2864      	cmp	r0, #100	; 0x64
 80015d4:	f67f ae91 	bls.w	80012fa <HAL_RCC_OscConfig+0x92>
 80015d8:	e6d6      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015da:	b9b3      	cbnz	r3, 800160a <HAL_RCC_OscConfig+0x3a2>
 80015dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	672b      	str	r3, [r5, #112]	; 0x70
 80015e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015ea:	f023 0304 	bic.w	r3, r3, #4
 80015ee:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80015f0:	f7ff fb9a 	bl	8000d28 <HAL_GetTick>
 80015f4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015f8:	0798      	lsls	r0, r3, #30
 80015fa:	f57f ae95 	bpl.w	8001328 <HAL_RCC_OscConfig+0xc0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fb93 	bl	8000d28 <HAL_GetTick>
 8001602:	1b80      	subs	r0, r0, r6
 8001604:	42b8      	cmp	r0, r7
 8001606:	d9f6      	bls.n	80015f6 <HAL_RCC_OscConfig+0x38e>
 8001608:	e6be      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160a:	2b05      	cmp	r3, #5
 800160c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800160e:	d103      	bne.n	8001618 <HAL_RCC_OscConfig+0x3b0>
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	672b      	str	r3, [r5, #112]	; 0x70
 8001616:	e679      	b.n	800130c <HAL_RCC_OscConfig+0xa4>
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	672b      	str	r3, [r5, #112]	; 0x70
 800161e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001620:	f023 0304 	bic.w	r3, r3, #4
 8001624:	e675      	b.n	8001312 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff fb7f 	bl	8000d28 <HAL_GetTick>
 800162a:	1b40      	subs	r0, r0, r5
 800162c:	42b8      	cmp	r0, r7
 800162e:	f67f ae77 	bls.w	8001320 <HAL_RCC_OscConfig+0xb8>
 8001632:	e6a9      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001634:	4d57      	ldr	r5, [pc, #348]	; (8001794 <HAL_RCC_OscConfig+0x52c>)
 8001636:	692b      	ldr	r3, [r5, #16]
 8001638:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800163c:	2b18      	cmp	r3, #24
 800163e:	d07a      	beq.n	8001736 <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 8001640:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001642:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8001644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001648:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164a:	d167      	bne.n	800171c <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 800164c:	f7ff fb6c 	bl	8000d28 <HAL_GetTick>
 8001650:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001652:	682b      	ldr	r3, [r5, #0]
 8001654:	0199      	lsls	r1, r3, #6
 8001656:	d45b      	bmi.n	8001710 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001658:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800165a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800165c:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8001660:	f023 0303 	bic.w	r3, r3, #3
 8001664:	4313      	orrs	r3, r2
 8001666:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001668:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800166c:	62ab      	str	r3, [r5, #40]	; 0x28
 800166e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001670:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001672:	3b01      	subs	r3, #1
 8001674:	3a01      	subs	r2, #1
 8001676:	025b      	lsls	r3, r3, #9
 8001678:	0412      	lsls	r2, r2, #16
 800167a:	b29b      	uxth	r3, r3
 800167c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001680:	4313      	orrs	r3, r2
 8001682:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001684:	3a01      	subs	r2, #1
 8001686:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800168a:	4313      	orrs	r3, r2
 800168c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800168e:	3a01      	subs	r2, #1
 8001690:	0612      	lsls	r2, r2, #24
 8001692:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001696:	4313      	orrs	r3, r2
 8001698:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800169a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80016a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80016a4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80016a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80016b2:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80016b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80016b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016b8:	f023 030c 	bic.w	r3, r3, #12
 80016bc:	4313      	orrs	r3, r2
 80016be:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80016c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80016c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80016c4:	f023 0302 	bic.w	r3, r3, #2
 80016c8:	4313      	orrs	r3, r2
 80016ca:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80016cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80016d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80016d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016da:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80016dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80016de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80016e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80016ec:	682b      	ldr	r3, [r5, #0]
 80016ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb18 	bl	8000d28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016f8:	4d26      	ldr	r5, [pc, #152]	; (8001794 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 80016fa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	019a      	lsls	r2, r3, #6
 8001700:	f53f ae16 	bmi.w	8001330 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff fb10 	bl	8000d28 <HAL_GetTick>
 8001708:	1b00      	subs	r0, r0, r4
 800170a:	2802      	cmp	r0, #2
 800170c:	d9f6      	bls.n	80016fc <HAL_RCC_OscConfig+0x494>
 800170e:	e63b      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff fb0a 	bl	8000d28 <HAL_GetTick>
 8001714:	1b80      	subs	r0, r0, r6
 8001716:	2802      	cmp	r0, #2
 8001718:	d99b      	bls.n	8001652 <HAL_RCC_OscConfig+0x3ea>
 800171a:	e635      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 800171c:	f7ff fb04 	bl	8000d28 <HAL_GetTick>
 8001720:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001722:	682b      	ldr	r3, [r5, #0]
 8001724:	019b      	lsls	r3, r3, #6
 8001726:	f57f ae03 	bpl.w	8001330 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff fafd 	bl	8000d28 <HAL_GetTick>
 800172e:	1b00      	subs	r0, r0, r4
 8001730:	2802      	cmp	r0, #2
 8001732:	d9f6      	bls.n	8001722 <HAL_RCC_OscConfig+0x4ba>
 8001734:	e628      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001736:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001738:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800173a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173c:	f43f ae0d 	beq.w	800135a <HAL_RCC_OscConfig+0xf2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001740:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001744:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001746:	4281      	cmp	r1, r0
 8001748:	f47f ae07 	bne.w	800135a <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800174c:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001750:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001752:	428a      	cmp	r2, r1
 8001754:	f47f ae01 	bne.w	800135a <HAL_RCC_OscConfig+0xf2>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001758:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800175a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800175e:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001760:	4291      	cmp	r1, r2
 8001762:	f47f adfa 	bne.w	800135a <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001766:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001768:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800176c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800176e:	4291      	cmp	r1, r2
 8001770:	f47f adf3 	bne.w	800135a <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001774:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001776:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800177a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800177c:	4291      	cmp	r1, r2
 800177e:	f47f adec 	bne.w	800135a <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001782:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001784:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001788:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800178a:	4293      	cmp	r3, r2
 800178c:	f43f add0 	beq.w	8001330 <HAL_RCC_OscConfig+0xc8>
 8001790:	e5e3      	b.n	800135a <HAL_RCC_OscConfig+0xf2>
 8001792:	bf00      	nop
 8001794:	58024400 	.word	0x58024400

08001798 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001798:	4b48      	ldr	r3, [pc, #288]	; (80018bc <HAL_RCC_GetSysClockFreq+0x124>)
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80017a0:	2a10      	cmp	r2, #16
{
 80017a2:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017a4:	f000 8086 	beq.w	80018b4 <HAL_RCC_GetSysClockFreq+0x11c>
 80017a8:	2a18      	cmp	r2, #24
 80017aa:	d00c      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x2e>
 80017ac:	2a00      	cmp	r2, #0
 80017ae:	f040 8083 	bne.w	80018b8 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4842      	ldr	r0, [pc, #264]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x128>)
 80017b6:	f012 0f20 	tst.w	r2, #32
 80017ba:	d003      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80017c2:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80017c4:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80017c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80017c8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80017ca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 80017cc:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80017d0:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80017d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 80017d6:	d0f5      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80017d8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80017dc:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80017e0:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80017e4:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80017e8:	4362      	muls	r2, r4
 80017ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80017ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f2:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80017f4:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80017f8:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80017fc:	d04c      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x100>
 80017fe:	2902      	cmp	r1, #2
 8001800:	d03c      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0xe4>
 8001802:	2900      	cmp	r1, #0
 8001804:	d148      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	0692      	lsls	r2, r2, #26
 800180a:	d527      	bpl.n	800185c <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	4a2c      	ldr	r2, [pc, #176]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x128>)
 8001810:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001816:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181c:	ee07 2a10 	vmov	s14, r2
 8001820:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8001824:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8001828:	ee06 3a90 	vmov	s13, r3
 800182c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001834:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800183a:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001844:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001846:	ee07 3a10 	vmov	s14, r3
 800184a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800184e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001852:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001856:	ee17 0a90 	vmov	r0, s15
 800185a:	e7b3      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001862:	ee07 3a10 	vmov	s14, r3
 8001866:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800186a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001872:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80018c4 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001876:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800187a:	e7dd      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001882:	ee07 3a10 	vmov	s14, r3
 8001886:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800188a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001892:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80018c8 <HAL_RCC_GetSysClockFreq+0x130>
 8001896:	e7ee      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800189e:	ee07 3a10 	vmov	s14, r3
 80018a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80018ae:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80018cc <HAL_RCC_GetSysClockFreq+0x134>
 80018b2:	e7e0      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80018b6:	e785      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 80018b8:	4806      	ldr	r0, [pc, #24]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018ba:	e783      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x2c>
 80018bc:	58024400 	.word	0x58024400
 80018c0:	03d09000 	.word	0x03d09000
 80018c4:	4c742400 	.word	0x4c742400
 80018c8:	4af42400 	.word	0x4af42400
 80018cc:	4a742400 	.word	0x4a742400
 80018d0:	007a1200 	.word	0x007a1200
 80018d4:	003d0900 	.word	0x003d0900

080018d8 <HAL_RCC_ClockConfig>:
{
 80018d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018dc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80018de:	4604      	mov	r4, r0
 80018e0:	b910      	cbnz	r0, 80018e8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80018e2:	2001      	movs	r0, #1
}
 80018e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e8:	4a88      	ldr	r2, [pc, #544]	; (8001b0c <HAL_RCC_ClockConfig+0x234>)
 80018ea:	6813      	ldr	r3, [r2, #0]
 80018ec:	f003 030f 	and.w	r3, r3, #15
 80018f0:	428b      	cmp	r3, r1
 80018f2:	f0c0 8093 	bcc.w	8001a1c <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018f6:	6823      	ldr	r3, [r4, #0]
 80018f8:	075f      	lsls	r7, r3, #29
 80018fa:	f100 809b 	bmi.w	8001a34 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fe:	071e      	lsls	r6, r3, #28
 8001900:	d50b      	bpl.n	800191a <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001902:	4983      	ldr	r1, [pc, #524]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
 8001904:	6966      	ldr	r6, [r4, #20]
 8001906:	69c8      	ldr	r0, [r1, #28]
 8001908:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800190c:	4286      	cmp	r6, r0
 800190e:	d904      	bls.n	800191a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001910:	69ca      	ldr	r2, [r1, #28]
 8001912:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001916:	4332      	orrs	r2, r6
 8001918:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	06d8      	lsls	r0, r3, #27
 800191c:	d50b      	bpl.n	8001936 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800191e:	497c      	ldr	r1, [pc, #496]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
 8001920:	69a6      	ldr	r6, [r4, #24]
 8001922:	69c8      	ldr	r0, [r1, #28]
 8001924:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001928:	4286      	cmp	r6, r0
 800192a:	d904      	bls.n	8001936 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800192c:	69ca      	ldr	r2, [r1, #28]
 800192e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001932:	4332      	orrs	r2, r6
 8001934:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001936:	0699      	lsls	r1, r3, #26
 8001938:	d50b      	bpl.n	8001952 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800193a:	4975      	ldr	r1, [pc, #468]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
 800193c:	69e6      	ldr	r6, [r4, #28]
 800193e:	6a08      	ldr	r0, [r1, #32]
 8001940:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001944:	4286      	cmp	r6, r0
 8001946:	d904      	bls.n	8001952 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001948:	6a0a      	ldr	r2, [r1, #32]
 800194a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800194e:	4332      	orrs	r2, r6
 8001950:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001952:	079a      	lsls	r2, r3, #30
 8001954:	d50b      	bpl.n	800196e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001956:	496e      	ldr	r1, [pc, #440]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
 8001958:	68e6      	ldr	r6, [r4, #12]
 800195a:	6988      	ldr	r0, [r1, #24]
 800195c:	f000 000f 	and.w	r0, r0, #15
 8001960:	4286      	cmp	r6, r0
 8001962:	d904      	bls.n	800196e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001964:	698a      	ldr	r2, [r1, #24]
 8001966:	f022 020f 	bic.w	r2, r2, #15
 800196a:	4332      	orrs	r2, r6
 800196c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196e:	07df      	lsls	r7, r3, #31
 8001970:	d46e      	bmi.n	8001a50 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	079e      	lsls	r6, r3, #30
 8001976:	f100 80a1 	bmi.w	8001abc <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800197a:	4964      	ldr	r1, [pc, #400]	; (8001b0c <HAL_RCC_ClockConfig+0x234>)
 800197c:	680a      	ldr	r2, [r1, #0]
 800197e:	f002 020f 	and.w	r2, r2, #15
 8001982:	42aa      	cmp	r2, r5
 8001984:	f200 80a8 	bhi.w	8001ad8 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001988:	0758      	lsls	r0, r3, #29
 800198a:	f100 80b1 	bmi.w	8001af0 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198e:	0719      	lsls	r1, r3, #28
 8001990:	d50b      	bpl.n	80019aa <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001992:	495f      	ldr	r1, [pc, #380]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
 8001994:	6965      	ldr	r5, [r4, #20]
 8001996:	69c8      	ldr	r0, [r1, #28]
 8001998:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800199c:	4285      	cmp	r5, r0
 800199e:	d204      	bcs.n	80019aa <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019a0:	69ca      	ldr	r2, [r1, #28]
 80019a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019a6:	432a      	orrs	r2, r5
 80019a8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019aa:	06da      	lsls	r2, r3, #27
 80019ac:	d50b      	bpl.n	80019c6 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019ae:	4958      	ldr	r1, [pc, #352]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
 80019b0:	69a5      	ldr	r5, [r4, #24]
 80019b2:	69c8      	ldr	r0, [r1, #28]
 80019b4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80019b8:	4285      	cmp	r5, r0
 80019ba:	d204      	bcs.n	80019c6 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019bc:	69ca      	ldr	r2, [r1, #28]
 80019be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019c2:	432a      	orrs	r2, r5
 80019c4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019c6:	069b      	lsls	r3, r3, #26
 80019c8:	d50b      	bpl.n	80019e2 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019ca:	4a51      	ldr	r2, [pc, #324]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
 80019cc:	69e0      	ldr	r0, [r4, #28]
 80019ce:	6a11      	ldr	r1, [r2, #32]
 80019d0:	f001 0170 	and.w	r1, r1, #112	; 0x70
 80019d4:	4288      	cmp	r0, r1
 80019d6:	d204      	bcs.n	80019e2 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80019d8:	6a13      	ldr	r3, [r2, #32]
 80019da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019de:	4303      	orrs	r3, r0
 80019e0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019e2:	f7ff fed9 	bl	8001798 <HAL_RCC_GetSysClockFreq>
 80019e6:	494a      	ldr	r1, [pc, #296]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
 80019e8:	4a4a      	ldr	r2, [pc, #296]	; (8001b14 <HAL_RCC_ClockConfig+0x23c>)
 80019ea:	698b      	ldr	r3, [r1, #24]
 80019ec:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019f8:	698b      	ldr	r3, [r1, #24]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	4a45      	ldr	r2, [pc, #276]	; (8001b18 <HAL_RCC_ClockConfig+0x240>)
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	fa20 f303 	lsr.w	r3, r0, r3
 8001a0a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8001a10:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_ClockConfig+0x248>)
}
 8001a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	f7ff b926 	b.w	8000c68 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1c:	6813      	ldr	r3, [r2, #0]
 8001a1e:	f023 030f 	bic.w	r3, r3, #15
 8001a22:	430b      	orrs	r3, r1
 8001a24:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	6813      	ldr	r3, [r2, #0]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	428b      	cmp	r3, r1
 8001a2e:	f47f af58 	bne.w	80018e2 <HAL_RCC_ClockConfig+0xa>
 8001a32:	e760      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a34:	4936      	ldr	r1, [pc, #216]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
 8001a36:	6926      	ldr	r6, [r4, #16]
 8001a38:	6988      	ldr	r0, [r1, #24]
 8001a3a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001a3e:	4286      	cmp	r6, r0
 8001a40:	f67f af5d 	bls.w	80018fe <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a44:	698a      	ldr	r2, [r1, #24]
 8001a46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a4a:	4332      	orrs	r2, r6
 8001a4c:	618a      	str	r2, [r1, #24]
 8001a4e:	e756      	b.n	80018fe <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a50:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
 8001a52:	68a1      	ldr	r1, [r4, #8]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5e:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a60:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a62:	2a02      	cmp	r2, #2
 8001a64:	d11d      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a6a:	f43f af3a 	beq.w	80018e2 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a6e:	4e28      	ldr	r6, [pc, #160]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a74:	6933      	ldr	r3, [r6, #16]
 8001a76:	f023 0307 	bic.w	r3, r3, #7
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f953 	bl	8000d28 <HAL_GetTick>
 8001a82:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a84:	6933      	ldr	r3, [r6, #16]
 8001a86:	6862      	ldr	r2, [r4, #4]
 8001a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a8c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001a90:	f43f af6f 	beq.w	8001972 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff f948 	bl	8000d28 <HAL_GetTick>
 8001a98:	1bc0      	subs	r0, r0, r7
 8001a9a:	4540      	cmp	r0, r8
 8001a9c:	d9f2      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	e720      	b.n	80018e4 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa2:	2a03      	cmp	r2, #3
 8001aa4:	d102      	bne.n	8001aac <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aa6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001aaa:	e7de      	b.n	8001a6a <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001aac:	2a01      	cmp	r2, #1
 8001aae:	d102      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ab0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ab4:	e7d9      	b.n	8001a6a <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab6:	f013 0f04 	tst.w	r3, #4
 8001aba:	e7d6      	b.n	8001a6a <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001abc:	4914      	ldr	r1, [pc, #80]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
 8001abe:	68e6      	ldr	r6, [r4, #12]
 8001ac0:	6988      	ldr	r0, [r1, #24]
 8001ac2:	f000 000f 	and.w	r0, r0, #15
 8001ac6:	4286      	cmp	r6, r0
 8001ac8:	f4bf af57 	bcs.w	800197a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	698a      	ldr	r2, [r1, #24]
 8001ace:	f022 020f 	bic.w	r2, r2, #15
 8001ad2:	4332      	orrs	r2, r6
 8001ad4:	618a      	str	r2, [r1, #24]
 8001ad6:	e750      	b.n	800197a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad8:	680a      	ldr	r2, [r1, #0]
 8001ada:	f022 020f 	bic.w	r2, r2, #15
 8001ade:	432a      	orrs	r2, r5
 8001ae0:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	680a      	ldr	r2, [r1, #0]
 8001ae4:	f002 020f 	and.w	r2, r2, #15
 8001ae8:	42aa      	cmp	r2, r5
 8001aea:	f47f aefa 	bne.w	80018e2 <HAL_RCC_ClockConfig+0xa>
 8001aee:	e74b      	b.n	8001988 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <HAL_RCC_ClockConfig+0x238>)
 8001af2:	6925      	ldr	r5, [r4, #16]
 8001af4:	6988      	ldr	r0, [r1, #24]
 8001af6:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001afa:	4285      	cmp	r5, r0
 8001afc:	f4bf af47 	bcs.w	800198e <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b00:	698a      	ldr	r2, [r1, #24]
 8001b02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b06:	432a      	orrs	r2, r5
 8001b08:	618a      	str	r2, [r1, #24]
 8001b0a:	e740      	b.n	800198e <HAL_RCC_ClockConfig+0xb6>
 8001b0c:	52002000 	.word	0x52002000
 8001b10:	58024400 	.word	0x58024400
 8001b14:	08002aa0 	.word	0x08002aa0
 8001b18:	24000004 	.word	0x24000004
 8001b1c:	24000000 	.word	0x24000000
 8001b20:	2400000c 	.word	0x2400000c

08001b24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001b26:	4c3a      	ldr	r4, [pc, #232]	; (8001c10 <RCCEx_PLL2_Config+0xec>)
{
 8001b28:	4606      	mov	r6, r0
 8001b2a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001b2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d069      	beq.n	8001c0a <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b3c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3e:	f7ff f8f3 	bl	8000d28 <HAL_GetTick>
 8001b42:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	011a      	lsls	r2, r3, #4
 8001b48:	d44b      	bmi.n	8001be2 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001b4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b4c:	6832      	ldr	r2, [r6, #0]
 8001b4e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b52:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001b56:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b58:	68b3      	ldr	r3, [r6, #8]
 8001b5a:	68f2      	ldr	r2, [r6, #12]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	3a01      	subs	r2, #1
 8001b60:	025b      	lsls	r3, r3, #9
 8001b62:	0412      	lsls	r2, r2, #16
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	6872      	ldr	r2, [r6, #4]
 8001b6e:	3a01      	subs	r2, #1
 8001b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b74:	4313      	orrs	r3, r2
 8001b76:	6932      	ldr	r2, [r6, #16]
 8001b78:	3a01      	subs	r2, #1
 8001b7a:	0612      	lsls	r2, r2, #24
 8001b7c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001b80:	4313      	orrs	r3, r2
 8001b82:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001b84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b86:	6972      	ldr	r2, [r6, #20]
 8001b88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001b90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b92:	69b2      	ldr	r2, [r6, #24]
 8001b94:	f023 0320 	bic.w	r3, r3, #32
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001b9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b9e:	f023 0310 	bic.w	r3, r3, #16
 8001ba2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001ba4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ba6:	69f2      	ldr	r2, [r6, #28]
 8001ba8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bb0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bb4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001bb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bb8:	f043 0310 	orr.w	r3, r3, #16
 8001bbc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001bbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001bc0:	b9b5      	cbnz	r5, 8001bf0 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001bc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001bc6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001bc8:	4c11      	ldr	r4, [pc, #68]	; (8001c10 <RCCEx_PLL2_Config+0xec>)
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bd0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd2:	f7ff f8a9 	bl	8000d28 <HAL_GetTick>
 8001bd6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	d50f      	bpl.n	8001bfe <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8001bde:	2000      	movs	r0, #0
 8001be0:	e005      	b.n	8001bee <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001be2:	f7ff f8a1 	bl	8000d28 <HAL_GetTick>
 8001be6:	1bc0      	subs	r0, r0, r7
 8001be8:	2802      	cmp	r0, #2
 8001bea:	d9ab      	bls.n	8001b44 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8001bec:	2003      	movs	r0, #3
}
 8001bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001bf0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001bf2:	bf0c      	ite	eq
 8001bf4:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001bf8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001bfc:	e7e3      	b.n	8001bc6 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001bfe:	f7ff f893 	bl	8000d28 <HAL_GetTick>
 8001c02:	1b40      	subs	r0, r0, r5
 8001c04:	2802      	cmp	r0, #2
 8001c06:	d9e7      	bls.n	8001bd8 <RCCEx_PLL2_Config+0xb4>
 8001c08:	e7f0      	b.n	8001bec <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	e7ef      	b.n	8001bee <RCCEx_PLL2_Config+0xca>
 8001c0e:	bf00      	nop
 8001c10:	58024400 	.word	0x58024400

08001c14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001c16:	4c3a      	ldr	r4, [pc, #232]	; (8001d00 <RCCEx_PLL3_Config+0xec>)
{
 8001c18:	4606      	mov	r6, r0
 8001c1a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001c1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d069      	beq.n	8001cfa <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c2e:	f7ff f87b 	bl	8000d28 <HAL_GetTick>
 8001c32:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	009a      	lsls	r2, r3, #2
 8001c38:	d44b      	bmi.n	8001cd2 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001c3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c3c:	6832      	ldr	r2, [r6, #0]
 8001c3e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001c42:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001c46:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c48:	68b3      	ldr	r3, [r6, #8]
 8001c4a:	68f2      	ldr	r2, [r6, #12]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	3a01      	subs	r2, #1
 8001c50:	025b      	lsls	r3, r3, #9
 8001c52:	0412      	lsls	r2, r2, #16
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	6872      	ldr	r2, [r6, #4]
 8001c5e:	3a01      	subs	r2, #1
 8001c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c64:	4313      	orrs	r3, r2
 8001c66:	6932      	ldr	r2, [r6, #16]
 8001c68:	3a01      	subs	r2, #1
 8001c6a:	0612      	lsls	r2, r2, #24
 8001c6c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001c70:	4313      	orrs	r3, r2
 8001c72:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001c74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c76:	6972      	ldr	r2, [r6, #20]
 8001c78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001c80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c82:	69b2      	ldr	r2, [r6, #24]
 8001c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001c8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c92:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001c94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c96:	69f2      	ldr	r2, [r6, #28]
 8001c98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c9c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ca0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ca4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001ca6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001cae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001cb0:	b9b5      	cbnz	r5, 8001ce0 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001cb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001cb6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001cb8:	4c11      	ldr	r4, [pc, #68]	; (8001d00 <RCCEx_PLL3_Config+0xec>)
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc2:	f7ff f831 	bl	8000d28 <HAL_GetTick>
 8001cc6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	d50f      	bpl.n	8001cee <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8001cce:	2000      	movs	r0, #0
 8001cd0:	e005      	b.n	8001cde <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001cd2:	f7ff f829 	bl	8000d28 <HAL_GetTick>
 8001cd6:	1bc0      	subs	r0, r0, r7
 8001cd8:	2802      	cmp	r0, #2
 8001cda:	d9ab      	bls.n	8001c34 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8001cdc:	2003      	movs	r0, #3
}
 8001cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001ce0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001ce2:	bf0c      	ite	eq
 8001ce4:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001ce8:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001cec:	e7e3      	b.n	8001cb6 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001cee:	f7ff f81b 	bl	8000d28 <HAL_GetTick>
 8001cf2:	1b40      	subs	r0, r0, r5
 8001cf4:	2802      	cmp	r0, #2
 8001cf6:	d9e7      	bls.n	8001cc8 <RCCEx_PLL3_Config+0xb4>
 8001cf8:	e7f0      	b.n	8001cdc <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	e7ef      	b.n	8001cde <RCCEx_PLL3_Config+0xca>
 8001cfe:	bf00      	nop
 8001d00:	58024400 	.word	0x58024400

08001d04 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d08:	6806      	ldr	r6, [r0, #0]
{
 8001d0a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d0c:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8001d10:	d009      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001d12:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001d14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d18:	d02e      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001d1a:	d813      	bhi.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d1c:	b1f3      	cbz	r3, 8001d5c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8001d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d22:	d021      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d24:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001d26:	682b      	ldr	r3, [r5, #0]
 8001d28:	05dc      	lsls	r4, r3, #23
 8001d2a:	f140 80ea 	bpl.w	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001d2e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	f200 80e5 	bhi.w	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8001d36:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001d3a:	0024      	.short	0x0024
 8001d3c:	00dd002b 	.word	0x00dd002b
 8001d40:	00290029 	.word	0x00290029
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001d44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001d48:	d1ec      	bne.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001d4a:	4aa6      	ldr	r2, [pc, #664]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001d4c:	2600      	movs	r6, #0
 8001d4e:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8001d50:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001d52:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001d56:	430b      	orrs	r3, r1
 8001d58:	6513      	str	r3, [r2, #80]	; 0x50
 8001d5a:	e7e4      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d5c:	4aa1      	ldr	r2, [pc, #644]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001d5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001d66:	e7f0      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001d68:	2102      	movs	r1, #2
 8001d6a:	3004      	adds	r0, #4
 8001d6c:	f7ff feda 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001d70:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001d72:	2800      	cmp	r0, #0
 8001d74:	d1d7      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8001d76:	e7e8      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001d78:	2102      	movs	r1, #2
 8001d7a:	3024      	adds	r0, #36	; 0x24
 8001d7c:	f7ff ff4a 	bl	8001c14 <RCCEx_PLL3_Config>
 8001d80:	e7f6      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d82:	4a98      	ldr	r2, [pc, #608]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001d84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8a:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8001d8c:	4634      	mov	r4, r6
 8001d8e:	e004      	b.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001d90:	2100      	movs	r1, #0
 8001d92:	1d28      	adds	r0, r5, #4
 8001d94:	f7ff fec6 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001d98:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	f040 80b3 	bne.w	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x202>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001da0:	4a90      	ldr	r2, [pc, #576]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001da2:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8001da4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001da6:	f023 0307 	bic.w	r3, r3, #7
 8001daa:	430b      	orrs	r3, r1
 8001dac:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001dae:	682b      	ldr	r3, [r5, #0]
 8001db0:	0598      	lsls	r0, r3, #22
 8001db2:	d50d      	bpl.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001db4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001db6:	2b80      	cmp	r3, #128	; 0x80
 8001db8:	f000 80c2 	beq.w	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8001dbc:	f200 80a5 	bhi.w	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80b1 	beq.w	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	f000 80b4 	beq.w	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8001dcc:	2601      	movs	r6, #1
 8001dce:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001dd0:	682b      	ldr	r3, [r5, #0]
 8001dd2:	0559      	lsls	r1, r3, #21
 8001dd4:	d510      	bpl.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001dd6:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8001dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dde:	f000 80d4 	beq.w	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8001de2:	f200 80b5 	bhi.w	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80c3 	beq.w	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8001dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001df0:	f000 80c5 	beq.w	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8001df4:	2601      	movs	r6, #1
 8001df6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	051a      	lsls	r2, r3, #20
 8001dfc:	d510      	bpl.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001dfe:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8001e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e06:	f000 80e5 	beq.w	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8001e0a:	f200 80c6 	bhi.w	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80d4 	beq.w	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e18:	f000 80d6 	beq.w	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8001e1c:	2601      	movs	r6, #1
 8001e1e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001e20:	682b      	ldr	r3, [r5, #0]
 8001e22:	019b      	lsls	r3, r3, #6
 8001e24:	d50d      	bpl.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->QspiClockSelection)
 8001e26:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	f000 80ef 	beq.w	800200c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001e2e:	f200 80db 	bhi.w	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80db 	beq.w	8001fee <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	f000 80e1 	beq.w	8002000 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8001e3e:	2601      	movs	r6, #1
 8001e40:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001e42:	682b      	ldr	r3, [r5, #0]
 8001e44:	04df      	lsls	r7, r3, #19
 8001e46:	d50f      	bpl.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001e48:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e4e:	f000 8101 	beq.w	8002054 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8001e52:	f200 80e3 	bhi.w	800201c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80f0 	beq.w	800203c <HAL_RCCEx_PeriphCLKConfig+0x338>
 8001e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e60:	f000 80f2 	beq.w	8002048 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8001e64:	2601      	movs	r6, #1
 8001e66:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001e68:	682b      	ldr	r3, [r5, #0]
 8001e6a:	0498      	lsls	r0, r3, #18
 8001e6c:	d50f      	bpl.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001e6e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e74:	f000 810e 	beq.w	8002094 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8001e78:	f200 80f4 	bhi.w	8002064 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80fa 	beq.w	8002076 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8001e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e86:	f000 80ff 	beq.w	8002088 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8001e8a:	2601      	movs	r6, #1
 8001e8c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001e8e:	682b      	ldr	r3, [r5, #0]
 8001e90:	0459      	lsls	r1, r3, #17
 8001e92:	d510      	bpl.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001e94:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8001e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e9c:	f000 811b 	beq.w	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8001ea0:	f200 8100 	bhi.w	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8106 	beq.w	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8001eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001eae:	f000 810c 	beq.w	80020ca <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8001eb2:	2601      	movs	r6, #1
 8001eb4:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001eb6:	682b      	ldr	r3, [r5, #0]
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	d50d      	bpl.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    switch(PeriphClkInit->FdcanClockSelection)
 8001ebc:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8001ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ec2:	f000 8110 	beq.w	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8001ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eca:	f000 811a 	beq.w	8002102 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 810e 	beq.w	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8001ed4:	2601      	movs	r6, #1
 8001ed6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001ed8:	682b      	ldr	r3, [r5, #0]
 8001eda:	01db      	lsls	r3, r3, #7
 8001edc:	f140 8127 	bpl.w	800212e <HAL_RCCEx_PeriphCLKConfig+0x42a>
    switch(PeriphClkInit->FmcClockSelection)
 8001ee0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	f200 8167 	bhi.w	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8001ee8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001eec:	01130118 	.word	0x01130118
 8001ef0:	0118015f 	.word	0x0118015f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001efa:	f7ff fe8b 	bl	8001c14 <RCCEx_PLL3_Config>
 8001efe:	e74b      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001f00:	2601      	movs	r6, #1
 8001f02:	4634      	mov	r4, r6
 8001f04:	e753      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8001f06:	4626      	mov	r6, r4
 8001f08:	e751      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8001f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f12:	f47f af5b 	bne.w	8001dcc <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if(ret == HAL_OK)
 8001f16:	b9cc      	cbnz	r4, 8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001f18:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001f1a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8001f1c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001f1e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001f22:	430b      	orrs	r3, r1
 8001f24:	6513      	str	r3, [r2, #80]	; 0x50
 8001f26:	e753      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f28:	4a2e      	ldr	r2, [pc, #184]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001f2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001f32:	e7f0      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001f34:	2100      	movs	r1, #0
 8001f36:	1d28      	adds	r0, r5, #4
 8001f38:	f7ff fdf4 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f3c:	4604      	mov	r4, r0
      break;
 8001f3e:	e7ea      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f40:	2100      	movs	r1, #0
 8001f42:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001f46:	f7ff fe65 	bl	8001c14 <RCCEx_PLL3_Config>
 8001f4a:	e7f7      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8001f4c:	4626      	mov	r6, r4
 8001f4e:	e73f      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001f50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001f54:	d003      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8001f56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f5a:	f47f af4b 	bne.w	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if(ret == HAL_OK)
 8001f5e:	b9d4      	cbnz	r4, 8001f96 <HAL_RCCEx_PeriphCLKConfig+0x292>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001f60:	4a20      	ldr	r2, [pc, #128]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001f62:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8001f66:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001f68:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f70:	e742      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f72:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001f74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001f7c:	e7ef      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001f7e:	2100      	movs	r1, #0
 8001f80:	1d28      	adds	r0, r5, #4
 8001f82:	f7ff fdcf 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f86:	4604      	mov	r4, r0
      break;
 8001f88:	e7e9      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001f90:	f7ff fe40 	bl	8001c14 <RCCEx_PLL3_Config>
 8001f94:	e7f7      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8001f96:	4626      	mov	r6, r4
 8001f98:	e72e      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001f9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f9e:	d003      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8001fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fa4:	f47f af3a 	bne.w	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    if(ret == HAL_OK)
 8001fa8:	b9d4      	cbnz	r4, 8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001faa:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001fac:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8001fb0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001fb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fba:	e731      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fbc:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001fbe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001fc6:	e7ef      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	1d28      	adds	r0, r5, #4
 8001fcc:	f7ff fdaa 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001fd0:	4604      	mov	r4, r0
      break;
 8001fd2:	e7e9      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001fda:	f7ff fe1b 	bl	8001c14 <RCCEx_PLL3_Config>
 8001fde:	e7f7      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8001fe0:	4626      	mov	r6, r4
 8001fe2:	e71d      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8001fe4:	58024400 	.word	0x58024400
    switch(PeriphClkInit->QspiClockSelection)
 8001fe8:	2b30      	cmp	r3, #48	; 0x30
 8001fea:	f47f af28 	bne.w	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 8001fee:	b99c      	cbnz	r4, 8002018 <HAL_RCCEx_PeriphCLKConfig+0x314>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001ff0:	4a9d      	ldr	r2, [pc, #628]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8001ff2:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001ff4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001ff6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ffe:	e720      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002000:	4a99      	ldr	r2, [pc, #612]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002002:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002008:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800200a:	e7f0      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800200c:	2102      	movs	r1, #2
 800200e:	1d28      	adds	r0, r5, #4
 8002010:	f7ff fd88 	bl	8001b24 <RCCEx_PLL2_Config>
 8002014:	4604      	mov	r4, r0
      break;
 8002016:	e7ea      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8002018:	4626      	mov	r6, r4
 800201a:	e712      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 800201c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002020:	d003      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002026:	f47f af1d 	bne.w	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 800202a:	b9cc      	cbnz	r4, 8002060 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800202c:	4a8e      	ldr	r2, [pc, #568]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800202e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8002030:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002036:	430b      	orrs	r3, r1
 8002038:	6513      	str	r3, [r2, #80]	; 0x50
 800203a:	e715      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800203c:	4a8a      	ldr	r2, [pc, #552]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800203e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002044:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002046:	e7f0      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002048:	2100      	movs	r1, #0
 800204a:	1d28      	adds	r0, r5, #4
 800204c:	f7ff fd6a 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002050:	4604      	mov	r4, r0
      break;
 8002052:	e7ea      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002054:	2100      	movs	r1, #0
 8002056:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800205a:	f7ff fddb 	bl	8001c14 <RCCEx_PLL3_Config>
 800205e:	e7f7      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002060:	4626      	mov	r6, r4
 8002062:	e701      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002064:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002068:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800206c:	d003      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800206e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002072:	f47f af0a 	bne.w	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x186>
    if(ret == HAL_OK)
 8002076:	b99c      	cbnz	r4, 80020a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002078:	4a7b      	ldr	r2, [pc, #492]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800207a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800207c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800207e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002082:	430b      	orrs	r3, r1
 8002084:	6513      	str	r3, [r2, #80]	; 0x50
 8002086:	e702      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002088:	2101      	movs	r1, #1
 800208a:	1d28      	adds	r0, r5, #4
 800208c:	f7ff fd4a 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002090:	4604      	mov	r4, r0
      break;
 8002092:	e7f0      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x372>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002094:	2101      	movs	r1, #1
 8002096:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800209a:	f7ff fdbb 	bl	8001c14 <RCCEx_PLL3_Config>
 800209e:	e7f7      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80020a0:	4626      	mov	r6, r4
 80020a2:	e6f4      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi6ClockSelection)
 80020a4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020a8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80020ac:	d003      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 80020ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80020b2:	f47f aefe 	bne.w	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    if(ret == HAL_OK)
 80020b6:	b9a4      	cbnz	r4, 80020e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80020b8:	4a6b      	ldr	r2, [pc, #428]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80020ba:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 80020be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80020c0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80020c4:	430b      	orrs	r3, r1
 80020c6:	6593      	str	r3, [r2, #88]	; 0x58
 80020c8:	e6f5      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80020ca:	2101      	movs	r1, #1
 80020cc:	1d28      	adds	r0, r5, #4
 80020ce:	f7ff fd29 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80020d2:	4604      	mov	r4, r0
      break;
 80020d4:	e7ef      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80020d6:	2101      	movs	r1, #1
 80020d8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80020dc:	f7ff fd9a 	bl	8001c14 <RCCEx_PLL3_Config>
 80020e0:	e7f7      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80020e2:	4626      	mov	r6, r4
 80020e4:	e6e7      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020e6:	4a60      	ldr	r2, [pc, #384]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80020e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80020ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ee:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80020f0:	b96c      	cbnz	r4, 800210e <HAL_RCCEx_PeriphCLKConfig+0x40a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020f2:	4a5d      	ldr	r2, [pc, #372]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80020f4:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 80020f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80020f8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80020fc:	430b      	orrs	r3, r1
 80020fe:	6513      	str	r3, [r2, #80]	; 0x50
 8002100:	e6ea      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002102:	2101      	movs	r1, #1
 8002104:	1d28      	adds	r0, r5, #4
 8002106:	f7ff fd0d 	bl	8001b24 <RCCEx_PLL2_Config>
 800210a:	4604      	mov	r4, r0
      break;
 800210c:	e7f0      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800210e:	4626      	mov	r6, r4
 8002110:	e6e2      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002112:	4a55      	ldr	r2, [pc, #340]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002114:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800211c:	2c00      	cmp	r4, #0
 800211e:	d14d      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002120:	4a51      	ldr	r2, [pc, #324]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002122:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002124:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	430b      	orrs	r3, r1
 800212c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800212e:	682b      	ldr	r3, [r5, #0]
 8002130:	025f      	lsls	r7, r3, #9
 8002132:	d54d      	bpl.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002134:	4f4d      	ldr	r7, [pc, #308]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800213e:	f7fe fdf3 	bl	8000d28 <HAL_GetTick>
 8002142:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	05d8      	lsls	r0, r3, #23
 8002148:	d53a      	bpl.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if(ret == HAL_OK)
 800214a:	2c00      	cmp	r4, #0
 800214c:	d16c      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x524>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800214e:	4b46      	ldr	r3, [pc, #280]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002150:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8002154:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002156:	4042      	eors	r2, r0
 8002158:	f412 7f40 	tst.w	r2, #768	; 0x300
 800215c:	d00b      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x472>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800215e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8002160:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002162:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002166:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800216a:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800216c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800216e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002172:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8002174:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002176:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800217a:	d040      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800217c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8002180:	4939      	ldr	r1, [pc, #228]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002182:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002186:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800218a:	d149      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 800218c:	6908      	ldr	r0, [r1, #16]
 800218e:	4a38      	ldr	r2, [pc, #224]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8002190:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8002194:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8002198:	4302      	orrs	r2, r0
 800219a:	610a      	str	r2, [r1, #16]
 800219c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a0:	4a31      	ldr	r2, [pc, #196]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80021a2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80021a4:	430b      	orrs	r3, r1
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	e012      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80021aa:	2102      	movs	r1, #2
 80021ac:	1d28      	adds	r0, r5, #4
 80021ae:	f7ff fcb9 	bl	8001b24 <RCCEx_PLL2_Config>
 80021b2:	4604      	mov	r4, r0
      break;
 80021b4:	e7b2      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->FmcClockSelection)
 80021b6:	2601      	movs	r6, #1
 80021b8:	4634      	mov	r4, r6
 80021ba:	e7b8      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80021bc:	4626      	mov	r6, r4
 80021be:	e7b6      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c0:	f7fe fdb2 	bl	8000d28 <HAL_GetTick>
 80021c4:	eba0 0008 	sub.w	r0, r0, r8
 80021c8:	2864      	cmp	r0, #100	; 0x64
 80021ca:	d9bb      	bls.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x440>
        ret = HAL_TIMEOUT;
 80021cc:	2603      	movs	r6, #3
 80021ce:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80021d0:	682b      	ldr	r3, [r5, #0]
 80021d2:	07da      	lsls	r2, r3, #31
 80021d4:	d508      	bpl.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    switch(PeriphClkInit->Usart16ClockSelection)
 80021d6:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d03c      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x552>
 80021dc:	d826      	bhi.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80021de:	b35b      	cbz	r3, 8002238 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d032      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x546>
 80021e4:	2601      	movs	r6, #1
 80021e6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80021e8:	682b      	ldr	r3, [r5, #0]
 80021ea:	079b      	lsls	r3, r3, #30
 80021ec:	d54f      	bpl.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80021ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d862      	bhi.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 80021f4:	e8df f003 	tbb	[pc, r3]
 80021f8:	435b3e43 	.word	0x435b3e43
 80021fc:	4343      	.short	0x4343
        tickstart = HAL_GetTick();
 80021fe:	f7fe fd93 	bl	8000d28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002202:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>
        tickstart = HAL_GetTick();
 8002206:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800220c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8002210:	0799      	lsls	r1, r3, #30
 8002212:	d4b3      	bmi.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x478>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002214:	f7fe fd88 	bl	8000d28 <HAL_GetTick>
 8002218:	1bc0      	subs	r0, r0, r7
 800221a:	4548      	cmp	r0, r9
 800221c:	d9f6      	bls.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800221e:	e7d5      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002220:	690a      	ldr	r2, [r1, #16]
 8002222:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002226:	e7b8      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8002228:	4626      	mov	r6, r4
 800222a:	e7d1      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->Usart16ClockSelection)
 800222c:	f023 0208 	bic.w	r2, r3, #8
 8002230:	2a20      	cmp	r2, #32
 8002232:	d001      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002234:	2b18      	cmp	r3, #24
 8002236:	d1d5      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if(ret == HAL_OK)
 8002238:	b99c      	cbnz	r4, 8002262 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800223c:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 800223e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002240:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002244:	430b      	orrs	r3, r1
 8002246:	6553      	str	r3, [r2, #84]	; 0x54
 8002248:	e7ce      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800224a:	2101      	movs	r1, #1
 800224c:	1d28      	adds	r0, r5, #4
 800224e:	f7ff fc69 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002252:	4604      	mov	r4, r0
      break;
 8002254:	e7f0      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x534>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002256:	2101      	movs	r1, #1
 8002258:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800225c:	f7ff fcda 	bl	8001c14 <RCCEx_PLL3_Config>
 8002260:	e7f7      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8002262:	4626      	mov	r6, r4
 8002264:	e7c0      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002266:	bf00      	nop
 8002268:	58024400 	.word	0x58024400
 800226c:	58024800 	.word	0x58024800
 8002270:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002274:	2101      	movs	r1, #1
 8002276:	1d28      	adds	r0, r5, #4
 8002278:	f7ff fc54 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800227c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800227e:	b9fc      	cbnz	r4, 80022c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002280:	4aa6      	ldr	r2, [pc, #664]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002282:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8002284:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002286:	f023 0307 	bic.w	r3, r3, #7
 800228a:	430b      	orrs	r3, r1
 800228c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800228e:	682b      	ldr	r3, [r5, #0]
 8002290:	075f      	lsls	r7, r3, #29
 8002292:	d527      	bpl.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002294:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002298:	2b05      	cmp	r3, #5
 800229a:	f200 8139 	bhi.w	8002510 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800229e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80022a2:	0016      	.short	0x0016
 80022a4:	01310011 	.word	0x01310011
 80022a8:	00160016 	.word	0x00160016
 80022ac:	0016      	.short	0x0016
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80022ae:	2101      	movs	r1, #1
 80022b0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80022b4:	f7ff fcae 	bl	8001c14 <RCCEx_PLL3_Config>
 80022b8:	e7e0      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x578>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80022ba:	2601      	movs	r6, #1
 80022bc:	4634      	mov	r4, r6
 80022be:	e7e6      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80022c0:	4626      	mov	r6, r4
 80022c2:	e7e4      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x58a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80022c4:	2101      	movs	r1, #1
 80022c6:	1d28      	adds	r0, r5, #4
 80022c8:	f7ff fc2c 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80022cc:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80022ce:	2c00      	cmp	r4, #0
 80022d0:	f040 8121 	bne.w	8002516 <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022d4:	4a91      	ldr	r2, [pc, #580]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80022d6:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 80022da:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80022dc:	f023 0307 	bic.w	r3, r3, #7
 80022e0:	430b      	orrs	r3, r1
 80022e2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	0698      	lsls	r0, r3, #26
 80022e8:	d510      	bpl.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80022ea:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80022ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022f2:	f000 812e 	beq.w	8002552 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80022f6:	f200 8113 	bhi.w	8002520 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8119 	beq.w	8002532 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8002300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002304:	f000 811f 	beq.w	8002546 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002308:	2601      	movs	r6, #1
 800230a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800230c:	682b      	ldr	r3, [r5, #0]
 800230e:	0659      	lsls	r1, r3, #25
 8002310:	d510      	bpl.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002312:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800231a:	f000 813b 	beq.w	8002594 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800231e:	f200 8120 	bhi.w	8002562 <HAL_RCCEx_PeriphCLKConfig+0x85e>
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8126 	beq.w	8002574 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8002328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232c:	f000 812c 	beq.w	8002588 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8002330:	2601      	movs	r6, #1
 8002332:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002334:	682b      	ldr	r3, [r5, #0]
 8002336:	061a      	lsls	r2, r3, #24
 8002338:	d510      	bpl.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x658>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800233a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800233e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002342:	f000 8148 	beq.w	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8002346:	f200 812d 	bhi.w	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8133 	beq.w	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8002350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002354:	f000 8139 	beq.w	80025ca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8002358:	2601      	movs	r6, #1
 800235a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800235c:	682b      	ldr	r3, [r5, #0]
 800235e:	071b      	lsls	r3, r3, #28
 8002360:	d514      	bpl.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x688>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002362:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8002366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236a:	d107      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x678>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800236c:	2102      	movs	r1, #2
 800236e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002372:	f7ff fc4f 	bl	8001c14 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8002376:	2800      	cmp	r0, #0
 8002378:	bf18      	it	ne
 800237a:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800237c:	4a67      	ldr	r2, [pc, #412]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800237e:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8002382:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002384:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002388:	430b      	orrs	r3, r1
 800238a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	06df      	lsls	r7, r3, #27
 8002390:	d514      	bpl.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002392:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239a:	d107      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800239c:	2102      	movs	r1, #2
 800239e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80023a2:	f7ff fc37 	bl	8001c14 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80023a6:	2800      	cmp	r0, #0
 80023a8:	bf18      	it	ne
 80023aa:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023ac:	4a5b      	ldr	r2, [pc, #364]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80023ae:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 80023b2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80023b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b8:	430b      	orrs	r3, r1
 80023ba:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	0318      	lsls	r0, r3, #12
 80023c0:	d51a      	bpl.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->AdcClockSelection)
 80023c2:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80023c6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80023ca:	f000 810c 	beq.w	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80023ce:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80023d2:	d006      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80023d4:	2900      	cmp	r1, #0
 80023d6:	f040 810c 	bne.w	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023da:	1d28      	adds	r0, r5, #4
 80023dc:	f7ff fba2 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80023e0:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80023e2:	2c00      	cmp	r4, #0
 80023e4:	f040 8108 	bne.w	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023e8:	4a4c      	ldr	r2, [pc, #304]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80023ea:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80023ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80023f0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80023f4:	430b      	orrs	r3, r1
 80023f6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023f8:	682b      	ldr	r3, [r5, #0]
 80023fa:	0359      	lsls	r1, r3, #13
 80023fc:	d51c      	bpl.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x734>
    switch(PeriphClkInit->UsbClockSelection)
 80023fe:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8002402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002406:	f000 80f9 	beq.w	80025fc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800240a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800240e:	d008      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8002410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002414:	f040 80f9 	bne.w	800260a <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002418:	4a40      	ldr	r2, [pc, #256]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800241a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800241c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002420:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002422:	2c00      	cmp	r4, #0
 8002424:	f040 80f4 	bne.w	8002610 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002428:	4a3c      	ldr	r2, [pc, #240]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800242a:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 800242e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002430:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002434:	430b      	orrs	r3, r1
 8002436:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	03da      	lsls	r2, r3, #15
 800243c:	d509      	bpl.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->SdmmcClockSelection)
 800243e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80e7 	beq.w	8002614 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8002446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244a:	f000 80f1 	beq.w	8002630 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 800244e:	2601      	movs	r6, #1
 8002450:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002452:	682b      	ldr	r3, [r5, #0]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	d507      	bpl.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x764>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002458:	2102      	movs	r1, #2
 800245a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800245e:	f7ff fbd9 	bl	8001c14 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8002462:	2800      	cmp	r0, #0
 8002464:	bf18      	it	ne
 8002466:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	039f      	lsls	r7, r3, #14
 800246c:	d50a      	bpl.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x780>
    switch(PeriphClkInit->RngClockSelection)
 800246e:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8002470:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002474:	f000 80f2 	beq.w	800265c <HAL_RCCEx_PeriphCLKConfig+0x958>
 8002478:	f200 80e2 	bhi.w	8002640 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800247c:	2900      	cmp	r1, #0
 800247e:	f000 80e5 	beq.w	800264c <HAL_RCCEx_PeriphCLKConfig+0x948>
 8002482:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002484:	02dc      	lsls	r4, r3, #11
 8002486:	d506      	bpl.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x792>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002488:	4924      	ldr	r1, [pc, #144]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800248a:	6f28      	ldr	r0, [r5, #112]	; 0x70
 800248c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800248e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002492:	4302      	orrs	r2, r0
 8002494:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002496:	00d8      	lsls	r0, r3, #3
 8002498:	d507      	bpl.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800249a:	4920      	ldr	r1, [pc, #128]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800249c:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 80024a0:	690a      	ldr	r2, [r1, #16]
 80024a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024a6:	4302      	orrs	r2, r0
 80024a8:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024aa:	0299      	lsls	r1, r3, #10
 80024ac:	d506      	bpl.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024ae:	491b      	ldr	r1, [pc, #108]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80024b0:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80024b2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80024b4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80024b8:	4302      	orrs	r2, r0
 80024ba:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80024bc:	005a      	lsls	r2, r3, #1
 80024be:	d509      	bpl.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024c0:	4a16      	ldr	r2, [pc, #88]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80024c2:	6911      	ldr	r1, [r2, #16]
 80024c4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80024c8:	6111      	str	r1, [r2, #16]
 80024ca:	6911      	ldr	r1, [r2, #16]
 80024cc:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 80024d0:	4301      	orrs	r1, r0
 80024d2:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	da06      	bge.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80024d8:	4910      	ldr	r1, [pc, #64]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80024da:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80024dc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80024de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024e2:	4302      	orrs	r2, r0
 80024e4:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	d507      	bpl.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80024ec:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 80024f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80024f2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80024f6:	430b      	orrs	r3, r1
 80024f8:	6553      	str	r3, [r2, #84]	; 0x54
}
 80024fa:	1e30      	subs	r0, r6, #0
 80024fc:	bf18      	it	ne
 80024fe:	2001      	movne	r0, #1
 8002500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002504:	2101      	movs	r1, #1
 8002506:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800250a:	f7ff fb83 	bl	8001c14 <RCCEx_PLL3_Config>
 800250e:	e6dd      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002510:	2601      	movs	r6, #1
 8002512:	4634      	mov	r4, r6
 8002514:	e6e6      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8002516:	4626      	mov	r6, r4
 8002518:	e6e4      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800251a:	bf00      	nop
 800251c:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002520:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002524:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002528:	d003      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800252a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800252e:	f47f aeeb 	bne.w	8002308 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(ret == HAL_OK)
 8002532:	b9a4      	cbnz	r4, 800255e <HAL_RCCEx_PeriphCLKConfig+0x85a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002534:	4a4d      	ldr	r2, [pc, #308]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002536:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800253a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800253c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002540:	430b      	orrs	r3, r1
 8002542:	6553      	str	r3, [r2, #84]	; 0x54
 8002544:	e6e2      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x608>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002546:	2100      	movs	r1, #0
 8002548:	1d28      	adds	r0, r5, #4
 800254a:	f7ff faeb 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800254e:	4604      	mov	r4, r0
      break;
 8002550:	e7ef      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002552:	2102      	movs	r1, #2
 8002554:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002558:	f7ff fb5c 	bl	8001c14 <RCCEx_PLL3_Config>
 800255c:	e7f7      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x84a>
 800255e:	4626      	mov	r6, r4
 8002560:	e6d4      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002562:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002566:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800256a:	d003      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x870>
 800256c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002570:	f47f aede 	bne.w	8002330 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    if(ret == HAL_OK)
 8002574:	b9a4      	cbnz	r4, 80025a0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002576:	4a3d      	ldr	r2, [pc, #244]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002578:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800257c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800257e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002582:	430b      	orrs	r3, r1
 8002584:	6593      	str	r3, [r2, #88]	; 0x58
 8002586:	e6d5      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x630>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002588:	2100      	movs	r1, #0
 800258a:	1d28      	adds	r0, r5, #4
 800258c:	f7ff faca 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002590:	4604      	mov	r4, r0
      break;
 8002592:	e7ef      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002594:	2102      	movs	r1, #2
 8002596:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800259a:	f7ff fb3b 	bl	8001c14 <RCCEx_PLL3_Config>
 800259e:	e7f7      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 80025a0:	4626      	mov	r6, r4
 80025a2:	e6c7      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80025a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025a8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80025ac:	d003      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 80025ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80025b2:	f47f aed1 	bne.w	8002358 <HAL_RCCEx_PeriphCLKConfig+0x654>
    if(ret == HAL_OK)
 80025b6:	b9a4      	cbnz	r4, 80025e2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80025b8:	4a2c      	ldr	r2, [pc, #176]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80025ba:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 80025be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80025c0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6593      	str	r3, [r2, #88]	; 0x58
 80025c8:	e6c8      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025ca:	2100      	movs	r1, #0
 80025cc:	1d28      	adds	r0, r5, #4
 80025ce:	f7ff faa9 	bl	8001b24 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025d2:	4604      	mov	r4, r0
      break;
 80025d4:	e7ef      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025d6:	2102      	movs	r1, #2
 80025d8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80025dc:	f7ff fb1a 	bl	8001c14 <RCCEx_PLL3_Config>
 80025e0:	e7f7      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 80025e2:	4626      	mov	r6, r4
 80025e4:	e6ba      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025e6:	2102      	movs	r1, #2
 80025e8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80025ec:	f7ff fb12 	bl	8001c14 <RCCEx_PLL3_Config>
 80025f0:	e6f6      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
    switch(PeriphClkInit->AdcClockSelection)
 80025f2:	2601      	movs	r6, #1
 80025f4:	4634      	mov	r4, r6
 80025f6:	e6ff      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80025f8:	4626      	mov	r6, r4
 80025fa:	e6fd      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80025fc:	2101      	movs	r1, #1
 80025fe:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002602:	f7ff fb07 	bl	8001c14 <RCCEx_PLL3_Config>
 8002606:	4604      	mov	r4, r0
      break;
 8002608:	e70b      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x71e>
    switch(PeriphClkInit->UsbClockSelection)
 800260a:	2601      	movs	r6, #1
 800260c:	4634      	mov	r4, r6
 800260e:	e713      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8002610:	4626      	mov	r6, r4
 8002612:	e711      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002614:	4a15      	ldr	r2, [pc, #84]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002616:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800261e:	b96c      	cbnz	r4, 800263c <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002620:	4a12      	ldr	r2, [pc, #72]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002622:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8002624:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262a:	430b      	orrs	r3, r1
 800262c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262e:	e710      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002630:	2102      	movs	r1, #2
 8002632:	1d28      	adds	r0, r5, #4
 8002634:	f7ff fa76 	bl	8001b24 <RCCEx_PLL2_Config>
 8002638:	4604      	mov	r4, r0
      break;
 800263a:	e7f0      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800263c:	4626      	mov	r6, r4
 800263e:	e708      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->RngClockSelection)
 8002640:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002644:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002648:	f47f af1b 	bne.w	8002482 <HAL_RCCEx_PeriphCLKConfig+0x77e>
    if(ret == HAL_OK)
 800264c:	b964      	cbnz	r4, 8002668 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800264e:	4807      	ldr	r0, [pc, #28]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002650:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002652:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002656:	430a      	orrs	r2, r1
 8002658:	6542      	str	r2, [r0, #84]	; 0x54
 800265a:	e713      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x780>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800265c:	4803      	ldr	r0, [pc, #12]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800265e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002660:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002664:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8002666:	e7f1      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x948>
 8002668:	4626      	mov	r6, r4
 800266a:	e70b      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x780>
 800266c:	58024400 	.word	0x58024400

08002670 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002672:	3b01      	subs	r3, #1
 8002674:	d00f      	beq.n	8002696 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002676:	6902      	ldr	r2, [r0, #16]
 8002678:	2a00      	cmp	r2, #0
 800267a:	dafa      	bge.n	8002672 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800267c:	6903      	ldr	r3, [r0, #16]
 800267e:	4a07      	ldr	r2, [pc, #28]	; (800269c <USB_CoreReset+0x2c>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002686:	3a01      	subs	r2, #1
 8002688:	d005      	beq.n	8002696 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800268a:	6903      	ldr	r3, [r0, #16]
 800268c:	f013 0301 	ands.w	r3, r3, #1
 8002690:	d1f9      	bne.n	8002686 <USB_CoreReset+0x16>

  return HAL_OK;
 8002692:	4618      	mov	r0, r3
 8002694:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002696:	2003      	movs	r0, #3
}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	00030d41 	.word	0x00030d41

080026a0 <USB_CoreInit>:
{
 80026a0:	b084      	sub	sp, #16
 80026a2:	b538      	push	{r3, r4, r5, lr}
 80026a4:	ad05      	add	r5, sp, #20
 80026a6:	4604      	mov	r4, r0
 80026a8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80026ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d12f      	bne.n	8002712 <USB_CoreInit+0x72>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80026b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b8:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80026ba:	68c3      	ldr	r3, [r0, #12]
 80026bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80026c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c4:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80026c6:	68c3      	ldr	r3, [r0, #12]
 80026c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80026cc:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80026ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d103      	bne.n	80026dc <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80026d4:	68c3      	ldr	r3, [r0, #12]
 80026d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026da:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff ffc7 	bl	8002670 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80026e2:	9b08      	ldr	r3, [sp, #32]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d110      	bne.n	800270a <USB_CoreInit+0x6a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80026e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80026ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026f0:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f8:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80026fa:	68a3      	ldr	r3, [r4, #8]
 80026fc:	f043 0306 	orr.w	r3, r3, #6
 8002700:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002702:	68a3      	ldr	r3, [r4, #8]
 8002704:	f043 0320 	orr.w	r3, r3, #32
 8002708:	60a3      	str	r3, [r4, #8]
}
 800270a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800270e:	b004      	add	sp, #16
 8002710:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002712:	68c3      	ldr	r3, [r0, #12]
 8002714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002718:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800271a:	f7ff ffa9 	bl	8002670 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800271e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002720:	b923      	cbnz	r3, 800272c <USB_CoreInit+0x8c>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002722:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002728:	63a3      	str	r3, [r4, #56]	; 0x38
 800272a:	e7da      	b.n	80026e2 <USB_CoreInit+0x42>
 800272c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800272e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002732:	e7f9      	b.n	8002728 <USB_CoreInit+0x88>

08002734 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002734:	6883      	ldr	r3, [r0, #8]
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	6083      	str	r3, [r0, #8]
}
 800273c:	2000      	movs	r0, #0
 800273e:	4770      	bx	lr

08002740 <USB_SetCurrentMode>:
{
 8002740:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002742:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002744:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002746:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800274a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800274c:	d108      	bne.n	8002760 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800274e:	68c3      	ldr	r3, [r0, #12]
 8002750:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002754:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002756:	2032      	movs	r0, #50	; 0x32
 8002758:	f7fe faec 	bl	8000d34 <HAL_Delay>
  return HAL_OK;
 800275c:	2000      	movs	r0, #0
}
 800275e:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002760:	b919      	cbnz	r1, 800276a <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002762:	68c3      	ldr	r3, [r0, #12]
 8002764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002768:	e7f4      	b.n	8002754 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800276a:	2001      	movs	r0, #1
 800276c:	e7f7      	b.n	800275e <USB_SetCurrentMode+0x1e>
	...

08002770 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002770:	0189      	lsls	r1, r1, #6
 8002772:	4a07      	ldr	r2, [pc, #28]	; (8002790 <USB_FlushTxFifo+0x20>)
 8002774:	f041 0120 	orr.w	r1, r1, #32
 8002778:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800277a:	3a01      	subs	r2, #1
 800277c:	d005      	beq.n	800278a <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800277e:	6903      	ldr	r3, [r0, #16]
 8002780:	f013 0320 	ands.w	r3, r3, #32
 8002784:	d1f9      	bne.n	800277a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002786:	4618      	mov	r0, r3
 8002788:	4770      	bx	lr
      return HAL_TIMEOUT;
 800278a:	2003      	movs	r0, #3
}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	00030d41 	.word	0x00030d41

08002794 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002794:	2310      	movs	r3, #16
 8002796:	4a06      	ldr	r2, [pc, #24]	; (80027b0 <USB_FlushRxFifo+0x1c>)
 8002798:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800279a:	3a01      	subs	r2, #1
 800279c:	d005      	beq.n	80027aa <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800279e:	6903      	ldr	r3, [r0, #16]
 80027a0:	f013 0310 	ands.w	r3, r3, #16
 80027a4:	d1f9      	bne.n	800279a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80027a6:	4618      	mov	r0, r3
 80027a8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80027aa:	2003      	movs	r0, #3
}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	00030d41 	.word	0x00030d41

080027b4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80027b4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80027b8:	4319      	orrs	r1, r3
 80027ba:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80027be:	2000      	movs	r0, #0
 80027c0:	4770      	bx	lr
	...

080027c4 <USB_DevInit>:
{
 80027c4:	b084      	sub	sp, #16
 80027c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027ca:	4604      	mov	r4, r0
 80027cc:	a809      	add	r0, sp, #36	; 0x24
 80027ce:	460e      	mov	r6, r1
 80027d0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80027d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80027d6:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 80027d8:	4619      	mov	r1, r3
 80027da:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80027de:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80027e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80027e4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80027e6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80027e8:	d1f7      	bne.n	80027da <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80027ea:	f504 6700 	add.w	r7, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 80027ee:	2d00      	cmp	r5, #0
 80027f0:	d16c      	bne.n	80028cc <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80027fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002800:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002808:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002810:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002818:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800281c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002822:	2b01      	cmp	r3, #1
 8002824:	d159      	bne.n	80028da <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 8002826:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002828:	2900      	cmp	r1, #0
 800282a:	d154      	bne.n	80028d6 <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800282c:	4620      	mov	r0, r4
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800282e:	f64f 387f 	movw	r8, #64383	; 0xfb7f
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002832:	f7ff ffbf 	bl	80027b4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002836:	2110      	movs	r1, #16
 8002838:	4620      	mov	r0, r4
 800283a:	f7ff ff99 	bl	8002770 <USB_FlushTxFifo>
 800283e:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002840:	4620      	mov	r0, r4
 8002842:	f7ff ffa7 	bl	8002794 <USB_FlushRxFifo>
 8002846:	4308      	orrs	r0, r1
  USBx_DEVICE->DIEPMSK = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800284e:	b2c0      	uxtb	r0, r0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002850:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8002854:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002856:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    ret = HAL_ERROR;
 800285a:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 800285c:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800285e:	617b      	str	r3, [r7, #20]
    ret = HAL_ERROR;
 8002860:	bf18      	it	ne
 8002862:	2001      	movne	r0, #1
  USBx_DEVICE->DAINTMSK = 0U;
 8002864:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002866:	42b3      	cmp	r3, r6
 8002868:	d139      	bne.n	80028de <USB_DevInit+0x11a>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800286a:	2200      	movs	r2, #0
 800286c:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002870:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002874:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002878:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800287a:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800287e:	42b2      	cmp	r2, r6
 8002880:	d140      	bne.n	8002904 <USB_DevInit+0x140>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002888:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800288e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002892:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002896:	b91b      	cbnz	r3, 80028a0 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002898:	69a3      	ldr	r3, [r4, #24]
 800289a:	f043 0310 	orr.w	r3, r3, #16
 800289e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80028a0:	69a2      	ldr	r2, [r4, #24]
 80028a2:	4b22      	ldr	r3, [pc, #136]	; (800292c <USB_DevInit+0x168>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80028a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80028aa:	b11b      	cbz	r3, 80028b4 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80028ac:	69a3      	ldr	r3, [r4, #24]
 80028ae:	f043 0308 	orr.w	r3, r3, #8
 80028b2:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80028b4:	2d01      	cmp	r5, #1
 80028b6:	d105      	bne.n	80028c4 <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80028b8:	69a3      	ldr	r3, [r4, #24]
 80028ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	61a3      	str	r3, [r4, #24]
}
 80028c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028c8:	b004      	add	sp, #16
 80028ca:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80028cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80028d4:	e79d      	b.n	8002812 <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80028d6:	4619      	mov	r1, r3
 80028d8:	e7a8      	b.n	800282c <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80028da:	2103      	movs	r1, #3
 80028dc:	e7a6      	b.n	800282c <USB_DevInit+0x68>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80028de:	f8d2 9000 	ldr.w	r9, [r2]
 80028e2:	f1b9 0f00 	cmp.w	r9, #0
 80028e6:	da0b      	bge.n	8002900 <USB_DevInit+0x13c>
      if (i == 0U)
 80028e8:	b93b      	cbnz	r3, 80028fa <USB_DevInit+0x136>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80028ea:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80028ee:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80028f0:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80028f2:	f8c2 8008 	str.w	r8, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80028f6:	3220      	adds	r2, #32
 80028f8:	e7b5      	b.n	8002866 <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80028fa:	f8c2 c000 	str.w	ip, [r2]
 80028fe:	e7f6      	b.n	80028ee <USB_DevInit+0x12a>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002900:	6011      	str	r1, [r2, #0]
 8002902:	e7f4      	b.n	80028ee <USB_DevInit+0x12a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002904:	f8d3 9000 	ldr.w	r9, [r3]
 8002908:	f1b9 0f00 	cmp.w	r9, #0
 800290c:	da0b      	bge.n	8002926 <USB_DevInit+0x162>
      if (i == 0U)
 800290e:	b93a      	cbnz	r2, 8002920 <USB_DevInit+0x15c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002910:	f8c3 e000 	str.w	lr, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002914:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002916:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002918:	f8c3 8008 	str.w	r8, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800291c:	3320      	adds	r3, #32
 800291e:	e7ae      	b.n	800287e <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002920:	f8c3 c000 	str.w	ip, [r3]
 8002924:	e7f6      	b.n	8002914 <USB_DevInit+0x150>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002926:	6019      	str	r1, [r3, #0]
 8002928:	e7f4      	b.n	8002914 <USB_DevInit+0x150>
 800292a:	bf00      	nop
 800292c:	803c3800 	.word	0x803c3800

08002930 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002930:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8002934:	f023 0303 	bic.w	r3, r3, #3
 8002938:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800293c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002948:	2000      	movs	r0, #0
 800294a:	4770      	bx	lr

0800294c <__libc_init_array>:
 800294c:	b570      	push	{r4, r5, r6, lr}
 800294e:	4d0d      	ldr	r5, [pc, #52]	; (8002984 <__libc_init_array+0x38>)
 8002950:	4c0d      	ldr	r4, [pc, #52]	; (8002988 <__libc_init_array+0x3c>)
 8002952:	1b64      	subs	r4, r4, r5
 8002954:	10a4      	asrs	r4, r4, #2
 8002956:	2600      	movs	r6, #0
 8002958:	42a6      	cmp	r6, r4
 800295a:	d109      	bne.n	8002970 <__libc_init_array+0x24>
 800295c:	4d0b      	ldr	r5, [pc, #44]	; (800298c <__libc_init_array+0x40>)
 800295e:	4c0c      	ldr	r4, [pc, #48]	; (8002990 <__libc_init_array+0x44>)
 8002960:	f000 f82e 	bl	80029c0 <_init>
 8002964:	1b64      	subs	r4, r4, r5
 8002966:	10a4      	asrs	r4, r4, #2
 8002968:	2600      	movs	r6, #0
 800296a:	42a6      	cmp	r6, r4
 800296c:	d105      	bne.n	800297a <__libc_init_array+0x2e>
 800296e:	bd70      	pop	{r4, r5, r6, pc}
 8002970:	f855 3b04 	ldr.w	r3, [r5], #4
 8002974:	4798      	blx	r3
 8002976:	3601      	adds	r6, #1
 8002978:	e7ee      	b.n	8002958 <__libc_init_array+0xc>
 800297a:	f855 3b04 	ldr.w	r3, [r5], #4
 800297e:	4798      	blx	r3
 8002980:	3601      	adds	r6, #1
 8002982:	e7f2      	b.n	800296a <__libc_init_array+0x1e>
 8002984:	08002ab0 	.word	0x08002ab0
 8002988:	08002ab0 	.word	0x08002ab0
 800298c:	08002ab0 	.word	0x08002ab0
 8002990:	08002ab4 	.word	0x08002ab4

08002994 <memcpy>:
 8002994:	440a      	add	r2, r1
 8002996:	4291      	cmp	r1, r2
 8002998:	f100 33ff 	add.w	r3, r0, #4294967295
 800299c:	d100      	bne.n	80029a0 <memcpy+0xc>
 800299e:	4770      	bx	lr
 80029a0:	b510      	push	{r4, lr}
 80029a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029aa:	4291      	cmp	r1, r2
 80029ac:	d1f9      	bne.n	80029a2 <memcpy+0xe>
 80029ae:	bd10      	pop	{r4, pc}

080029b0 <memset>:
 80029b0:	4402      	add	r2, r0
 80029b2:	4603      	mov	r3, r0
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <memset+0xa>
 80029b8:	4770      	bx	lr
 80029ba:	f803 1b01 	strb.w	r1, [r3], #1
 80029be:	e7f9      	b.n	80029b4 <memset+0x4>

080029c0 <_init>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	bf00      	nop
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr

080029cc <_fini>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	bf00      	nop
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr
