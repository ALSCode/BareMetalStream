
NUCLEO745_BareMetalStream_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e34  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  081040cc  081040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810420c  0810420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08104214  08104214  00014214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08104218  08104218  00014218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  10000000  0810421c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000128  10000014  08104230  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1000013c  08104230  0002013c  2**0
                  ALLOC
  9 .d3_dma_sec   00000100  38000000  38000000  00030000  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 11 .debug_info   000211bd  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003b80  00000000  00000000  00041201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0000812f  00000000  00000000  00044d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0004ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  0004d9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e36d  00000000  00000000  0004e960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013682  00000000  00000000  0008cccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00188dd8  00000000  00000000  000a034f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  00229127  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d20  00000000  00000000  00229174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000014 	.word	0x10000014
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081040b4 	.word	0x081040b4

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000018 	.word	0x10000018
 81002d4:	081040b4 	.word	0x081040b4

081002d8 <strlen>:
 81002d8:	4603      	mov	r3, r0
 81002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002de:	2a00      	cmp	r2, #0
 81002e0:	d1fb      	bne.n	81002da <strlen+0x2>
 81002e2:	1a18      	subs	r0, r3, r0
 81002e4:	3801      	subs	r0, #1
 81002e6:	4770      	bx	lr

081002e8 <__aeabi_uldivmod>:
 81002e8:	b953      	cbnz	r3, 8100300 <__aeabi_uldivmod+0x18>
 81002ea:	b94a      	cbnz	r2, 8100300 <__aeabi_uldivmod+0x18>
 81002ec:	2900      	cmp	r1, #0
 81002ee:	bf08      	it	eq
 81002f0:	2800      	cmpeq	r0, #0
 81002f2:	bf1c      	itt	ne
 81002f4:	f04f 31ff 	movne.w	r1, #4294967295
 81002f8:	f04f 30ff 	movne.w	r0, #4294967295
 81002fc:	f000 b974 	b.w	81005e8 <__aeabi_idiv0>
 8100300:	f1ad 0c08 	sub.w	ip, sp, #8
 8100304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100308:	f000 f806 	bl	8100318 <__udivmoddi4>
 810030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100314:	b004      	add	sp, #16
 8100316:	4770      	bx	lr

08100318 <__udivmoddi4>:
 8100318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810031c:	9d08      	ldr	r5, [sp, #32]
 810031e:	4604      	mov	r4, r0
 8100320:	468e      	mov	lr, r1
 8100322:	2b00      	cmp	r3, #0
 8100324:	d14d      	bne.n	81003c2 <__udivmoddi4+0xaa>
 8100326:	428a      	cmp	r2, r1
 8100328:	4694      	mov	ip, r2
 810032a:	d969      	bls.n	8100400 <__udivmoddi4+0xe8>
 810032c:	fab2 f282 	clz	r2, r2
 8100330:	b152      	cbz	r2, 8100348 <__udivmoddi4+0x30>
 8100332:	fa01 f302 	lsl.w	r3, r1, r2
 8100336:	f1c2 0120 	rsb	r1, r2, #32
 810033a:	fa20 f101 	lsr.w	r1, r0, r1
 810033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8100342:	ea41 0e03 	orr.w	lr, r1, r3
 8100346:	4094      	lsls	r4, r2
 8100348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 810034c:	0c21      	lsrs	r1, r4, #16
 810034e:	fbbe f6f8 	udiv	r6, lr, r8
 8100352:	fa1f f78c 	uxth.w	r7, ip
 8100356:	fb08 e316 	mls	r3, r8, r6, lr
 810035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810035e:	fb06 f107 	mul.w	r1, r6, r7
 8100362:	4299      	cmp	r1, r3
 8100364:	d90a      	bls.n	810037c <__udivmoddi4+0x64>
 8100366:	eb1c 0303 	adds.w	r3, ip, r3
 810036a:	f106 30ff 	add.w	r0, r6, #4294967295
 810036e:	f080 811f 	bcs.w	81005b0 <__udivmoddi4+0x298>
 8100372:	4299      	cmp	r1, r3
 8100374:	f240 811c 	bls.w	81005b0 <__udivmoddi4+0x298>
 8100378:	3e02      	subs	r6, #2
 810037a:	4463      	add	r3, ip
 810037c:	1a5b      	subs	r3, r3, r1
 810037e:	b2a4      	uxth	r4, r4
 8100380:	fbb3 f0f8 	udiv	r0, r3, r8
 8100384:	fb08 3310 	mls	r3, r8, r0, r3
 8100388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 810038c:	fb00 f707 	mul.w	r7, r0, r7
 8100390:	42a7      	cmp	r7, r4
 8100392:	d90a      	bls.n	81003aa <__udivmoddi4+0x92>
 8100394:	eb1c 0404 	adds.w	r4, ip, r4
 8100398:	f100 33ff 	add.w	r3, r0, #4294967295
 810039c:	f080 810a 	bcs.w	81005b4 <__udivmoddi4+0x29c>
 81003a0:	42a7      	cmp	r7, r4
 81003a2:	f240 8107 	bls.w	81005b4 <__udivmoddi4+0x29c>
 81003a6:	4464      	add	r4, ip
 81003a8:	3802      	subs	r0, #2
 81003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 81003ae:	1be4      	subs	r4, r4, r7
 81003b0:	2600      	movs	r6, #0
 81003b2:	b11d      	cbz	r5, 81003bc <__udivmoddi4+0xa4>
 81003b4:	40d4      	lsrs	r4, r2
 81003b6:	2300      	movs	r3, #0
 81003b8:	e9c5 4300 	strd	r4, r3, [r5]
 81003bc:	4631      	mov	r1, r6
 81003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003c2:	428b      	cmp	r3, r1
 81003c4:	d909      	bls.n	81003da <__udivmoddi4+0xc2>
 81003c6:	2d00      	cmp	r5, #0
 81003c8:	f000 80ef 	beq.w	81005aa <__udivmoddi4+0x292>
 81003cc:	2600      	movs	r6, #0
 81003ce:	e9c5 0100 	strd	r0, r1, [r5]
 81003d2:	4630      	mov	r0, r6
 81003d4:	4631      	mov	r1, r6
 81003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003da:	fab3 f683 	clz	r6, r3
 81003de:	2e00      	cmp	r6, #0
 81003e0:	d14a      	bne.n	8100478 <__udivmoddi4+0x160>
 81003e2:	428b      	cmp	r3, r1
 81003e4:	d302      	bcc.n	81003ec <__udivmoddi4+0xd4>
 81003e6:	4282      	cmp	r2, r0
 81003e8:	f200 80f9 	bhi.w	81005de <__udivmoddi4+0x2c6>
 81003ec:	1a84      	subs	r4, r0, r2
 81003ee:	eb61 0303 	sbc.w	r3, r1, r3
 81003f2:	2001      	movs	r0, #1
 81003f4:	469e      	mov	lr, r3
 81003f6:	2d00      	cmp	r5, #0
 81003f8:	d0e0      	beq.n	81003bc <__udivmoddi4+0xa4>
 81003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 81003fe:	e7dd      	b.n	81003bc <__udivmoddi4+0xa4>
 8100400:	b902      	cbnz	r2, 8100404 <__udivmoddi4+0xec>
 8100402:	deff      	udf	#255	; 0xff
 8100404:	fab2 f282 	clz	r2, r2
 8100408:	2a00      	cmp	r2, #0
 810040a:	f040 8092 	bne.w	8100532 <__udivmoddi4+0x21a>
 810040e:	eba1 010c 	sub.w	r1, r1, ip
 8100412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100416:	fa1f fe8c 	uxth.w	lr, ip
 810041a:	2601      	movs	r6, #1
 810041c:	0c20      	lsrs	r0, r4, #16
 810041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8100422:	fb07 1113 	mls	r1, r7, r3, r1
 8100426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810042a:	fb0e f003 	mul.w	r0, lr, r3
 810042e:	4288      	cmp	r0, r1
 8100430:	d908      	bls.n	8100444 <__udivmoddi4+0x12c>
 8100432:	eb1c 0101 	adds.w	r1, ip, r1
 8100436:	f103 38ff 	add.w	r8, r3, #4294967295
 810043a:	d202      	bcs.n	8100442 <__udivmoddi4+0x12a>
 810043c:	4288      	cmp	r0, r1
 810043e:	f200 80cb 	bhi.w	81005d8 <__udivmoddi4+0x2c0>
 8100442:	4643      	mov	r3, r8
 8100444:	1a09      	subs	r1, r1, r0
 8100446:	b2a4      	uxth	r4, r4
 8100448:	fbb1 f0f7 	udiv	r0, r1, r7
 810044c:	fb07 1110 	mls	r1, r7, r0, r1
 8100450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100454:	fb0e fe00 	mul.w	lr, lr, r0
 8100458:	45a6      	cmp	lr, r4
 810045a:	d908      	bls.n	810046e <__udivmoddi4+0x156>
 810045c:	eb1c 0404 	adds.w	r4, ip, r4
 8100460:	f100 31ff 	add.w	r1, r0, #4294967295
 8100464:	d202      	bcs.n	810046c <__udivmoddi4+0x154>
 8100466:	45a6      	cmp	lr, r4
 8100468:	f200 80bb 	bhi.w	81005e2 <__udivmoddi4+0x2ca>
 810046c:	4608      	mov	r0, r1
 810046e:	eba4 040e 	sub.w	r4, r4, lr
 8100472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100476:	e79c      	b.n	81003b2 <__udivmoddi4+0x9a>
 8100478:	f1c6 0720 	rsb	r7, r6, #32
 810047c:	40b3      	lsls	r3, r6
 810047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8100482:	ea4c 0c03 	orr.w	ip, ip, r3
 8100486:	fa20 f407 	lsr.w	r4, r0, r7
 810048a:	fa01 f306 	lsl.w	r3, r1, r6
 810048e:	431c      	orrs	r4, r3
 8100490:	40f9      	lsrs	r1, r7
 8100492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100496:	fa00 f306 	lsl.w	r3, r0, r6
 810049a:	fbb1 f8f9 	udiv	r8, r1, r9
 810049e:	0c20      	lsrs	r0, r4, #16
 81004a0:	fa1f fe8c 	uxth.w	lr, ip
 81004a4:	fb09 1118 	mls	r1, r9, r8, r1
 81004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81004ac:	fb08 f00e 	mul.w	r0, r8, lr
 81004b0:	4288      	cmp	r0, r1
 81004b2:	fa02 f206 	lsl.w	r2, r2, r6
 81004b6:	d90b      	bls.n	81004d0 <__udivmoddi4+0x1b8>
 81004b8:	eb1c 0101 	adds.w	r1, ip, r1
 81004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 81004c0:	f080 8088 	bcs.w	81005d4 <__udivmoddi4+0x2bc>
 81004c4:	4288      	cmp	r0, r1
 81004c6:	f240 8085 	bls.w	81005d4 <__udivmoddi4+0x2bc>
 81004ca:	f1a8 0802 	sub.w	r8, r8, #2
 81004ce:	4461      	add	r1, ip
 81004d0:	1a09      	subs	r1, r1, r0
 81004d2:	b2a4      	uxth	r4, r4
 81004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 81004d8:	fb09 1110 	mls	r1, r9, r0, r1
 81004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 81004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 81004e4:	458e      	cmp	lr, r1
 81004e6:	d908      	bls.n	81004fa <__udivmoddi4+0x1e2>
 81004e8:	eb1c 0101 	adds.w	r1, ip, r1
 81004ec:	f100 34ff 	add.w	r4, r0, #4294967295
 81004f0:	d26c      	bcs.n	81005cc <__udivmoddi4+0x2b4>
 81004f2:	458e      	cmp	lr, r1
 81004f4:	d96a      	bls.n	81005cc <__udivmoddi4+0x2b4>
 81004f6:	3802      	subs	r0, #2
 81004f8:	4461      	add	r1, ip
 81004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 81004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8100502:	eba1 010e 	sub.w	r1, r1, lr
 8100506:	42a1      	cmp	r1, r4
 8100508:	46c8      	mov	r8, r9
 810050a:	46a6      	mov	lr, r4
 810050c:	d356      	bcc.n	81005bc <__udivmoddi4+0x2a4>
 810050e:	d053      	beq.n	81005b8 <__udivmoddi4+0x2a0>
 8100510:	b15d      	cbz	r5, 810052a <__udivmoddi4+0x212>
 8100512:	ebb3 0208 	subs.w	r2, r3, r8
 8100516:	eb61 010e 	sbc.w	r1, r1, lr
 810051a:	fa01 f707 	lsl.w	r7, r1, r7
 810051e:	fa22 f306 	lsr.w	r3, r2, r6
 8100522:	40f1      	lsrs	r1, r6
 8100524:	431f      	orrs	r7, r3
 8100526:	e9c5 7100 	strd	r7, r1, [r5]
 810052a:	2600      	movs	r6, #0
 810052c:	4631      	mov	r1, r6
 810052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100532:	f1c2 0320 	rsb	r3, r2, #32
 8100536:	40d8      	lsrs	r0, r3
 8100538:	fa0c fc02 	lsl.w	ip, ip, r2
 810053c:	fa21 f303 	lsr.w	r3, r1, r3
 8100540:	4091      	lsls	r1, r2
 8100542:	4301      	orrs	r1, r0
 8100544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100548:	fa1f fe8c 	uxth.w	lr, ip
 810054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8100550:	fb07 3610 	mls	r6, r7, r0, r3
 8100554:	0c0b      	lsrs	r3, r1, #16
 8100556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 810055a:	fb00 f60e 	mul.w	r6, r0, lr
 810055e:	429e      	cmp	r6, r3
 8100560:	fa04 f402 	lsl.w	r4, r4, r2
 8100564:	d908      	bls.n	8100578 <__udivmoddi4+0x260>
 8100566:	eb1c 0303 	adds.w	r3, ip, r3
 810056a:	f100 38ff 	add.w	r8, r0, #4294967295
 810056e:	d22f      	bcs.n	81005d0 <__udivmoddi4+0x2b8>
 8100570:	429e      	cmp	r6, r3
 8100572:	d92d      	bls.n	81005d0 <__udivmoddi4+0x2b8>
 8100574:	3802      	subs	r0, #2
 8100576:	4463      	add	r3, ip
 8100578:	1b9b      	subs	r3, r3, r6
 810057a:	b289      	uxth	r1, r1
 810057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8100580:	fb07 3316 	mls	r3, r7, r6, r3
 8100584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100588:	fb06 f30e 	mul.w	r3, r6, lr
 810058c:	428b      	cmp	r3, r1
 810058e:	d908      	bls.n	81005a2 <__udivmoddi4+0x28a>
 8100590:	eb1c 0101 	adds.w	r1, ip, r1
 8100594:	f106 38ff 	add.w	r8, r6, #4294967295
 8100598:	d216      	bcs.n	81005c8 <__udivmoddi4+0x2b0>
 810059a:	428b      	cmp	r3, r1
 810059c:	d914      	bls.n	81005c8 <__udivmoddi4+0x2b0>
 810059e:	3e02      	subs	r6, #2
 81005a0:	4461      	add	r1, ip
 81005a2:	1ac9      	subs	r1, r1, r3
 81005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81005a8:	e738      	b.n	810041c <__udivmoddi4+0x104>
 81005aa:	462e      	mov	r6, r5
 81005ac:	4628      	mov	r0, r5
 81005ae:	e705      	b.n	81003bc <__udivmoddi4+0xa4>
 81005b0:	4606      	mov	r6, r0
 81005b2:	e6e3      	b.n	810037c <__udivmoddi4+0x64>
 81005b4:	4618      	mov	r0, r3
 81005b6:	e6f8      	b.n	81003aa <__udivmoddi4+0x92>
 81005b8:	454b      	cmp	r3, r9
 81005ba:	d2a9      	bcs.n	8100510 <__udivmoddi4+0x1f8>
 81005bc:	ebb9 0802 	subs.w	r8, r9, r2
 81005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 81005c4:	3801      	subs	r0, #1
 81005c6:	e7a3      	b.n	8100510 <__udivmoddi4+0x1f8>
 81005c8:	4646      	mov	r6, r8
 81005ca:	e7ea      	b.n	81005a2 <__udivmoddi4+0x28a>
 81005cc:	4620      	mov	r0, r4
 81005ce:	e794      	b.n	81004fa <__udivmoddi4+0x1e2>
 81005d0:	4640      	mov	r0, r8
 81005d2:	e7d1      	b.n	8100578 <__udivmoddi4+0x260>
 81005d4:	46d0      	mov	r8, sl
 81005d6:	e77b      	b.n	81004d0 <__udivmoddi4+0x1b8>
 81005d8:	3b02      	subs	r3, #2
 81005da:	4461      	add	r1, ip
 81005dc:	e732      	b.n	8100444 <__udivmoddi4+0x12c>
 81005de:	4630      	mov	r0, r6
 81005e0:	e709      	b.n	81003f6 <__udivmoddi4+0xde>
 81005e2:	4464      	add	r4, ip
 81005e4:	3802      	subs	r0, #2
 81005e6:	e742      	b.n	810046e <__udivmoddi4+0x156>

081005e8 <__aeabi_idiv0>:
 81005e8:	4770      	bx	lr
 81005ea:	bf00      	nop

081005ec <_ZN10NumConvert9divmodu10ImEE10divmod10_tIT_ERKS2_.isra.0>:
private:
	template<typename N>
	static divmod10_t<N> divmodu10(const N& n){
		divmod10_t<N> res;
		res.quot = n >> 1;
		res.quot += res.quot >> 1;
 81005ec:	088b      	lsrs	r3, r1, #2
 81005ee:	eb03 0351 	add.w	r3, r3, r1, lsr #1
		res.quot += res.quot >> 4;
 81005f2:	eb03 1313 	add.w	r3, r3, r3, lsr #4
		if(sizeof(N) > 1)
			res.quot += res.quot >> 8;
 81005f6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
		if(sizeof(N) > 2)
			res.quot += res.quot >> 16;
 81005fa:	eb03 4313 	add.w	r3, r3, r3, lsr #16
		N qq = res.quot;
		res.quot >>= 3;
 81005fe:	08da      	lsrs	r2, r3, #3
		res.rem = std::uint8_t(n - ((res.quot << 1) + (qq & ~std::uint32_t{7})));
 8100600:	f023 0307 	bic.w	r3, r3, #7
 8100604:	1acb      	subs	r3, r1, r3
 8100606:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 810060a:	b2db      	uxtb	r3, r3
		if(res.rem > 9)
 810060c:	2b09      	cmp	r3, #9
		res.quot >>= 3;
 810060e:	6002      	str	r2, [r0, #0]
		{
			res.rem -= 10;
 8100610:	bf85      	ittet	hi
 8100612:	3b0a      	subhi	r3, #10
			res.quot++;
 8100614:	3201      	addhi	r2, #1
		res.rem = std::uint8_t(n - ((res.quot << 1) + (qq & ~std::uint32_t{7})));
 8100616:	7103      	strbls	r3, [r0, #4]
			res.rem -= 10;
 8100618:	7103      	strbhi	r3, [r0, #4]
			res.quot++;
 810061a:	bf88      	it	hi
 810061c:	6002      	strhi	r2, [r0, #0]
		}
		return res;
	}
 810061e:	4770      	bx	lr

08100620 <_ZN10NumConvert10ftoaEngineEfPci>:
	{
	    mantissa <<= 8;
		return (std::uint64_t(mantissa) * multiplier) >> 32;
	}

	static int ftoaEngine(float value, char *buffer, int presc)
 8100620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8100622:	ed8d 0a01 	vstr	s0, [sp, #4]
	{
//		std::uint32_t uvalue = *reinterpret_cast<std::uint32_t*>(&value);
		std::uint32_t uvalue = *bit_cast<std::uint32_t*>(&value);
 8100626:	9a01      	ldr	r2, [sp, #4]
		std::uint8_t exponent = static_cast<std::uint8_t>(uvalue >> 23);
		std::uint32_t fraction = (uvalue & 0x00ffffff) | 0x00800000;
		char *ptr = buffer;

		if(uvalue & 0x80000000){
	        *ptr++ = '-';
 8100628:	2a00      	cmp	r2, #0
		std::uint8_t exponent = static_cast<std::uint8_t>(uvalue >> 23);
 810062a:	f3c2 55c7 	ubfx	r5, r2, #23, #8
		std::uint32_t fraction = (uvalue & 0x00ffffff) | 0x00800000;
 810062e:	f3c2 0316 	ubfx	r3, r2, #0, #23
	        *ptr++ = '-';
 8100632:	bfac      	ite	ge
 8100634:	222b      	movge	r2, #43	; 0x2b
 8100636:	222d      	movlt	r2, #45	; 0x2d
 8100638:	7002      	strb	r2, [r0, #0]
		} else {
	        *ptr++ = '+';
		}

		if(exponent == 0) // don't care about a subnormals
 810063a:	b935      	cbnz	r5, 810064a <_ZN10NumConvert10ftoaEngineEfPci+0x2a>
		{
			ptr[0] = '0';
 810063c:	2330      	movs	r3, #48	; 0x30
 810063e:	7043      	strb	r3, [r0, #1]
			ptr[1] = 0;
 8100640:	7085      	strb	r5, [r0, #2]
			return 0xff;
 8100642:	24ff      	movs	r4, #255	; 0xff
		while(ptr[0] == '0')
		{
		    *ptr-- = 0;
		}
	    return exp10;
	}
 8100644:	4620      	mov	r0, r4
 8100646:	b003      	add	sp, #12
 8100648:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(exponent == 0xff)
 810064a:	2dff      	cmp	r5, #255	; 0xff
 810064c:	d10e      	bne.n	810066c <_ZN10NumConvert10ftoaEngineEfPci+0x4c>
		    if(fraction & 0x007fffff)
 810064e:	226e      	movs	r2, #110	; 0x6e
 8100650:	b133      	cbz	r3, 8100660 <_ZN10NumConvert10ftoaEngineEfPci+0x40>
		    	ptr[1] = 'a';
 8100652:	2361      	movs	r3, #97	; 0x61
 8100654:	7083      	strb	r3, [r0, #2]
		    	ptr[0] = 'n';
 8100656:	7042      	strb	r2, [r0, #1]
		    	ptr[2] = 'n';
 8100658:	70c2      	strb	r2, [r0, #3]
				ptr[3] = 0;
 810065a:	2300      	movs	r3, #0
				ptr[3] = 0;
 810065c:	7103      	strb	r3, [r0, #4]
 810065e:	e7f0      	b.n	8100642 <_ZN10NumConvert10ftoaEngineEfPci+0x22>
		    	ptr[0] = 'i';
 8100660:	2169      	movs	r1, #105	; 0x69
		    	ptr[1] = 'n';
 8100662:	7082      	strb	r2, [r0, #2]
		    	ptr[2] = 'f';
 8100664:	2266      	movs	r2, #102	; 0x66
		    	ptr[0] = 'i';
 8100666:	7041      	strb	r1, [r0, #1]
		    	ptr[2] = 'f';
 8100668:	70c2      	strb	r2, [r0, #3]
 810066a:	e7f7      	b.n	810065c <_ZN10NumConvert10ftoaEngineEfPci+0x3c>
		*ptr++ = '0';
 810066c:	2230      	movs	r2, #48	; 0x30
	    int exp10 = ((((exponent>>3))*77+63)>>5) - 38;
 810066e:	273f      	movs	r7, #63	; 0x3f
		*ptr++ = '0';
 8100670:	7042      	strb	r2, [r0, #1]
	    int exp10 = ((((exponent>>3))*77+63)>>5) - 38;
 8100672:	244d      	movs	r4, #77	; 0x4d
 8100674:	08ea      	lsrs	r2, r5, #3
 8100676:	fb14 7402 	smlabb	r4, r4, r2, r7
	    std::uint32_t t = MantissaMul(fraction, table2[exponent / 8]) + 1;
 810067a:	4f27      	ldr	r7, [pc, #156]	; (8100718 <_ZN10NumConvert10ftoaEngineEfPci+0xf8>)
	    mantissa <<= 8;
 810067c:	021b      	lsls	r3, r3, #8
		return (std::uint64_t(mantissa) * multiplier) >> 32;
 810067e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
	    mantissa <<= 8;
 8100682:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		return (std::uint64_t(mantissa) * multiplier) >> 32;
 8100686:	fba3 2302 	umull	r2, r3, r3, r2
	    std::uint_fast8_t shift = 7 - (exponent & 7);
 810068a:	43ed      	mvns	r5, r5
 810068c:	f005 0507 	and.w	r5, r5, #7
	    std::uint32_t t = MantissaMul(fraction, table2[exponent / 8]) + 1;
 8100690:	3301      	adds	r3, #1
	    t >>= shift;
 8100692:	40eb      	lsrs	r3, r5
	    int exp10 = ((((exponent>>3))*77+63)>>5) - 38;
 8100694:	1164      	asrs	r4, r4, #5
		*ptr++ = '0';
 8100696:	1c86      	adds	r6, r0, #2
	    int exp10 = ((((exponent>>3))*77+63)>>5) - 38;
 8100698:	3c26      	subs	r4, #38	; 0x26
		digit >>= 4;
 810069a:	0f1a      	lsrs	r2, r3, #28
			t *= 10;
 810069c:	250a      	movs	r5, #10
	    while(digit == 0)
 810069e:	b92a      	cbnz	r2, 81006ac <_ZN10NumConvert10ftoaEngineEfPci+0x8c>
	        t &= 0x0fffffff;
 81006a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			t *= 10;
 81006a4:	436b      	muls	r3, r5
	        digit = (uint8_t)(t >> 28);
 81006a6:	0f1a      	lsrs	r2, r3, #28
	        exp10--;
 81006a8:	3c01      	subs	r4, #1
	    while(digit == 0)
 81006aa:	e7f8      	b.n	810069e <_ZN10NumConvert10ftoaEngineEfPci+0x7e>
	    for(std::uint_fast8_t i = presc+1; i > 0; i--)
 81006ac:	f101 0c03 	add.w	ip, r1, #3
 81006b0:	1c4a      	adds	r2, r1, #1
 81006b2:	4484      	add	ip, r0
		*ptr++ = '0';
 81006b4:	4635      	mov	r5, r6
			t *= 10;
 81006b6:	f04f 0e0a 	mov.w	lr, #10
	    for(std::uint_fast8_t i = presc+1; i > 0; i--)
 81006ba:	4565      	cmp	r5, ip
 81006bc:	d008      	beq.n	81006d0 <_ZN10NumConvert10ftoaEngineEfPci+0xb0>
			digit = (uint8_t)(t >> 28);
 81006be:	0f1f      	lsrs	r7, r3, #28
	        *ptr++ = digit + '0';
 81006c0:	3730      	adds	r7, #48	; 0x30
	        t &= 0x0fffffff;
 81006c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
	        *ptr++ = digit + '0';
 81006c6:	f805 7b01 	strb.w	r7, [r5], #1
			t *= 10;
 81006ca:	fb0e f303 	mul.w	r3, lr, r3
	    for(std::uint_fast8_t i = presc+1; i > 0; i--)
 81006ce:	e7f4      	b.n	81006ba <_ZN10NumConvert10ftoaEngineEfPci+0x9a>
		if(buffer[presc+2] >= '5')
 81006d0:	4401      	add	r1, r0
 81006d2:	4416      	add	r6, r2
 81006d4:	788b      	ldrb	r3, [r1, #2]
 81006d6:	2b34      	cmp	r3, #52	; 0x34
	        buffer[presc+1]++;
 81006d8:	bf82      	ittt	hi
 81006da:	5c83      	ldrbhi	r3, [r0, r2]
 81006dc:	3301      	addhi	r3, #1
 81006de:	5483      	strbhi	r3, [r0, r2]
	    ptr[-1] = 0;
 81006e0:	2300      	movs	r3, #0
 81006e2:	f806 3c01 	strb.w	r3, [r6, #-1]
		for(std::uint_fast8_t i = presc + 1; i > 1; i--)
 81006e6:	1883      	adds	r3, r0, r2
 81006e8:	1a1a      	subs	r2, r3, r0
 81006ea:	2a01      	cmp	r2, #1
 81006ec:	d807      	bhi.n	81006fe <_ZN10NumConvert10ftoaEngineEfPci+0xde>
 81006ee:	3e01      	subs	r6, #1
		    *ptr-- = 0;
 81006f0:	2300      	movs	r3, #0
		while(ptr[0] == '0')
 81006f2:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 81006f6:	2a30      	cmp	r2, #48	; 0x30
 81006f8:	d1a4      	bne.n	8100644 <_ZN10NumConvert10ftoaEngineEfPci+0x24>
		    *ptr-- = 0;
 81006fa:	7033      	strb	r3, [r6, #0]
		while(ptr[0] == '0')
 81006fc:	e7f9      	b.n	81006f2 <_ZN10NumConvert10ftoaEngineEfPci+0xd2>
			if(buffer[i] > '9')
 81006fe:	781a      	ldrb	r2, [r3, #0]
 8100700:	2a39      	cmp	r2, #57	; 0x39
 8100702:	d906      	bls.n	8100712 <_ZN10NumConvert10ftoaEngineEfPci+0xf2>
			    buffer[i]-=10;
 8100704:	3a0a      	subs	r2, #10
 8100706:	701a      	strb	r2, [r3, #0]
				buffer[i-1]++;
 8100708:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 810070c:	3201      	adds	r2, #1
 810070e:	f803 2c01 	strb.w	r2, [r3, #-1]
		for(std::uint_fast8_t i = presc + 1; i > 1; i--)
 8100712:	3b01      	subs	r3, #1
 8100714:	e7e8      	b.n	81006e8 <_ZN10NumConvert10ftoaEngineEfPci+0xc8>
 8100716:	bf00      	nop
 8100718:	08104114 	.word	0x08104114

0810071c <_ZN10NumConvert15to_string_floatEfPc>:
	static Ret to_string_float(const float value, char* result)
 810071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8100720:	b089      	sub	sp, #36	; 0x24
 8100722:	4607      	mov	r7, r0
 8100724:	460e      	mov	r6, r1
		int exp10 = ftoaEngine(value, buffer, precision);
 8100726:	a805      	add	r0, sp, #20
 8100728:	2106      	movs	r1, #6
 810072a:	f7ff ff79 	bl	8100620 <_ZN10NumConvert10ftoaEngineEfPci>
		if(exp10 == 0xff)
 810072e:	28ff      	cmp	r0, #255	; 0xff
		int exp10 = ftoaEngine(value, buffer, precision);
 8100730:	4605      	mov	r5, r0
		if(exp10 == 0xff)
 8100732:	d113      	bne.n	810075c <_ZN10NumConvert15to_string_floatEfPc+0x40>
			std::uint32_t digits = strlen(buffer);
 8100734:	a805      	add	r0, sp, #20
 8100736:	f7ff fdcf 	bl	81002d8 <strlen>
				*out_ptr++ = buffer[i];
 810073a:	a905      	add	r1, sp, #20
			std::uint32_t digits = strlen(buffer);
 810073c:	4604      	mov	r4, r0
				*out_ptr++ = buffer[i];
 810073e:	4602      	mov	r2, r0
 8100740:	4630      	mov	r0, r6
 8100742:	f003 fc87 	bl	8104054 <memcpy>
			*out_ptr = 0;
 8100746:	2300      	movs	r3, #0
 8100748:	5533      	strb	r3, [r6, r4]
		return {result, strlen(in_ptr)};
 810074a:	4630      	mov	r0, r6
 810074c:	603e      	str	r6, [r7, #0]
 810074e:	f7ff fdc3 	bl	81002d8 <strlen>
 8100752:	6078      	str	r0, [r7, #4]
	}
 8100754:	4638      	mov	r0, r7
 8100756:	b009      	add	sp, #36	; 0x24
 8100758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(buffer[1] != '0')
 810075c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8100760:	2b30      	cmp	r3, #48	; 0x30
			str_begin--;
 8100762:	bf16      	itet	ne
 8100764:	f10d 0915 	addne.w	r9, sp, #21
		char *str_begin = &buffer[2];
 8100768:	f10d 0916 	addeq.w	r9, sp, #22
			exp10++;
 810076c:	3501      	addne	r5, #1
		std::uint_fast8_t digits = (std::uint_fast8_t)strlen(str_begin);
 810076e:	4648      	mov	r0, r9
 8100770:	f7ff fdb2 	bl	81002d8 <strlen>
		if(abs(exp10) >= precision)
 8100774:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8100778:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 810077c:	2b05      	cmp	r3, #5
		std::uint_fast8_t digits = (std::uint_fast8_t)strlen(str_begin);
 810077e:	4683      	mov	fp, r0
		if(abs(exp10) >= precision)
 8100780:	dc7a      	bgt.n	8100878 <_ZN10NumConvert15to_string_floatEfPc+0x15c>
		}else if(exp10 >= 0)
 8100782:	2d00      	cmp	r5, #0
 8100784:	db07      	blt.n	8100796 <_ZN10NumConvert15to_string_floatEfPc+0x7a>
			intDigits = exp10+1;
 8100786:	1c6b      	adds	r3, r5, #1
			exp10 = 0;
 8100788:	2500      	movs	r5, #0
		std::uint_fast8_t fractDigits = digits > intDigits ? digits - intDigits : 0;
 810078a:	459b      	cmp	fp, r3
 810078c:	d86a      	bhi.n	8100864 <_ZN10NumConvert15to_string_floatEfPc+0x148>
 810078e:	f04f 0800 	mov.w	r8, #0
 8100792:	46c2      	mov	sl, r8
 8100794:	e009      	b.n	81007aa <_ZN10NumConvert15to_string_floatEfPc+0x8e>
			leadingZeros = -exp10 - 1;
 8100796:	ea6f 0a05 	mvn.w	sl, r5
		std::uint_fast8_t fractDigits = digits > intDigits ? digits - intDigits : 0;
 810079a:	2800      	cmp	r0, #0
 810079c:	d065      	beq.n	810086a <_ZN10NumConvert15to_string_floatEfPc+0x14e>
			intDigits = 0;
 810079e:	2500      	movs	r5, #0
			exp10 = 0;
 81007a0:	462b      	mov	r3, r5
		std::uint_fast8_t fractDigits = digits > intDigits ? digits - intDigits : 0;
 81007a2:	ebab 0803 	sub.w	r8, fp, r3
		if(intDigits)
 81007a6:	2b00      	cmp	r3, #0
 81007a8:	d061      	beq.n	810086e <_ZN10NumConvert15to_string_floatEfPc+0x152>
			std::uint_fast8_t count = intDigits > digits ? digits : intDigits;
 81007aa:	459b      	cmp	fp, r3
 81007ac:	465a      	mov	r2, fp
				*out_ptr++ = *str_begin++;
 81007ae:	4649      	mov	r1, r9
 81007b0:	bf28      	it	cs
 81007b2:	461a      	movcs	r2, r3
 81007b4:	4630      	mov	r0, r6
 81007b6:	e9cd 2300 	strd	r2, r3, [sp]
 81007ba:	f003 fc4b 	bl	8104054 <memcpy>
			std::int_fast8_t tralingZeros = intDigits - digits;
 81007be:	9b01      	ldr	r3, [sp, #4]
 81007c0:	9a00      	ldr	r2, [sp, #0]
 81007c2:	eba3 0b0b 	sub.w	fp, r3, fp
 81007c6:	18b4      	adds	r4, r6, r2
				*out_ptr++ ='0';
 81007c8:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
 81007cc:	4491      	add	r9, r2
 81007ce:	2130      	movs	r1, #48	; 0x30
 81007d0:	465a      	mov	r2, fp
 81007d2:	4620      	mov	r0, r4
 81007d4:	f003 fc66 	bl	81040a4 <memset>
 81007d8:	eb04 020b 	add.w	r2, r4, fp
		if(fractDigits)
 81007dc:	f1b8 0f00 	cmp.w	r8, #0
 81007e0:	d011      	beq.n	8100806 <_ZN10NumConvert15to_string_floatEfPc+0xea>
			*out_ptr++ = '.';
 81007e2:	4613      	mov	r3, r2
 81007e4:	222e      	movs	r2, #46	; 0x2e
 81007e6:	f803 2b01 	strb.w	r2, [r3], #1
				*out_ptr++ = '0';
 81007ea:	2130      	movs	r1, #48	; 0x30
 81007ec:	4652      	mov	r2, sl
 81007ee:	4618      	mov	r0, r3
 81007f0:	f003 fc58 	bl	81040a4 <memset>
 81007f4:	4603      	mov	r3, r0
 81007f6:	4453      	add	r3, sl
				*out_ptr++ = *str_begin++;
 81007f8:	4642      	mov	r2, r8
 81007fa:	4649      	mov	r1, r9
 81007fc:	4618      	mov	r0, r3
 81007fe:	f003 fc29 	bl	8104054 <memcpy>
 8100802:	eb00 0208 	add.w	r2, r0, r8
		if(exp10 != 0)
 8100806:	2d00      	cmp	r5, #0
 8100808:	d029      	beq.n	810085e <_ZN10NumConvert15to_string_floatEfPc+0x142>
			*out_ptr++ = 'e';
 810080a:	4691      	mov	r9, r2
 810080c:	f04f 0365 	mov.w	r3, #101	; 0x65
 8100810:	f809 3b02 	strb.w	r3, [r9], #2
				*out_ptr++ = '-';
 8100814:	bfb4      	ite	lt
 8100816:	232d      	movlt	r3, #45	; 0x2d
				*out_ptr++ = '+';
 8100818:	232b      	movge	r3, #43	; 0x2b
 810081a:	7053      	strb	r3, [r2, #1]

	static char *utoa_fast_div(std::uint32_t value, char *bufferEnd)
	{
	    *bufferEnd = 0;
 810081c:	f10d 081e 	add.w	r8, sp, #30
 8100820:	f04f 0300 	mov.w	r3, #0
				upow10 = -exp10;
 8100824:	bfb4      	ite	lt
 8100826:	4269      	neglt	r1, r5
				upow10 = exp10;
 8100828:	4629      	movge	r1, r5
	    *bufferEnd = 0;
 810082a:	f88d 301e 	strb.w	r3, [sp, #30]
		divmod10_t<std::uint32_t> res;
		res.quot = value;
 810082e:	4645      	mov	r5, r8
	    do
	    {
	        res = divmodu10(res.quot);
 8100830:	a803      	add	r0, sp, #12
 8100832:	f7ff fedb 	bl	81005ec <_ZN10NumConvert9divmodu10ImEE10divmod10_tIT_ERKS2_.isra.0>
	        *--bufferEnd = res.rem + '0';
 8100836:	f89d 3010 	ldrb.w	r3, [sp, #16]
	        res = divmodu10(res.quot);
 810083a:	9903      	ldr	r1, [sp, #12]
	        *--bufferEnd = res.rem + '0';
 810083c:	3330      	adds	r3, #48	; 0x30
 810083e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	    }
	    while (res.quot);
 8100842:	2900      	cmp	r1, #0
 8100844:	d1f4      	bne.n	8100830 <_ZN10NumConvert15to_string_floatEfPc+0x114>
				*out_ptr++ = *powPtr++;
 8100846:	eba5 0408 	sub.w	r4, r5, r8
 810084a:	45a8      	cmp	r8, r5
 810084c:	bf88      	it	hi
 810084e:	2400      	movhi	r4, #0
 8100850:	4622      	mov	r2, r4
 8100852:	4641      	mov	r1, r8
 8100854:	4648      	mov	r0, r9
 8100856:	f003 fbfd 	bl	8104054 <memcpy>
 810085a:	eb09 0204 	add.w	r2, r9, r4
		*out_ptr = 0;
 810085e:	2300      	movs	r3, #0
 8100860:	7013      	strb	r3, [r2, #0]
 8100862:	e772      	b.n	810074a <_ZN10NumConvert15to_string_floatEfPc+0x2e>
		std::uint_fast8_t fractDigits = digits > intDigits ? digits - intDigits : 0;
 8100864:	f04f 0a00 	mov.w	sl, #0
 8100868:	e79b      	b.n	81007a2 <_ZN10NumConvert15to_string_floatEfPc+0x86>
 810086a:	4605      	mov	r5, r0
			exp10 = 0;
 810086c:	4680      	mov	r8, r0
			*out_ptr++ = '0';
 810086e:	4632      	mov	r2, r6
 8100870:	2330      	movs	r3, #48	; 0x30
 8100872:	f802 3b01 	strb.w	r3, [r2], #1
 8100876:	e7b1      	b.n	81007dc <_ZN10NumConvert15to_string_floatEfPc+0xc0>
			intDigits = 1;
 8100878:	2301      	movs	r3, #1
 810087a:	e786      	b.n	810078a <_ZN10NumConvert15to_string_floatEfPc+0x6e>

0810087c <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIcEERS5_T_>:

      // Forward iterator requirements
      _GLIBCXX20_CONSTEXPR
      reference
      operator*() const _GLIBCXX_NOEXCEPT
      { return *_M_current; }
 810087c:	6882      	ldr	r2, [r0, #8]

			bus.send(&c, index_t{1});

		} else {

			*it = c;
 810087e:	7011      	strb	r1, [r2, #0]

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
 8100880:	6882      	ldr	r2, [r0, #8]
 8100882:	3201      	adds	r2, #1
			it = std::next(it);
 8100884:	6082      	str	r2, [r0, #8]
		}

		return *this;
	}
 8100886:	4770      	bx	lr

08100888 <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIfEERS5_T_>:

	stream_t& operator << (const std::floating_point auto f){
 8100888:	b513      	push	{r0, r1, r4, lr}
 810088a:	4604      	mov	r4, r0

			bus.send(ptr, cnt);

		} else {

			auto [ptr, cnt] = NumConvert::to_string_float(f, buffer.data() + std::distance(buffer.begin(), it));
 810088c:	6881      	ldr	r1, [r0, #8]
 810088e:	4668      	mov	r0, sp
 8100890:	f7ff ff44 	bl	810071c <_ZN10NumConvert15to_string_floatEfPc>
      { return _M_current[__n]; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }
 8100894:	68a3      	ldr	r3, [r4, #8]
 8100896:	9a01      	ldr	r2, [sp, #4]

			it = std::next(it, cnt);
		}

		return *this;
	}
 8100898:	4620      	mov	r0, r4
 810089a:	4413      	add	r3, r2
			it = std::next(it, cnt);
 810089c:	60a3      	str	r3, [r4, #8]
	}
 810089e:	b002      	add	sp, #8
 81008a0:	bd10      	pop	{r4, pc}

081008a2 <_ZSt4prevIN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLj4294967295EEEEET_S6_NSt15iterator_traitsIS6_E15difference_typeE>:
      // concept requirements
      __glibcxx_function_requires(_BidirectionalIteratorConcept<
				  _BidirectionalIterator>)
      std::advance(__x, -__n);
      return __x;
    }
 81008a2:	1a40      	subs	r0, r0, r1
 81008a4:	4770      	bx	lr
	...

081008a8 <test>:

#include "bm_stream.hpp"


extern "C"
void test (void){
 81008a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81008ac:	b08d      	sub	sp, #52	; 0x34
      class __extent_storage<dynamic_extent>
      {
      public:
	constexpr
	__extent_storage(size_t __extent) noexcept
	: _M_extent_value(__extent)
 81008ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 81008b2:	9308      	str	r3, [sp, #32]

	StreamUartDma cout;

	float raw[] = {3.1416, 2.7183, 1.618};
 81008b4:	4b66      	ldr	r3, [pc, #408]	; (8100a50 <test+0x1a8>)
      template<contiguous_iterator _It>
	requires __is_compatible_ref<iter_reference_t<_It>>::value
	constexpr explicit(extent != dynamic_extent)
	span(_It __first, size_type __count)
	noexcept
	: _M_extent(__count), _M_ptr(std::to_address(__first))
 81008b6:	4e67      	ldr	r6, [pc, #412]	; (8100a54 <test+0x1ac>)
 81008b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81008bc:	ac02      	add	r4, sp, #8
	std::array<int, 3> arr{123, 456, 789};
 81008be:	330c      	adds	r3, #12
	float raw[] = {3.1416, 2.7183, 1.618};
 81008c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	std::array<int, 3> arr{123, 456, 789};
 81008c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
		*out_ptr = 0;
 81008c8:	4637      	mov	r7, r6
 81008ca:	2300      	movs	r3, #0
	StreamBase() = default;
 81008cc:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
 81008d0:	ad05      	add	r5, sp, #20
 81008d2:	f807 3fff 	strb.w	r3, [r7, #255]!
 81008d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		res.quot = value;
 81008da:	f240 71e5 	movw	r1, #2021	; 0x7e5
			res = divmodu10(res.quot);
 81008de:	4668      	mov	r0, sp
 81008e0:	f7ff fe84 	bl	81005ec <_ZN10NumConvert9divmodu10ImEE10divmod10_tIT_ERKS2_.isra.0>
			*--out_ptr = res.rem + '0';
 81008e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
			res = divmodu10(res.quot);
 81008e8:	9900      	ldr	r1, [sp, #0]
			*--out_ptr = res.rem + '0';
 81008ea:	3330      	adds	r3, #48	; 0x30
 81008ec:	f807 3d01 	strb.w	r3, [r7, #-1]!
		}while (res.quot);
 81008f0:	2900      	cmp	r1, #0
 81008f2:	d1f4      	bne.n	81008de <test+0x36>
		return {out_ptr, strlen(out_ptr)};
 81008f4:	4638      	mov	r0, r7
 81008f6:	f7ff fcef 	bl	81002d8 <strlen>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 81008fa:	4f57      	ldr	r7, [pc, #348]	; (8100a58 <test+0x1b0>)

			bus.send(ptr, cnt);

		} else {

			auto src = std::prev(buffer.end(), cnt + 1);
 81008fc:	1c41      	adds	r1, r0, #1
 81008fe:	4638      	mov	r0, r7
 8100900:	f7ff ffcf 	bl	81008a2 <_ZSt4prevIN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLj4294967295EEEEET_S6_NSt15iterator_traitsIS6_E15difference_typeE>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8100904:	ebb7 0800 	subs.w	r8, r7, r0
 8100908:	4601      	mov	r1, r0
 810090a:	d004      	beq.n	8100916 <test+0x6e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 810090c:	4642      	mov	r2, r8
 810090e:	f5a7 7080 	sub.w	r0, r7, #256	; 0x100
 8100912:	f003 fbad 	bl	8104070 <memmove>
	  return __result + _Num;
 8100916:	4446      	add	r6, r8

	cout << base_t{2021}    << '\n'
 8100918:	210a      	movs	r1, #10
 810091a:	a808      	add	r0, sp, #32

			it = std::copy(src, buffer.end(), it);
 810091c:	960a      	str	r6, [sp, #40]	; 0x28
 810091e:	f7ff ffad 	bl	810087c <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIcEERS5_T_>
	     << float{9.806}    << '\n'
 8100922:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8100a5c <test+0x1b4>
 8100926:	f7ff ffaf 	bl	8100888 <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIfEERS5_T_>
 810092a:	210a      	movs	r1, #10
 810092c:	f7ff ffa6 	bl	810087c <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIcEERS5_T_>
 8100930:	2603      	movs	r6, #3
 8100932:	4680      	mov	r8, r0
		*out_ptr = 0;
 8100934:	2700      	movs	r7, #0

      constexpr reference
      back() const noexcept
      {
	__glibcxx_assert(!empty());
	return *(this->_M_ptr + (size() - 1));
 8100936:	f8d8 3000 	ldr.w	r3, [r8]
 810093a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810093e:	f855 2b04 	ldr.w	r2, [r5], #4
 8100942:	3b01      	subs	r3, #1
 8100944:	18c8      	adds	r0, r1, r3
 8100946:	54cf      	strb	r7, [r1, r3]
		res.quot += res.quot >> 1;
 8100948:	1093      	asrs	r3, r2, #2
 810094a:	eb03 0362 	add.w	r3, r3, r2, asr #1
		res.quot += res.quot >> 4;
 810094e:	eb03 1323 	add.w	r3, r3, r3, asr #4
			res.quot += res.quot >> 8;
 8100952:	eb03 2323 	add.w	r3, r3, r3, asr #8
			res.quot += res.quot >> 16;
 8100956:	eb03 4323 	add.w	r3, r3, r3, asr #16
		res.quot >>= 3;
 810095a:	10d9      	asrs	r1, r3, #3
		res.rem = std::uint8_t(n - ((res.quot << 1) + (qq & ~std::uint32_t{7})));
 810095c:	f023 0307 	bic.w	r3, r3, #7
 8100960:	1ad3      	subs	r3, r2, r3
 8100962:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8100966:	b2db      	uxtb	r3, r3
		if(res.rem > 9)
 8100968:	2b09      	cmp	r3, #9
			res.rem -= 10;
 810096a:	bf84      	itt	hi
 810096c:	3b0a      	subhi	r3, #10
 810096e:	b2db      	uxtbhi	r3, r3
			*--out_ptr = res.rem + '0';
 8100970:	f103 0330 	add.w	r3, r3, #48	; 0x30
			res.quot++;
 8100974:	bf8c      	ite	hi
 8100976:	1c4a      	addhi	r2, r1, #1
		res.quot >>= 3;
 8100978:	460a      	movls	r2, r1
			*--out_ptr = res.rem + '0';
 810097a:	f800 3d01 	strb.w	r3, [r0, #-1]!
		}while (res.quot);
 810097e:	2a00      	cmp	r2, #0
 8100980:	d1e2      	bne.n	8100948 <test+0xa0>
		return {out_ptr, strlen(out_ptr)};
 8100982:	f7ff fca9 	bl	81002d8 <strlen>
      begin() const noexcept
      { return iterator(this->_M_ptr); }

      constexpr iterator
      end() const noexcept
      { return iterator(this->_M_ptr + this->size()); }
 8100986:	e9d8 3200 	ldrd	r3, r2, [r8]
 810098a:	eb02 0903 	add.w	r9, r2, r3
			auto src = std::prev(buffer.end(), cnt + 1);
 810098e:	1c41      	adds	r1, r0, #1
 8100990:	4648      	mov	r0, r9
 8100992:	f7ff ff86 	bl	81008a2 <_ZSt4prevIN9__gnu_cxx17__normal_iteratorIPcSt4spanIcLj4294967295EEEEET_S6_NSt15iterator_traitsIS6_E15difference_typeE>
	  if (_Num)
 8100996:	ebb9 0900 	subs.w	r9, r9, r0
 810099a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810099e:	4601      	mov	r1, r0
 81009a0:	d004      	beq.n	81009ac <test+0x104>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 81009a2:	4618      	mov	r0, r3
 81009a4:	464a      	mov	r2, r9
 81009a6:	f003 fb63 	bl	8104070 <memmove>
 81009aa:	4603      	mov	r3, r0
	  return __result + _Num;
 81009ac:	444b      	add	r3, r9
			it = std::copy(src, buffer.end(), it);
 81009ae:	f8c8 3008 	str.w	r3, [r8, #8]

			std::ranges::for_each(r, [this](const auto val){ *this << val; } );

		} else if (num_type<arg_type> || std::floating_point<arg_type>) {

			std::ranges::for_each(r, [this](const auto val){ *this << val << Delim; } );
 81009b2:	2120      	movs	r1, #32
 81009b4:	4640      	mov	r0, r8
 81009b6:	f7ff ff61 	bl	810087c <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIcEERS5_T_>
	     typename _Proj = identity,
	     indirectly_unary_invocable<projected<_Iter, _Proj>> _Fun>
      constexpr for_each_result<_Iter, _Fun>
      operator()(_Iter __first, _Sent __last, _Fun __f, _Proj __proj = {}) const
      {
	for (; __first != __last; ++__first)
 81009ba:	3e01      	subs	r6, #1
 81009bc:	d1bb      	bne.n	8100936 <test+0x8e>
	     << arr             << '\n'
 81009be:	210a      	movs	r1, #10
 81009c0:	4640      	mov	r0, r8
 81009c2:	f7ff ff5b 	bl	810087c <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIcEERS5_T_>
 81009c6:	2603      	movs	r6, #3
 81009c8:	4605      	mov	r5, r0
 81009ca:	ecb4 0a01 	vldmia	r4!, {s0}
 81009ce:	4628      	mov	r0, r5
 81009d0:	f7ff ff5a 	bl	8100888 <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIfEERS5_T_>
 81009d4:	2120      	movs	r1, #32
 81009d6:	f7ff ff51 	bl	810087c <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIcEERS5_T_>
 81009da:	3e01      	subs	r6, #1
 81009dc:	d1f5      	bne.n	81009ca <test+0x122>
	     << raw             << '\n'
 81009de:	4628      	mov	r0, r5
 81009e0:	210a      	movs	r1, #10
 81009e2:	f7ff ff4b 	bl	810087c <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIcEERS5_T_>
 81009e6:	4e1e      	ldr	r6, [pc, #120]	; (8100a60 <test+0x1b8>)
 81009e8:	4604      	mov	r4, r0
 81009ea:	250d      	movs	r5, #13
			std::ranges::for_each(r, [this](const auto val){ *this << val; } );
 81009ec:	f816 1b01 	ldrb.w	r1, [r6], #1
 81009f0:	4620      	mov	r0, r4
 81009f2:	f7ff ff43 	bl	810087c <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIcEERS5_T_>
 81009f6:	3d01      	subs	r5, #1
 81009f8:	d1f8      	bne.n	81009ec <test+0x144>
	     << "Hello, Habr!"  << '\n'
 81009fa:	4620      	mov	r0, r4
 81009fc:	210a      	movs	r1, #10
 81009fe:	f7ff ff3d 	bl	810087c <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIcEERS5_T_>
 8100a02:	4e18      	ldr	r6, [pc, #96]	; (8100a64 <test+0x1bc>)
 8100a04:	4604      	mov	r4, r0
 8100a06:	2507      	movs	r5, #7
 8100a08:	3d01      	subs	r5, #1
 8100a0a:	d304      	bcc.n	8100a16 <test+0x16e>
 8100a0c:	5d71      	ldrb	r1, [r6, r5]
 8100a0e:	4620      	mov	r0, r4
 8100a10:	f7ff ff34 	bl	810087c <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIcEERS5_T_>
	return *this;
 8100a14:	e7f8      	b.n	8100a08 <test+0x160>
	     << ("esreveR me!" | std::views::take(7) | std::views::reverse ) << '\n'
 8100a16:	4620      	mov	r0, r4
 8100a18:	210a      	movs	r1, #10
 8100a1a:	f7ff ff2f 	bl	810087c <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIcEERS5_T_>
 8100a1e:	4e12      	ldr	r6, [pc, #72]	; (8100a68 <test+0x1c0>)
 8100a20:	4605      	mov	r5, r0
 8100a22:	2416      	movs	r4, #22
 8100a24:	f816 1b01 	ldrb.w	r1, [r6], #1
 8100a28:	4628      	mov	r0, r5
 8100a2a:	f7ff ff27 	bl	810087c <_ZN10StreamBaseI12BusInterfaceI4UartIL7BusMode2EEELc32EElsIcEERS5_T_>
 8100a2e:	3c01      	subs	r4, #1
 8100a30:	d1f8      	bne.n	8100a24 <test+0x17c>

	void send_dma (const char arr[], const index_t num) noexcept {

		HAL_StatusTypeDef res{HAL_ERROR};

		if ( UartIrq::test(IrqMask::transmit) ) {
 8100a32:	2001      	movs	r0, #1
 8100a34:	e9dd 5409 	ldrd	r5, r4, [sp, #36]	; 0x24
 8100a38:	f000 f81a 	bl	8100a70 <_ZN7UartIrq4testE7IrqMask>
 8100a3c:	b128      	cbz	r0, 8100a4a <test+0x1a2>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8100a3e:	1b62      	subs	r2, r4, r5

			res = HAL_UART_Transmit_DMA(
 8100a40:	480a      	ldr	r0, [pc, #40]	; (8100a6c <test+0x1c4>)
 8100a42:	b292      	uxth	r2, r2
 8100a44:	4629      	mov	r1, r5
 8100a46:	f002 fd85 	bl	8103554 <HAL_UART_Transmit_DMA>
		 << "--------------------\n";
}
 8100a4a:	b00d      	add	sp, #52	; 0x34
 8100a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8100a50:	081040cc 	.word	0x081040cc
 8100a54:	38000000 	.word	0x38000000
 8100a58:	38000100 	.word	0x38000100
 8100a5c:	411ce560 	.word	0x411ce560
 8100a60:	081040e4 	.word	0x081040e4
 8100a64:	08104107 	.word	0x08104107
 8100a68:	081040f1 	.word	0x081040f1
 8100a6c:	100000a8 	.word	0x100000a8

08100a70 <_ZN7UartIrq4testE7IrqMask>:
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 8100a70:	4b0a      	ldr	r3, [pc, #40]	; (8100a9c <_ZN7UartIrq4testE7IrqMask+0x2c>)
 8100a72:	f3bf 8f5b 	dmb	ish
 8100a76:	681a      	ldr	r2, [r3, #0]
 8100a78:	f3bf 8f5b 	dmb	ish
base_t UartIrq::test (IrqMask m){

	base_t mask = base_t(m);
	base_t res = flag.load();

	if (res & mask) [[likely]] flag.fetch_xor(mask);
 8100a7c:	4210      	tst	r0, r2
 8100a7e:	d00b      	beq.n	8100a98 <_ZN7UartIrq4testE7IrqMask+0x28>
      { return __atomic_fetch_or(&_M_i, __i, int(__m)); }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_xor(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_xor(&_M_i, __i, int(__m)); }
 8100a80:	f3bf 8f5b 	dmb	ish
 8100a84:	e853 1f00 	ldrex	r1, [r3]
 8100a88:	4041      	eors	r1, r0
 8100a8a:	e843 1c00 	strex	ip, r1, [r3]
 8100a8e:	f1bc 0f00 	cmp.w	ip, #0
 8100a92:	d1f7      	bne.n	8100a84 <_ZN7UartIrq4testE7IrqMask+0x14>
 8100a94:	f3bf 8f5b 	dmb	ish

	return res;
}
 8100a98:	4610      	mov	r0, r2
 8100a9a:	4770      	bx	lr
 8100a9c:	10000000 	.word	0x10000000

08100aa0 <HAL_UART_TxCpltCallback>:
      { return __atomic_fetch_or(&_M_i, __i, int(__m)); }
 8100aa0:	4b06      	ldr	r3, [pc, #24]	; (8100abc <HAL_UART_TxCpltCallback+0x1c>)
 8100aa2:	f3bf 8f5b 	dmb	ish
 8100aa6:	e853 2f00 	ldrex	r2, [r3]
 8100aaa:	f042 0201 	orr.w	r2, r2, #1
 8100aae:	e843 2100 	strex	r1, r2, [r3]
 8100ab2:	2900      	cmp	r1, #0
 8100ab4:	d1f7      	bne.n	8100aa6 <HAL_UART_TxCpltCallback+0x6>
 8100ab6:	f3bf 8f5b 	dmb	ish
  flag.fetch_or( base_t(IrqMask::transmit) );

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8100aba:	4770      	bx	lr
 8100abc:	10000000 	.word	0x10000000

08100ac0 <HAL_UART_TxHalfCpltCallback>:
 8100ac0:	4b06      	ldr	r3, [pc, #24]	; (8100adc <HAL_UART_TxHalfCpltCallback+0x1c>)
 8100ac2:	f3bf 8f5b 	dmb	ish
 8100ac6:	e853 2f00 	ldrex	r2, [r3]
 8100aca:	f042 0202 	orr.w	r2, r2, #2
 8100ace:	e843 2100 	strex	r1, r2, [r3]
 8100ad2:	2900      	cmp	r1, #0
 8100ad4:	d1f7      	bne.n	8100ac6 <HAL_UART_TxHalfCpltCallback+0x6>
 8100ad6:	f3bf 8f5b 	dmb	ish
  flag.fetch_or( base_t(IrqMask::half_transmit) );

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8100ada:	4770      	bx	lr
 8100adc:	10000000 	.word	0x10000000

08100ae0 <HAL_UART_ErrorCallback>:


  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8100ae0:	4770      	bx	lr
	...

08100ae4 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100ae4:	4b07      	ldr	r3, [pc, #28]	; (8100b04 <SystemInit+0x20>)
 8100ae6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8100aea:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8100aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100af2:	691a      	ldr	r2, [r3, #16]
 8100af4:	f042 0210 	orr.w	r2, r2, #16
 8100af8:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100afa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100afe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100b00:	4770      	bx	lr
 8100b02:	bf00      	nop
 8100b04:	e000ed00 	.word	0xe000ed00

08100b08 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100b08:	4b0c      	ldr	r3, [pc, #48]	; (8100b3c <MX_DMA_Init+0x34>)
{
 8100b0a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100b0c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8100b10:	f042 0201 	orr.w	r2, r2, #1
 8100b14:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8100b18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100b1c:	f003 0301 	and.w	r3, r3, #1
 8100b20:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 14, 0);
 8100b22:	2200      	movs	r2, #0
 8100b24:	210e      	movs	r1, #14
 8100b26:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100b28:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 14, 0);
 8100b2a:	f000 f9fb 	bl	8100f24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8100b2e:	200b      	movs	r0, #11

}
 8100b30:	b003      	add	sp, #12
 8100b32:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8100b36:	f000 ba27 	b.w	8100f88 <HAL_NVIC_EnableIRQ>
 8100b3a:	bf00      	nop
 8100b3c:	58024400 	.word	0x58024400

08100b40 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100b40:	4b07      	ldr	r3, [pc, #28]	; (8100b60 <MX_GPIO_Init+0x20>)
 8100b42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8100b46:	f042 0208 	orr.w	r2, r2, #8
 8100b4a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8100b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
{
 8100b52:	b082      	sub	sp, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100b54:	f003 0308 	and.w	r3, r3, #8
 8100b58:	9301      	str	r3, [sp, #4]
 8100b5a:	9b01      	ldr	r3, [sp, #4]

}
 8100b5c:	b002      	add	sp, #8
 8100b5e:	4770      	bx	lr
 8100b60:	58024400 	.word	0x58024400

08100b64 <main>:

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100b64:	4b1d      	ldr	r3, [pc, #116]	; (8100bdc <main+0x78>)
{
 8100b66:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100b68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8100b6c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8100b70:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8100b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b7c:	2001      	movs	r0, #1
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100b7e:	9301      	str	r3, [sp, #4]
 8100b80:	9b01      	ldr	r3, [sp, #4]
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b82:	f001 fc8d 	bl	81024a0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100b86:	f001 fcd5 	bl	8102534 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100b8a:	2201      	movs	r2, #1
 8100b8c:	2102      	movs	r1, #2
 8100b8e:	2000      	movs	r0, #0
 8100b90:	f001 fc8e 	bl	81024b0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b94:	4b12      	ldr	r3, [pc, #72]	; (8100be0 <main+0x7c>)
 8100b96:	681b      	ldr	r3, [r3, #0]
 8100b98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8100b9c:	2b07      	cmp	r3, #7
 8100b9e:	4b11      	ldr	r3, [pc, #68]	; (8100be4 <main+0x80>)
 8100ba0:	bf0b      	itete	eq
 8100ba2:	f8d3 2104 	ldreq.w	r2, [r3, #260]	; 0x104
 8100ba6:	f8d3 2114 	ldrne.w	r2, [r3, #276]	; 0x114
 8100baa:	f042 0201 	orreq.w	r2, r2, #1
 8100bae:	f042 0201 	orrne.w	r2, r2, #1
 8100bb2:	bf0c      	ite	eq
 8100bb4:	f8c3 2104 	streq.w	r2, [r3, #260]	; 0x104
 8100bb8:	f8c3 2114 	strne.w	r2, [r3, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100bbc:	f000 f92c 	bl	8100e18 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100bc0:	f7ff ffbe 	bl	8100b40 <MX_GPIO_Init>
  MX_DMA_Init();
 8100bc4:	f7ff ffa0 	bl	8100b08 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8100bc8:	f000 f838 	bl	8100c3c <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(3000);
 8100bcc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8100bd0:	f000 f982 	bl	8100ed8 <HAL_Delay>
	  test();
 8100bd4:	f7ff fe68 	bl	81008a8 <test>
  while (1)
 8100bd8:	e7f8      	b.n	8100bcc <main+0x68>
 8100bda:	bf00      	nop
 8100bdc:	58024400 	.word	0x58024400
 8100be0:	e000ed00 	.word	0xe000ed00
 8100be4:	58026400 	.word	0x58026400

08100be8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100be8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100bea:	e7fe      	b.n	8100bea <Error_Handler+0x2>

08100bec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100bec:	4b07      	ldr	r3, [pc, #28]	; (8100c0c <HAL_MspInit+0x20>)
 8100bee:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8100bf2:	f042 0202 	orr.w	r2, r2, #2
 8100bf6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8100bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
{
 8100bfe:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100c00:	f003 0302 	and.w	r3, r3, #2
 8100c04:	9301      	str	r3, [sp, #4]
 8100c06:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100c08:	b002      	add	sp, #8
 8100c0a:	4770      	bx	lr
 8100c0c:	58024400 	.word	0x58024400

08100c10 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100c10:	e7fe      	b.n	8100c10 <NMI_Handler>

08100c12 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100c12:	e7fe      	b.n	8100c12 <HardFault_Handler>

08100c14 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100c14:	e7fe      	b.n	8100c14 <MemManage_Handler>

08100c16 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100c16:	e7fe      	b.n	8100c16 <BusFault_Handler>

08100c18 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100c18:	e7fe      	b.n	8100c18 <UsageFault_Handler>

08100c1a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100c1a:	4770      	bx	lr

08100c1c <DebugMon_Handler>:
 8100c1c:	4770      	bx	lr

08100c1e <PendSV_Handler>:
 8100c1e:	4770      	bx	lr

08100c20 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100c20:	f000 b948 	b.w	8100eb4 <HAL_IncTick>

08100c24 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8100c24:	4801      	ldr	r0, [pc, #4]	; (8100c2c <DMA1_Stream0_IRQHandler+0x8>)
 8100c26:	f001 b8a9 	b.w	8101d7c <HAL_DMA_IRQHandler>
 8100c2a:	bf00      	nop
 8100c2c:	10000030 	.word	0x10000030

08100c30 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8100c30:	4801      	ldr	r0, [pc, #4]	; (8100c38 <USART3_IRQHandler+0x8>)
 8100c32:	f002 bd2d 	b.w	8103690 <HAL_UART_IRQHandler>
 8100c36:	bf00      	nop
 8100c38:	100000a8 	.word	0x100000a8

08100c3c <MX_USART3_UART_Init>:
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100c3c:	4816      	ldr	r0, [pc, #88]	; (8100c98 <MX_USART3_UART_Init+0x5c>)
  huart3.Init.BaudRate = 115200;
 8100c3e:	4a17      	ldr	r2, [pc, #92]	; (8100c9c <MX_USART3_UART_Init+0x60>)
{
 8100c40:	b508      	push	{r3, lr}
  huart3.Init.BaudRate = 115200;
 8100c42:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8100c46:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100c4a:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100c4c:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100c4e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100c52:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100c56:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100c5a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart3.Init.Parity = UART_PARITY_NONE;
 8100c5e:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100c60:	f003 f91b 	bl	8103e9a <HAL_UART_Init>
 8100c64:	b108      	cbz	r0, 8100c6a <MX_USART3_UART_Init+0x2e>
  {
    Error_Handler();
 8100c66:	f7ff ffbf 	bl	8100be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100c6a:	480b      	ldr	r0, [pc, #44]	; (8100c98 <MX_USART3_UART_Init+0x5c>)
 8100c6c:	2100      	movs	r1, #0
 8100c6e:	f003 f985 	bl	8103f7c <HAL_UARTEx_SetTxFifoThreshold>
 8100c72:	b108      	cbz	r0, 8100c78 <MX_USART3_UART_Init+0x3c>
  {
    Error_Handler();
 8100c74:	f7ff ffb8 	bl	8100be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100c78:	4807      	ldr	r0, [pc, #28]	; (8100c98 <MX_USART3_UART_Init+0x5c>)
 8100c7a:	2100      	movs	r1, #0
 8100c7c:	f003 f9a2 	bl	8103fc4 <HAL_UARTEx_SetRxFifoThreshold>
 8100c80:	b108      	cbz	r0, 8100c86 <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
 8100c82:	f7ff ffb1 	bl	8100be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100c86:	4804      	ldr	r0, [pc, #16]	; (8100c98 <MX_USART3_UART_Init+0x5c>)
 8100c88:	f003 f95d 	bl	8103f46 <HAL_UARTEx_DisableFifoMode>
 8100c8c:	b118      	cbz	r0, 8100c96 <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8100c92:	f7ff bfa9 	b.w	8100be8 <Error_Handler>
}
 8100c96:	bd08      	pop	{r3, pc}
 8100c98:	100000a8 	.word	0x100000a8
 8100c9c:	40004800 	.word	0x40004800

08100ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8100ca0:	b570      	push	{r4, r5, r6, lr}
 8100ca2:	b0b6      	sub	sp, #216	; 0xd8
 8100ca4:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ca6:	2214      	movs	r2, #20
 8100ca8:	2100      	movs	r1, #0
 8100caa:	a802      	add	r0, sp, #8
 8100cac:	f003 f9fa 	bl	81040a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100cb0:	22bc      	movs	r2, #188	; 0xbc
 8100cb2:	2100      	movs	r1, #0
 8100cb4:	a807      	add	r0, sp, #28
 8100cb6:	f003 f9f5 	bl	81040a4 <memset>
  if(uartHandle->Instance==USART3)
 8100cba:	6832      	ldr	r2, [r6, #0]
 8100cbc:	4b29      	ldr	r3, [pc, #164]	; (8100d64 <HAL_UART_MspInit+0xc4>)
 8100cbe:	429a      	cmp	r2, r3
 8100cc0:	d14e      	bne.n	8100d60 <HAL_UART_MspInit+0xc0>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100cc2:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100cc4:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100cc6:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100cc8:	f001 fe12 	bl	81028f0 <HAL_RCCEx_PeriphCLKConfig>
 8100ccc:	b108      	cbz	r0, 8100cd2 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8100cce:	f7ff ff8b 	bl	8100be8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100cd2:	4b25      	ldr	r3, [pc, #148]	; (8100d68 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100cd4:	4825      	ldr	r0, [pc, #148]	; (8100d6c <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8100cd6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8100cda:	4c25      	ldr	r4, [pc, #148]	; (8100d70 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8100cdc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8100ce0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8100ce4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8100ce8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8100cec:	9200      	str	r2, [sp, #0]
 8100cee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100cf0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8100cf4:	f042 0208 	orr.w	r2, r2, #8
 8100cf8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8100cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d00:	f003 0308 	and.w	r3, r3, #8
 8100d04:	9301      	str	r3, [sp, #4]
 8100d06:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d08:	f44f 7240 	mov.w	r2, #768	; 0x300
 8100d0c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d0e:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d10:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100d14:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100d16:	2307      	movs	r3, #7
 8100d18:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100d1e:	f001 fad5 	bl	81022cc <HAL_GPIO_Init>
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8100d22:	4914      	ldr	r1, [pc, #80]	; (8100d74 <HAL_UART_MspInit+0xd4>)
 8100d24:	232e      	movs	r3, #46	; 0x2e
 8100d26:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8100d2a:	2340      	movs	r3, #64	; 0x40
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8100d2c:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8100d30:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8100d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8100d36:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8100d3a:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8100d3e:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8100d42:	f000 fadd 	bl	8101300 <HAL_DMA_Init>
 8100d46:	b108      	cbz	r0, 8100d4c <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8100d48:	f7ff ff4e 	bl	8100be8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 8100d4c:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8100d4e:	67b4      	str	r4, [r6, #120]	; 0x78
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 8100d50:	2200      	movs	r2, #0
 8100d52:	210f      	movs	r1, #15
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8100d54:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 8100d56:	f000 f8e5 	bl	8100f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8100d5a:	2027      	movs	r0, #39	; 0x27
 8100d5c:	f000 f914 	bl	8100f88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8100d60:	b036      	add	sp, #216	; 0xd8
 8100d62:	bd70      	pop	{r4, r5, r6, pc}
 8100d64:	40004800 	.word	0x40004800
 8100d68:	58024400 	.word	0x58024400
 8100d6c:	58020c00 	.word	0x58020c00
 8100d70:	10000030 	.word	0x10000030
 8100d74:	40020010 	.word	0x40020010

08100d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100db0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100d7c:	f7ff feb2 	bl	8100ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100d80:	480c      	ldr	r0, [pc, #48]	; (8100db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100d82:	490d      	ldr	r1, [pc, #52]	; (8100db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100d84:	4a0d      	ldr	r2, [pc, #52]	; (8100dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100d88:	e002      	b.n	8100d90 <LoopCopyDataInit>

08100d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100d8e:	3304      	adds	r3, #4

08100d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100d94:	d3f9      	bcc.n	8100d8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100d96:	4a0a      	ldr	r2, [pc, #40]	; (8100dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100d98:	4c0a      	ldr	r4, [pc, #40]	; (8100dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100d9c:	e001      	b.n	8100da2 <LoopFillZerobss>

08100d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100da0:	3204      	adds	r2, #4

08100da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100da4:	d3fb      	bcc.n	8100d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100da6:	f003 f931 	bl	810400c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100daa:	f7ff fedb 	bl	8100b64 <main>
  bx  lr
 8100dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100db0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100db4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100db8:	10000014 	.word	0x10000014
  ldr r2, =_sidata
 8100dbc:	0810421c 	.word	0x0810421c
  ldr r2, =_sbss
 8100dc0:	10000014 	.word	0x10000014
  ldr r4, =_ebss
 8100dc4:	1000013c 	.word	0x1000013c

08100dc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100dc8:	e7fe      	b.n	8100dc8 <ADC3_IRQHandler>
	...

08100dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100dcc:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100dce:	4b0f      	ldr	r3, [pc, #60]	; (8100e0c <HAL_InitTick+0x40>)
{
 8100dd0:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8100dd2:	7818      	ldrb	r0, [r3, #0]
 8100dd4:	b908      	cbnz	r0, 8100dda <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8100dd6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8100dd8:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100dda:	4a0d      	ldr	r2, [pc, #52]	; (8100e10 <HAL_InitTick+0x44>)
 8100ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100de0:	fbb3 f3f0 	udiv	r3, r3, r0
 8100de4:	6810      	ldr	r0, [r2, #0]
 8100de6:	fbb0 f0f3 	udiv	r0, r0, r3
 8100dea:	f000 f8db 	bl	8100fa4 <HAL_SYSTICK_Config>
 8100dee:	4604      	mov	r4, r0
 8100df0:	2800      	cmp	r0, #0
 8100df2:	d1f0      	bne.n	8100dd6 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100df4:	2d0f      	cmp	r5, #15
 8100df6:	d8ee      	bhi.n	8100dd6 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100df8:	4602      	mov	r2, r0
 8100dfa:	4629      	mov	r1, r5
 8100dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8100e00:	f000 f890 	bl	8100f24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100e04:	4b03      	ldr	r3, [pc, #12]	; (8100e14 <HAL_InitTick+0x48>)
 8100e06:	4620      	mov	r0, r4
 8100e08:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8100e0a:	e7e5      	b.n	8100dd8 <HAL_InitTick+0xc>
 8100e0c:	1000000c 	.word	0x1000000c
 8100e10:	10000004 	.word	0x10000004
 8100e14:	10000010 	.word	0x10000010

08100e18 <HAL_Init>:
{
 8100e18:	b513      	push	{r0, r1, r4, lr}
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100e1a:	4c21      	ldr	r4, [pc, #132]	; (8100ea0 <HAL_Init+0x88>)
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100e1c:	4a21      	ldr	r2, [pc, #132]	; (8100ea4 <HAL_Init+0x8c>)
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100e1e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8100e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100e26:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8100e2a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8100e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100e32:	9301      	str	r3, [sp, #4]
 8100e34:	9b01      	ldr	r3, [sp, #4]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100e36:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8100e3a:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100e3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100e42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100e46:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100e4a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8100e4e:	f043 0301 	orr.w	r3, r3, #1
 8100e52:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100e56:	2003      	movs	r0, #3
 8100e58:	f000 f852 	bl	8100f00 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100e5c:	f001 fb74 	bl	8102548 <HAL_RCC_GetSysClockFreq>
 8100e60:	69a2      	ldr	r2, [r4, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100e62:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100e64:	4910      	ldr	r1, [pc, #64]	; (8100ea8 <HAL_Init+0x90>)
 8100e66:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100e6a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100e6e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100e70:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100e72:	f002 021f 	and.w	r2, r2, #31
 8100e76:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100e78:	f003 031f 	and.w	r3, r3, #31
 8100e7c:	40d8      	lsrs	r0, r3
 8100e7e:	4b0b      	ldr	r3, [pc, #44]	; (8100eac <HAL_Init+0x94>)
 8100e80:	6018      	str	r0, [r3, #0]
  SystemCoreClock = SystemD2Clock;
 8100e82:	4b0b      	ldr	r3, [pc, #44]	; (8100eb0 <HAL_Init+0x98>)
 8100e84:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100e86:	2000      	movs	r0, #0
 8100e88:	f7ff ffa0 	bl	8100dcc <HAL_InitTick>
 8100e8c:	4604      	mov	r4, r0
 8100e8e:	b920      	cbnz	r0, 8100e9a <HAL_Init+0x82>
  HAL_MspInit();
 8100e90:	f7ff feac 	bl	8100bec <HAL_MspInit>
}
 8100e94:	4620      	mov	r0, r4
 8100e96:	b002      	add	sp, #8
 8100e98:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8100e9a:	2401      	movs	r4, #1
 8100e9c:	e7fa      	b.n	8100e94 <HAL_Init+0x7c>
 8100e9e:	bf00      	nop
 8100ea0:	58024400 	.word	0x58024400
 8100ea4:	40024000 	.word	0x40024000
 8100ea8:	08104194 	.word	0x08104194
 8100eac:	10000008 	.word	0x10000008
 8100eb0:	10000004 	.word	0x10000004

08100eb4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8100eb4:	4a03      	ldr	r2, [pc, #12]	; (8100ec4 <HAL_IncTick+0x10>)
 8100eb6:	4b04      	ldr	r3, [pc, #16]	; (8100ec8 <HAL_IncTick+0x14>)
 8100eb8:	6811      	ldr	r1, [r2, #0]
 8100eba:	781b      	ldrb	r3, [r3, #0]
 8100ebc:	440b      	add	r3, r1
 8100ebe:	6013      	str	r3, [r2, #0]
}
 8100ec0:	4770      	bx	lr
 8100ec2:	bf00      	nop
 8100ec4:	10000138 	.word	0x10000138
 8100ec8:	1000000c 	.word	0x1000000c

08100ecc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8100ecc:	4b01      	ldr	r3, [pc, #4]	; (8100ed4 <HAL_GetTick+0x8>)
 8100ece:	6818      	ldr	r0, [r3, #0]
}
 8100ed0:	4770      	bx	lr
 8100ed2:	bf00      	nop
 8100ed4:	10000138 	.word	0x10000138

08100ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100ed8:	b538      	push	{r3, r4, r5, lr}
 8100eda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8100edc:	f7ff fff6 	bl	8100ecc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100ee0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8100ee2:	bf1c      	itt	ne
 8100ee4:	4b05      	ldrne	r3, [pc, #20]	; (8100efc <HAL_Delay+0x24>)
 8100ee6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8100ee8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8100eea:	bf18      	it	ne
 8100eec:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100eee:	f7ff ffed 	bl	8100ecc <HAL_GetTick>
 8100ef2:	1b43      	subs	r3, r0, r5
 8100ef4:	42a3      	cmp	r3, r4
 8100ef6:	d3fa      	bcc.n	8100eee <HAL_Delay+0x16>
  {
  }
}
 8100ef8:	bd38      	pop	{r3, r4, r5, pc}
 8100efa:	bf00      	nop
 8100efc:	1000000c 	.word	0x1000000c

08100f00 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100f00:	4907      	ldr	r1, [pc, #28]	; (8100f20 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8100f02:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100f04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100f08:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100f0a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100f0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100f10:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8100f1c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8100f1e:	4770      	bx	lr
 8100f20:	e000ed00 	.word	0xe000ed00

08100f24 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100f24:	4b16      	ldr	r3, [pc, #88]	; (8100f80 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100f26:	b530      	push	{r4, r5, lr}
 8100f28:	68dc      	ldr	r4, [r3, #12]
 8100f2a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100f2e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100f32:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100f34:	2d04      	cmp	r5, #4
 8100f36:	bf28      	it	cs
 8100f38:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100f3a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100f3c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100f40:	bf8c      	ite	hi
 8100f42:	3c03      	subhi	r4, #3
 8100f44:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100f46:	fa03 f505 	lsl.w	r5, r3, r5
 8100f4a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100f4e:	40a3      	lsls	r3, r4
 8100f50:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100f54:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8100f56:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100f58:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100f5c:	bfac      	ite	ge
 8100f5e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100f62:	4a08      	ldrlt	r2, [pc, #32]	; (8100f84 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100f64:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100f68:	bfb8      	it	lt
 8100f6a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100f6e:	b2db      	uxtb	r3, r3
 8100f70:	bfaa      	itet	ge
 8100f72:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100f76:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100f78:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8100f7c:	bd30      	pop	{r4, r5, pc}
 8100f7e:	bf00      	nop
 8100f80:	e000ed00 	.word	0xe000ed00
 8100f84:	e000ed14 	.word	0xe000ed14

08100f88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8100f88:	2800      	cmp	r0, #0
 8100f8a:	db08      	blt.n	8100f9e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100f8c:	2301      	movs	r3, #1
 8100f8e:	0942      	lsrs	r2, r0, #5
 8100f90:	f000 001f 	and.w	r0, r0, #31
 8100f94:	fa03 f000 	lsl.w	r0, r3, r0
 8100f98:	4b01      	ldr	r3, [pc, #4]	; (8100fa0 <HAL_NVIC_EnableIRQ+0x18>)
 8100f9a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8100f9e:	4770      	bx	lr
 8100fa0:	e000e100 	.word	0xe000e100

08100fa4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100fa4:	3801      	subs	r0, #1
 8100fa6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8100faa:	d20b      	bcs.n	8100fc4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100fac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100fb0:	4a05      	ldr	r2, [pc, #20]	; (8100fc8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100fb2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100fb4:	21f0      	movs	r1, #240	; 0xf0
 8100fb6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100fba:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100fbc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100fbe:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100fc0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100fc2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8100fc4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8100fc6:	4770      	bx	lr
 8100fc8:	e000ed00 	.word	0xe000ed00

08100fcc <HAL_GetCurrentCPUID>:
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100fcc:	4b04      	ldr	r3, [pc, #16]	; (8100fe0 <HAL_GetCurrentCPUID+0x14>)
 8100fce:	681b      	ldr	r3, [r3, #0]
 8100fd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
  {
    return  CM7_CPUID;
  }
  else
  {
    return CM4_CPUID;
 8100fd4:	2b07      	cmp	r3, #7
  }
}
 8100fd6:	bf0c      	ite	eq
 8100fd8:	2003      	moveq	r0, #3
 8100fda:	2001      	movne	r0, #1
 8100fdc:	4770      	bx	lr
 8100fde:	bf00      	nop
 8100fe0:	e000ed00 	.word	0xe000ed00

08100fe4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8100fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8100fe6:	f8df c178 	ldr.w	ip, [pc, #376]	; 8101160 <DMA_SetConfig+0x17c>
 8100fea:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8100fec:	6d87      	ldr	r7, [r0, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8100fee:	4564      	cmp	r4, ip
 8100ff0:	d045      	beq.n	810107e <DMA_SetConfig+0x9a>
 8100ff2:	4d58      	ldr	r5, [pc, #352]	; (8101154 <DMA_SetConfig+0x170>)
 8100ff4:	42ac      	cmp	r4, r5
 8100ff6:	d042      	beq.n	810107e <DMA_SetConfig+0x9a>
 8100ff8:	3518      	adds	r5, #24
 8100ffa:	42ac      	cmp	r4, r5
 8100ffc:	d03f      	beq.n	810107e <DMA_SetConfig+0x9a>
 8100ffe:	3518      	adds	r5, #24
 8101000:	42ac      	cmp	r4, r5
 8101002:	d03c      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101004:	3518      	adds	r5, #24
 8101006:	42ac      	cmp	r4, r5
 8101008:	d039      	beq.n	810107e <DMA_SetConfig+0x9a>
 810100a:	3518      	adds	r5, #24
 810100c:	42ac      	cmp	r4, r5
 810100e:	d036      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101010:	3518      	adds	r5, #24
 8101012:	42ac      	cmp	r4, r5
 8101014:	d033      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101016:	3518      	adds	r5, #24
 8101018:	42ac      	cmp	r4, r5
 810101a:	d030      	beq.n	810107e <DMA_SetConfig+0x9a>
 810101c:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8101020:	42ac      	cmp	r4, r5
 8101022:	d02c      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101024:	3518      	adds	r5, #24
 8101026:	42ac      	cmp	r4, r5
 8101028:	d029      	beq.n	810107e <DMA_SetConfig+0x9a>
 810102a:	3518      	adds	r5, #24
 810102c:	42ac      	cmp	r4, r5
 810102e:	d026      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101030:	3518      	adds	r5, #24
 8101032:	42ac      	cmp	r4, r5
 8101034:	d023      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101036:	3518      	adds	r5, #24
 8101038:	42ac      	cmp	r4, r5
 810103a:	d020      	beq.n	810107e <DMA_SetConfig+0x9a>
 810103c:	3518      	adds	r5, #24
 810103e:	42ac      	cmp	r4, r5
 8101040:	d01d      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101042:	3518      	adds	r5, #24
 8101044:	42ac      	cmp	r4, r5
 8101046:	d01a      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101048:	3518      	adds	r5, #24
 810104a:	42ac      	cmp	r4, r5
 810104c:	d017      	beq.n	810107e <DMA_SetConfig+0x9a>
 810104e:	4d42      	ldr	r5, [pc, #264]	; (8101158 <DMA_SetConfig+0x174>)
 8101050:	42ac      	cmp	r4, r5
 8101052:	d014      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101054:	3514      	adds	r5, #20
 8101056:	42ac      	cmp	r4, r5
 8101058:	d011      	beq.n	810107e <DMA_SetConfig+0x9a>
 810105a:	3514      	adds	r5, #20
 810105c:	42ac      	cmp	r4, r5
 810105e:	d00e      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101060:	3514      	adds	r5, #20
 8101062:	42ac      	cmp	r4, r5
 8101064:	d00b      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101066:	3514      	adds	r5, #20
 8101068:	42ac      	cmp	r4, r5
 810106a:	d008      	beq.n	810107e <DMA_SetConfig+0x9a>
 810106c:	3514      	adds	r5, #20
 810106e:	42ac      	cmp	r4, r5
 8101070:	d005      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101072:	3514      	adds	r5, #20
 8101074:	42ac      	cmp	r4, r5
 8101076:	d002      	beq.n	810107e <DMA_SetConfig+0x9a>
 8101078:	3514      	adds	r5, #20
 810107a:	42ac      	cmp	r4, r5
 810107c:	d169      	bne.n	8101152 <DMA_SetConfig+0x16e>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810107e:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	; 0x64
 8101082:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8101084:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8101086:	b115      	cbz	r5, 810108e <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8101088:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	; 0x70
 810108c:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810108e:	4564      	cmp	r4, ip
 8101090:	d037      	beq.n	8101102 <DMA_SetConfig+0x11e>
 8101092:	4d30      	ldr	r5, [pc, #192]	; (8101154 <DMA_SetConfig+0x170>)
 8101094:	42ac      	cmp	r4, r5
 8101096:	d034      	beq.n	8101102 <DMA_SetConfig+0x11e>
 8101098:	3518      	adds	r5, #24
 810109a:	42ac      	cmp	r4, r5
 810109c:	d031      	beq.n	8101102 <DMA_SetConfig+0x11e>
 810109e:	3518      	adds	r5, #24
 81010a0:	42ac      	cmp	r4, r5
 81010a2:	d02e      	beq.n	8101102 <DMA_SetConfig+0x11e>
 81010a4:	3518      	adds	r5, #24
 81010a6:	42ac      	cmp	r4, r5
 81010a8:	d02b      	beq.n	8101102 <DMA_SetConfig+0x11e>
 81010aa:	3518      	adds	r5, #24
 81010ac:	42ac      	cmp	r4, r5
 81010ae:	d028      	beq.n	8101102 <DMA_SetConfig+0x11e>
 81010b0:	3518      	adds	r5, #24
 81010b2:	42ac      	cmp	r4, r5
 81010b4:	d025      	beq.n	8101102 <DMA_SetConfig+0x11e>
 81010b6:	3518      	adds	r5, #24
 81010b8:	42ac      	cmp	r4, r5
 81010ba:	d022      	beq.n	8101102 <DMA_SetConfig+0x11e>
 81010bc:	f505 7556 	add.w	r5, r5, #856	; 0x358
 81010c0:	42ac      	cmp	r4, r5
 81010c2:	d01e      	beq.n	8101102 <DMA_SetConfig+0x11e>
 81010c4:	3518      	adds	r5, #24
 81010c6:	42ac      	cmp	r4, r5
 81010c8:	d01b      	beq.n	8101102 <DMA_SetConfig+0x11e>
 81010ca:	3518      	adds	r5, #24
 81010cc:	42ac      	cmp	r4, r5
 81010ce:	d018      	beq.n	8101102 <DMA_SetConfig+0x11e>
 81010d0:	3518      	adds	r5, #24
 81010d2:	42ac      	cmp	r4, r5
 81010d4:	d015      	beq.n	8101102 <DMA_SetConfig+0x11e>
 81010d6:	3518      	adds	r5, #24
 81010d8:	42ac      	cmp	r4, r5
 81010da:	d012      	beq.n	8101102 <DMA_SetConfig+0x11e>
 81010dc:	3518      	adds	r5, #24
 81010de:	42ac      	cmp	r4, r5
 81010e0:	d00f      	beq.n	8101102 <DMA_SetConfig+0x11e>
 81010e2:	3518      	adds	r5, #24
 81010e4:	42ac      	cmp	r4, r5
 81010e6:	d00c      	beq.n	8101102 <DMA_SetConfig+0x11e>
 81010e8:	3518      	adds	r5, #24
 81010ea:	42ac      	cmp	r4, r5
 81010ec:	d009      	beq.n	8101102 <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81010ee:	4d1a      	ldr	r5, [pc, #104]	; (8101158 <DMA_SetConfig+0x174>)
 81010f0:	42ac      	cmp	r4, r5
 81010f2:	d119      	bne.n	8101128 <DMA_SetConfig+0x144>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81010f4:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 81010f6:	f005 061f 	and.w	r6, r5, #31
 81010fa:	2501      	movs	r5, #1
 81010fc:	40b5      	lsls	r5, r6
 81010fe:	607d      	str	r5, [r7, #4]
 8101100:	e009      	b.n	8101116 <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101102:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8101104:	f005 061f 	and.w	r6, r5, #31
 8101108:	253f      	movs	r5, #63	; 0x3f
 810110a:	40b5      	lsls	r5, r6
 810110c:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 810110e:	6825      	ldr	r5, [r4, #0]
 8101110:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8101114:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8101116:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8101118:	6883      	ldr	r3, [r0, #8]
 810111a:	2b40      	cmp	r3, #64	; 0x40
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 810111c:	bf0b      	itete	eq
 810111e:	60a2      	streq	r2, [r4, #8]
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8101120:	60a1      	strne	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8101122:	60e1      	streq	r1, [r4, #12]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8101124:	60e2      	strne	r2, [r4, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8101126:	e014      	b.n	8101152 <DMA_SetConfig+0x16e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8101128:	4d0c      	ldr	r5, [pc, #48]	; (810115c <DMA_SetConfig+0x178>)
 810112a:	42ac      	cmp	r4, r5
 810112c:	d0e2      	beq.n	81010f4 <DMA_SetConfig+0x110>
 810112e:	3514      	adds	r5, #20
 8101130:	42ac      	cmp	r4, r5
 8101132:	d0df      	beq.n	81010f4 <DMA_SetConfig+0x110>
 8101134:	3514      	adds	r5, #20
 8101136:	42ac      	cmp	r4, r5
 8101138:	d0dc      	beq.n	81010f4 <DMA_SetConfig+0x110>
 810113a:	3514      	adds	r5, #20
 810113c:	42ac      	cmp	r4, r5
 810113e:	d0d9      	beq.n	81010f4 <DMA_SetConfig+0x110>
 8101140:	3514      	adds	r5, #20
 8101142:	42ac      	cmp	r4, r5
 8101144:	d0d6      	beq.n	81010f4 <DMA_SetConfig+0x110>
 8101146:	3514      	adds	r5, #20
 8101148:	42ac      	cmp	r4, r5
 810114a:	d0d3      	beq.n	81010f4 <DMA_SetConfig+0x110>
 810114c:	3514      	adds	r5, #20
 810114e:	42ac      	cmp	r4, r5
 8101150:	d0d0      	beq.n	81010f4 <DMA_SetConfig+0x110>
}
 8101152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8101154:	40020028 	.word	0x40020028
 8101158:	58025408 	.word	0x58025408
 810115c:	5802541c 	.word	0x5802541c
 8101160:	40020010 	.word	0x40020010

08101164 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101164:	6803      	ldr	r3, [r0, #0]
 8101166:	4a24      	ldr	r2, [pc, #144]	; (81011f8 <DMA_CalcBaseAndBitshift+0x94>)
 8101168:	4293      	cmp	r3, r2
{
 810116a:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810116c:	d032      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 810116e:	3218      	adds	r2, #24
 8101170:	4293      	cmp	r3, r2
 8101172:	d02f      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 8101174:	3218      	adds	r2, #24
 8101176:	4293      	cmp	r3, r2
 8101178:	d02c      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 810117a:	3218      	adds	r2, #24
 810117c:	4293      	cmp	r3, r2
 810117e:	d029      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 8101180:	3218      	adds	r2, #24
 8101182:	4293      	cmp	r3, r2
 8101184:	d026      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 8101186:	3218      	adds	r2, #24
 8101188:	4293      	cmp	r3, r2
 810118a:	d023      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 810118c:	3218      	adds	r2, #24
 810118e:	4293      	cmp	r3, r2
 8101190:	d020      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 8101192:	3218      	adds	r2, #24
 8101194:	4293      	cmp	r3, r2
 8101196:	d01d      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 8101198:	f502 7256 	add.w	r2, r2, #856	; 0x358
 810119c:	4293      	cmp	r3, r2
 810119e:	d019      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 81011a0:	3218      	adds	r2, #24
 81011a2:	4293      	cmp	r3, r2
 81011a4:	d016      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 81011a6:	3218      	adds	r2, #24
 81011a8:	4293      	cmp	r3, r2
 81011aa:	d013      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 81011ac:	3218      	adds	r2, #24
 81011ae:	4293      	cmp	r3, r2
 81011b0:	d010      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 81011b2:	3218      	adds	r2, #24
 81011b4:	4293      	cmp	r3, r2
 81011b6:	d00d      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 81011b8:	3218      	adds	r2, #24
 81011ba:	4293      	cmp	r3, r2
 81011bc:	d00a      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 81011be:	3218      	adds	r2, #24
 81011c0:	4293      	cmp	r3, r2
 81011c2:	d007      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
 81011c4:	3218      	adds	r2, #24
 81011c6:	4293      	cmp	r3, r2
 81011c8:	d004      	beq.n	81011d4 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81011ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81011ce:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 81011d0:	6d80      	ldr	r0, [r0, #88]	; 0x58
 81011d2:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81011d4:	b2d9      	uxtb	r1, r3
 81011d6:	3910      	subs	r1, #16
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81011d8:	4c08      	ldr	r4, [pc, #32]	; (81011fc <DMA_CalcBaseAndBitshift+0x98>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81011da:	2218      	movs	r2, #24
 81011dc:	fbb1 f2f2 	udiv	r2, r1, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81011e0:	f002 0207 	and.w	r2, r2, #7
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81011e4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81011e8:	5ca2      	ldrb	r2, [r4, r2]
 81011ea:	65c2      	str	r2, [r0, #92]	; 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81011ec:	f023 0303 	bic.w	r3, r3, #3
    if (stream_number > 3U)
 81011f0:	295f      	cmp	r1, #95	; 0x5f
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81011f2:	bf88      	it	hi
 81011f4:	3304      	addhi	r3, #4
 81011f6:	e7ea      	b.n	81011ce <DMA_CalcBaseAndBitshift+0x6a>
 81011f8:	40020010 	.word	0x40020010
 81011fc:	081041a4 	.word	0x081041a4

08101200 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8101200:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8101202:	491f      	ldr	r1, [pc, #124]	; (8101280 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8101204:	428a      	cmp	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8101206:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8101208:	d024      	beq.n	8101254 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 810120a:	3114      	adds	r1, #20
 810120c:	428a      	cmp	r2, r1
 810120e:	d021      	beq.n	8101254 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8101210:	3114      	adds	r1, #20
 8101212:	428a      	cmp	r2, r1
 8101214:	d01e      	beq.n	8101254 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8101216:	3114      	adds	r1, #20
 8101218:	428a      	cmp	r2, r1
 810121a:	d01b      	beq.n	8101254 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 810121c:	3114      	adds	r1, #20
 810121e:	428a      	cmp	r2, r1
 8101220:	d018      	beq.n	8101254 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8101222:	3114      	adds	r1, #20
 8101224:	428a      	cmp	r2, r1
 8101226:	d015      	beq.n	8101254 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8101228:	3114      	adds	r1, #20
 810122a:	428a      	cmp	r2, r1
 810122c:	d012      	beq.n	8101254 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 810122e:	3114      	adds	r1, #20
 8101230:	428a      	cmp	r2, r1
 8101232:	d00f      	beq.n	8101254 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8101234:	2118      	movs	r1, #24
 8101236:	3b10      	subs	r3, #16
 8101238:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 810123c:	4911      	ldr	r1, [pc, #68]	; (8101284 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 810123e:	4411      	add	r1, r2
 8101240:	29a8      	cmp	r1, #168	; 0xa8
 8101242:	d91a      	bls.n	810127a <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8101244:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8101248:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
 810124c:	0092      	lsls	r2, r2, #2
 810124e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8101250:	4a0d      	ldr	r2, [pc, #52]	; (8101288 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8101252:	e00a      	b.n	810126a <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8101254:	2214      	movs	r2, #20
 8101256:	3b08      	subs	r3, #8
 8101258:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810125c:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 8101260:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
 8101264:	0092      	lsls	r2, r2, #2
 8101266:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8101268:	4a08      	ldr	r2, [pc, #32]	; (810128c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 810126a:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810126c:	f003 031f 	and.w	r3, r3, #31
 8101270:	2201      	movs	r2, #1
 8101272:	fa02 f303 	lsl.w	r3, r2, r3
 8101276:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8101278:	4770      	bx	lr
      stream_number += 8U;
 810127a:	3308      	adds	r3, #8
 810127c:	e7e2      	b.n	8101244 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 810127e:	bf00      	nop
 8101280:	58025408 	.word	0x58025408
 8101284:	bffdfbf0 	.word	0xbffdfbf0
 8101288:	40020880 	.word	0x40020880
 810128c:	58025880 	.word	0x58025880

08101290 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8101290:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8101292:	1e51      	subs	r1, r2, #1
 8101294:	2907      	cmp	r1, #7
{
 8101296:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8101298:	d821      	bhi.n	81012de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810129a:	6803      	ldr	r3, [r0, #0]
 810129c:	4c13      	ldr	r4, [pc, #76]	; (81012ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 810129e:	42a3      	cmp	r3, r4
 81012a0:	d01e      	beq.n	81012e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81012a2:	3414      	adds	r4, #20
 81012a4:	42a3      	cmp	r3, r4
 81012a6:	d01b      	beq.n	81012e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81012a8:	3414      	adds	r4, #20
 81012aa:	42a3      	cmp	r3, r4
 81012ac:	d018      	beq.n	81012e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81012ae:	3414      	adds	r4, #20
 81012b0:	42a3      	cmp	r3, r4
 81012b2:	d015      	beq.n	81012e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81012b4:	3414      	adds	r4, #20
 81012b6:	42a3      	cmp	r3, r4
 81012b8:	d012      	beq.n	81012e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81012ba:	3414      	adds	r4, #20
 81012bc:	42a3      	cmp	r3, r4
 81012be:	d00f      	beq.n	81012e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81012c0:	3414      	adds	r4, #20
 81012c2:	42a3      	cmp	r3, r4
 81012c4:	d00c      	beq.n	81012e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81012c6:	3414      	adds	r4, #20
 81012c8:	42a3      	cmp	r3, r4
 81012ca:	d009      	beq.n	81012e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81012cc:	4b08      	ldr	r3, [pc, #32]	; (81012f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 81012ce:	4413      	add	r3, r2
 81012d0:	009b      	lsls	r3, r3, #2
 81012d2:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81012d4:	4b07      	ldr	r3, [pc, #28]	; (81012f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81012d6:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81012d8:	2301      	movs	r3, #1
 81012da:	408b      	lsls	r3, r1
 81012dc:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 81012de:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81012e0:	4b05      	ldr	r3, [pc, #20]	; (81012f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 81012e2:	4413      	add	r3, r2
 81012e4:	009b      	lsls	r3, r3, #2
 81012e6:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81012e8:	4b04      	ldr	r3, [pc, #16]	; (81012fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 81012ea:	e7f4      	b.n	81012d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x46>
 81012ec:	58025408 	.word	0x58025408
 81012f0:	1000823f 	.word	0x1000823f
 81012f4:	40020940 	.word	0x40020940
 81012f8:	1600963f 	.word	0x1600963f
 81012fc:	58025940 	.word	0x58025940

08101300 <HAL_DMA_Init>:
{
 8101300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101302:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8101304:	f7ff fde2 	bl	8100ecc <HAL_GetTick>
 8101308:	4606      	mov	r6, r0
  if(hdma == NULL)
 810130a:	2c00      	cmp	r4, #0
 810130c:	f000 80e6 	beq.w	81014dc <HAL_DMA_Init+0x1dc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101310:	6823      	ldr	r3, [r4, #0]
 8101312:	4d84      	ldr	r5, [pc, #528]	; (8101524 <HAL_DMA_Init+0x224>)
 8101314:	42ab      	cmp	r3, r5
 8101316:	d06a      	beq.n	81013ee <HAL_DMA_Init+0xee>
 8101318:	4a83      	ldr	r2, [pc, #524]	; (8101528 <HAL_DMA_Init+0x228>)
 810131a:	4293      	cmp	r3, r2
 810131c:	d067      	beq.n	81013ee <HAL_DMA_Init+0xee>
 810131e:	3218      	adds	r2, #24
 8101320:	4293      	cmp	r3, r2
 8101322:	d064      	beq.n	81013ee <HAL_DMA_Init+0xee>
 8101324:	3218      	adds	r2, #24
 8101326:	4293      	cmp	r3, r2
 8101328:	d061      	beq.n	81013ee <HAL_DMA_Init+0xee>
 810132a:	3218      	adds	r2, #24
 810132c:	4293      	cmp	r3, r2
 810132e:	d05e      	beq.n	81013ee <HAL_DMA_Init+0xee>
 8101330:	3218      	adds	r2, #24
 8101332:	4293      	cmp	r3, r2
 8101334:	d05b      	beq.n	81013ee <HAL_DMA_Init+0xee>
 8101336:	3218      	adds	r2, #24
 8101338:	4293      	cmp	r3, r2
 810133a:	d058      	beq.n	81013ee <HAL_DMA_Init+0xee>
 810133c:	3218      	adds	r2, #24
 810133e:	4293      	cmp	r3, r2
 8101340:	d055      	beq.n	81013ee <HAL_DMA_Init+0xee>
 8101342:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8101346:	4293      	cmp	r3, r2
 8101348:	d051      	beq.n	81013ee <HAL_DMA_Init+0xee>
 810134a:	3218      	adds	r2, #24
 810134c:	4293      	cmp	r3, r2
 810134e:	d04e      	beq.n	81013ee <HAL_DMA_Init+0xee>
 8101350:	3218      	adds	r2, #24
 8101352:	4293      	cmp	r3, r2
 8101354:	d04b      	beq.n	81013ee <HAL_DMA_Init+0xee>
 8101356:	3218      	adds	r2, #24
 8101358:	4293      	cmp	r3, r2
 810135a:	d048      	beq.n	81013ee <HAL_DMA_Init+0xee>
 810135c:	3218      	adds	r2, #24
 810135e:	4293      	cmp	r3, r2
 8101360:	d045      	beq.n	81013ee <HAL_DMA_Init+0xee>
 8101362:	3218      	adds	r2, #24
 8101364:	4293      	cmp	r3, r2
 8101366:	d042      	beq.n	81013ee <HAL_DMA_Init+0xee>
 8101368:	3218      	adds	r2, #24
 810136a:	4293      	cmp	r3, r2
 810136c:	d03f      	beq.n	81013ee <HAL_DMA_Init+0xee>
 810136e:	3218      	adds	r2, #24
 8101370:	4293      	cmp	r3, r2
 8101372:	d03c      	beq.n	81013ee <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8101374:	4a6d      	ldr	r2, [pc, #436]	; (810152c <HAL_DMA_Init+0x22c>)
 8101376:	4293      	cmp	r3, r2
 8101378:	f040 815a 	bne.w	8101630 <HAL_DMA_Init+0x330>
    __HAL_UNLOCK(hdma);
 810137c:	2200      	movs	r2, #0
 810137e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8101382:	2202      	movs	r2, #2
 8101384:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8101388:	6819      	ldr	r1, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810138a:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 810138c:	f421 31ff 	bic.w	r1, r1, #130560	; 0x1fe00
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101390:	2a40      	cmp	r2, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8101392:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101396:	f000 8169 	beq.w	810166c <HAL_DMA_Init+0x36c>
 810139a:	2a80      	cmp	r2, #128	; 0x80
 810139c:	bf0c      	ite	eq
 810139e:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 81013a2:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81013a4:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 81013a8:	08d2      	lsrs	r2, r2, #3
 81013aa:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81013ae:	6966      	ldr	r6, [r4, #20]
 81013b0:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81013b4:	69a6      	ldr	r6, [r4, #24]
 81013b6:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81013ba:	69e6      	ldr	r6, [r4, #28]
 81013bc:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81013c0:	6a26      	ldr	r6, [r4, #32]
 81013c2:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 81013c6:	430a      	orrs	r2, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81013c8:	4302      	orrs	r2, r0
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81013ca:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81013cc:	4a58      	ldr	r2, [pc, #352]	; (8101530 <HAL_DMA_Init+0x230>)
 81013ce:	441a      	add	r2, r3
 81013d0:	2314      	movs	r3, #20
 81013d2:	fbb2 f2f3 	udiv	r2, r2, r3
 81013d6:	0092      	lsls	r2, r2, #2
 81013d8:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81013da:	4620      	mov	r0, r4
 81013dc:	f7ff fec2 	bl	8101164 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81013e0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 81013e2:	f003 021f 	and.w	r2, r3, #31
 81013e6:	2301      	movs	r3, #1
 81013e8:	4093      	lsls	r3, r2
 81013ea:	6043      	str	r3, [r0, #4]
 81013ec:	e0b6      	b.n	810155c <HAL_DMA_Init+0x25c>
    __HAL_UNLOCK(hdma);
 81013ee:	2200      	movs	r2, #0
 81013f0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 81013f4:	42ab      	cmp	r3, r5
    hdma->State = HAL_DMA_STATE_BUSY;
 81013f6:	f04f 0202 	mov.w	r2, #2
 81013fa:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 81013fe:	d01e      	beq.n	810143e <HAL_DMA_Init+0x13e>
 8101400:	4a49      	ldr	r2, [pc, #292]	; (8101528 <HAL_DMA_Init+0x228>)
 8101402:	4293      	cmp	r3, r2
 8101404:	d01b      	beq.n	810143e <HAL_DMA_Init+0x13e>
 8101406:	3218      	adds	r2, #24
 8101408:	4293      	cmp	r3, r2
 810140a:	d018      	beq.n	810143e <HAL_DMA_Init+0x13e>
 810140c:	3218      	adds	r2, #24
 810140e:	4293      	cmp	r3, r2
 8101410:	d015      	beq.n	810143e <HAL_DMA_Init+0x13e>
 8101412:	3218      	adds	r2, #24
 8101414:	4293      	cmp	r3, r2
 8101416:	d012      	beq.n	810143e <HAL_DMA_Init+0x13e>
 8101418:	3218      	adds	r2, #24
 810141a:	4293      	cmp	r3, r2
 810141c:	d00f      	beq.n	810143e <HAL_DMA_Init+0x13e>
 810141e:	3218      	adds	r2, #24
 8101420:	4293      	cmp	r3, r2
 8101422:	d00c      	beq.n	810143e <HAL_DMA_Init+0x13e>
 8101424:	3218      	adds	r2, #24
 8101426:	4293      	cmp	r3, r2
 8101428:	d009      	beq.n	810143e <HAL_DMA_Init+0x13e>
 810142a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 810142e:	4293      	cmp	r3, r2
 8101430:	d005      	beq.n	810143e <HAL_DMA_Init+0x13e>
 8101432:	3218      	adds	r2, #24
 8101434:	4293      	cmp	r3, r2
 8101436:	d002      	beq.n	810143e <HAL_DMA_Init+0x13e>
 8101438:	3218      	adds	r2, #24
 810143a:	4293      	cmp	r3, r2
 810143c:	d0ff      	beq.n	810143e <HAL_DMA_Init+0x13e>
 810143e:	681a      	ldr	r2, [r3, #0]
 8101440:	f022 0201 	bic.w	r2, r2, #1
 8101444:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8101446:	6821      	ldr	r1, [r4, #0]
 8101448:	680b      	ldr	r3, [r1, #0]
 810144a:	07db      	lsls	r3, r3, #31
 810144c:	d43c      	bmi.n	81014c8 <HAL_DMA_Init+0x1c8>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 810144e:	680b      	ldr	r3, [r1, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8101450:	4e38      	ldr	r6, [pc, #224]	; (8101534 <HAL_DMA_Init+0x234>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101452:	69a0      	ldr	r0, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8101454:	401e      	ands	r6, r3
    registerValue |=  hdma->Init.Direction           |
 8101456:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 810145a:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810145c:	6922      	ldr	r2, [r4, #16]
 810145e:	4313      	orrs	r3, r2
 8101460:	6962      	ldr	r2, [r4, #20]
 8101462:	4313      	orrs	r3, r2
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101464:	69e2      	ldr	r2, [r4, #28]
 8101466:	4303      	orrs	r3, r0
 8101468:	4313      	orrs	r3, r2
            hdma->Init.Mode                | hdma->Init.Priority;
 810146a:	6a22      	ldr	r2, [r4, #32]
 810146c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810146e:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8101470:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8101472:	2e04      	cmp	r6, #4
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8101474:	bf02      	ittt	eq
 8101476:	e9d4 270b 	ldrdeq	r2, r7, [r4, #44]	; 0x2c
 810147a:	433a      	orreq	r2, r7
 810147c:	4313      	orreq	r3, r2
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810147e:	4a2e      	ldr	r2, [pc, #184]	; (8101538 <HAL_DMA_Init+0x238>)
 8101480:	6812      	ldr	r2, [r2, #0]
 8101482:	0c12      	lsrs	r2, r2, #16
 8101484:	0412      	lsls	r2, r2, #16
 8101486:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 810148a:	d307      	bcc.n	810149c <HAL_DMA_Init+0x19c>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810148c:	6862      	ldr	r2, [r4, #4]
 810148e:	f1a2 0729 	sub.w	r7, r2, #41	; 0x29
 8101492:	2f1f      	cmp	r7, #31
 8101494:	d924      	bls.n	81014e0 <HAL_DMA_Init+0x1e0>
 8101496:	3a4f      	subs	r2, #79	; 0x4f
 8101498:	2a03      	cmp	r2, #3
 810149a:	d925      	bls.n	81014e8 <HAL_DMA_Init+0x1e8>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 810149c:	600b      	str	r3, [r1, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 810149e:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81014a0:	2e04      	cmp	r6, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81014a2:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 81014a6:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81014aa:	d14d      	bne.n	8101548 <HAL_DMA_Init+0x248>
      registerValue |= hdma->Init.FIFOThreshold;
 81014ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81014ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 81014b0:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81014b2:	2e00      	cmp	r6, #0
 81014b4:	d048      	beq.n	8101548 <HAL_DMA_Init+0x248>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81014b6:	b9d0      	cbnz	r0, 81014ee <HAL_DMA_Init+0x1ee>
    switch (hdma->Init.FIFOThreshold)
 81014b8:	2a01      	cmp	r2, #1
 81014ba:	d029      	beq.n	8101510 <HAL_DMA_Init+0x210>
 81014bc:	f032 0202 	bics.w	r2, r2, #2
 81014c0:	d142      	bne.n	8101548 <HAL_DMA_Init+0x248>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81014c2:	01f2      	lsls	r2, r6, #7
 81014c4:	d540      	bpl.n	8101548 <HAL_DMA_Init+0x248>
 81014c6:	e026      	b.n	8101516 <HAL_DMA_Init+0x216>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81014c8:	f7ff fd00 	bl	8100ecc <HAL_GetTick>
 81014cc:	1b80      	subs	r0, r0, r6
 81014ce:	2805      	cmp	r0, #5
 81014d0:	d9b9      	bls.n	8101446 <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81014d2:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81014d4:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81014d6:	2303      	movs	r3, #3
 81014d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 81014dc:	2001      	movs	r0, #1
 81014de:	e01f      	b.n	8101520 <HAL_DMA_Init+0x220>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 81014e0:	4a16      	ldr	r2, [pc, #88]	; (810153c <HAL_DMA_Init+0x23c>)
 81014e2:	40fa      	lsrs	r2, r7
 81014e4:	07d7      	lsls	r7, r2, #31
 81014e6:	d5d9      	bpl.n	810149c <HAL_DMA_Init+0x19c>
        registerValue |= DMA_SxCR_TRBUFF;
 81014e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81014ec:	e7d6      	b.n	810149c <HAL_DMA_Init+0x19c>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81014ee:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 81014f2:	d125      	bne.n	8101540 <HAL_DMA_Init+0x240>
    switch (hdma->Init.FIFOThreshold)
 81014f4:	2a03      	cmp	r2, #3
 81014f6:	d827      	bhi.n	8101548 <HAL_DMA_Init+0x248>
 81014f8:	a001      	add	r0, pc, #4	; (adr r0, 8101500 <HAL_DMA_Init+0x200>)
 81014fa:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 81014fe:	bf00      	nop
 8101500:	08101517 	.word	0x08101517
 8101504:	081014c3 	.word	0x081014c3
 8101508:	08101517 	.word	0x08101517
 810150c:	08101511 	.word	0x08101511
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8101510:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8101514:	d118      	bne.n	8101548 <HAL_DMA_Init+0x248>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8101516:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8101518:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 810151a:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 810151c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8101520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8101522:	bf00      	nop
 8101524:	40020010 	.word	0x40020010
 8101528:	40020028 	.word	0x40020028
 810152c:	58025408 	.word	0x58025408
 8101530:	a7fdabf8 	.word	0xa7fdabf8
 8101534:	fe10803f 	.word	0xfe10803f
 8101538:	5c001000 	.word	0x5c001000
 810153c:	c3c0003f 	.word	0xc3c0003f
    switch (hdma->Init.FIFOThreshold)
 8101540:	2a02      	cmp	r2, #2
 8101542:	d9e8      	bls.n	8101516 <HAL_DMA_Init+0x216>
 8101544:	2a03      	cmp	r2, #3
 8101546:	d0bc      	beq.n	81014c2 <HAL_DMA_Init+0x1c2>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8101548:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810154a:	4620      	mov	r0, r4
 810154c:	f7ff fe0a 	bl	8101164 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101550:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8101552:	f003 021f 	and.w	r2, r3, #31
 8101556:	233f      	movs	r3, #63	; 0x3f
 8101558:	4093      	lsls	r3, r2
 810155a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810155c:	6823      	ldr	r3, [r4, #0]
 810155e:	42ab      	cmp	r3, r5
 8101560:	d045      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 8101562:	4a45      	ldr	r2, [pc, #276]	; (8101678 <HAL_DMA_Init+0x378>)
 8101564:	4293      	cmp	r3, r2
 8101566:	d042      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 8101568:	3218      	adds	r2, #24
 810156a:	4293      	cmp	r3, r2
 810156c:	d03f      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 810156e:	3218      	adds	r2, #24
 8101570:	4293      	cmp	r3, r2
 8101572:	d03c      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 8101574:	3218      	adds	r2, #24
 8101576:	4293      	cmp	r3, r2
 8101578:	d039      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 810157a:	3218      	adds	r2, #24
 810157c:	4293      	cmp	r3, r2
 810157e:	d036      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 8101580:	3218      	adds	r2, #24
 8101582:	4293      	cmp	r3, r2
 8101584:	d033      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 8101586:	3218      	adds	r2, #24
 8101588:	4293      	cmp	r3, r2
 810158a:	d030      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 810158c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8101590:	4293      	cmp	r3, r2
 8101592:	d02c      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 8101594:	3218      	adds	r2, #24
 8101596:	4293      	cmp	r3, r2
 8101598:	d029      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 810159a:	3218      	adds	r2, #24
 810159c:	4293      	cmp	r3, r2
 810159e:	d026      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015a0:	3218      	adds	r2, #24
 81015a2:	4293      	cmp	r3, r2
 81015a4:	d023      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015a6:	3218      	adds	r2, #24
 81015a8:	4293      	cmp	r3, r2
 81015aa:	d020      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015ac:	3218      	adds	r2, #24
 81015ae:	4293      	cmp	r3, r2
 81015b0:	d01d      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015b2:	3218      	adds	r2, #24
 81015b4:	4293      	cmp	r3, r2
 81015b6:	d01a      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015b8:	3218      	adds	r2, #24
 81015ba:	4293      	cmp	r3, r2
 81015bc:	d017      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015be:	4a2f      	ldr	r2, [pc, #188]	; (810167c <HAL_DMA_Init+0x37c>)
 81015c0:	4293      	cmp	r3, r2
 81015c2:	d014      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015c4:	3214      	adds	r2, #20
 81015c6:	4293      	cmp	r3, r2
 81015c8:	d011      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015ca:	3214      	adds	r2, #20
 81015cc:	4293      	cmp	r3, r2
 81015ce:	d00e      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015d0:	3214      	adds	r2, #20
 81015d2:	4293      	cmp	r3, r2
 81015d4:	d00b      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015d6:	3214      	adds	r2, #20
 81015d8:	4293      	cmp	r3, r2
 81015da:	d008      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015dc:	3214      	adds	r2, #20
 81015de:	4293      	cmp	r3, r2
 81015e0:	d005      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015e2:	3214      	adds	r2, #20
 81015e4:	4293      	cmp	r3, r2
 81015e6:	d002      	beq.n	81015ee <HAL_DMA_Init+0x2ee>
 81015e8:	3214      	adds	r2, #20
 81015ea:	4293      	cmp	r3, r2
 81015ec:	d11a      	bne.n	8101624 <HAL_DMA_Init+0x324>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81015ee:	4620      	mov	r0, r4
 81015f0:	f7ff fe06 	bl	8101200 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81015f4:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81015f6:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81015f8:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81015fa:	bf04      	itt	eq
 81015fc:	2300      	moveq	r3, #0
 81015fe:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8101600:	6863      	ldr	r3, [r4, #4]
 8101602:	b2d9      	uxtb	r1, r3
 8101604:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8101606:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810160a:	3b01      	subs	r3, #1
 810160c:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810160e:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8101610:	f04f 0500 	mov.w	r5, #0
 8101614:	d82c      	bhi.n	8101670 <HAL_DMA_Init+0x370>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8101616:	f7ff fe3b 	bl	8101290 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 810161a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 810161c:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810161e:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8101622:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8101624:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8101626:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8101628:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 810162a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 810162e:	e777      	b.n	8101520 <HAL_DMA_Init+0x220>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8101630:	4a13      	ldr	r2, [pc, #76]	; (8101680 <HAL_DMA_Init+0x380>)
 8101632:	4293      	cmp	r3, r2
 8101634:	f43f aea2 	beq.w	810137c <HAL_DMA_Init+0x7c>
 8101638:	3214      	adds	r2, #20
 810163a:	4293      	cmp	r3, r2
 810163c:	f43f ae9e 	beq.w	810137c <HAL_DMA_Init+0x7c>
 8101640:	3214      	adds	r2, #20
 8101642:	4293      	cmp	r3, r2
 8101644:	f43f ae9a 	beq.w	810137c <HAL_DMA_Init+0x7c>
 8101648:	3214      	adds	r2, #20
 810164a:	4293      	cmp	r3, r2
 810164c:	f43f ae96 	beq.w	810137c <HAL_DMA_Init+0x7c>
 8101650:	3214      	adds	r2, #20
 8101652:	4293      	cmp	r3, r2
 8101654:	f43f ae92 	beq.w	810137c <HAL_DMA_Init+0x7c>
 8101658:	3214      	adds	r2, #20
 810165a:	4293      	cmp	r3, r2
 810165c:	f43f ae8e 	beq.w	810137c <HAL_DMA_Init+0x7c>
 8101660:	3214      	adds	r2, #20
 8101662:	4293      	cmp	r3, r2
 8101664:	f43f ae8a 	beq.w	810137c <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8101668:	2340      	movs	r3, #64	; 0x40
 810166a:	e733      	b.n	81014d4 <HAL_DMA_Init+0x1d4>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810166c:	2010      	movs	r0, #16
 810166e:	e699      	b.n	81013a4 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8101670:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8101674:	6765      	str	r5, [r4, #116]	; 0x74
 8101676:	e7d5      	b.n	8101624 <HAL_DMA_Init+0x324>
 8101678:	40020028 	.word	0x40020028
 810167c:	58025408 	.word	0x58025408
 8101680:	5802541c 	.word	0x5802541c

08101684 <HAL_DMA_Start_IT>:
{
 8101684:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 8101686:	2800      	cmp	r0, #0
 8101688:	f000 810b 	beq.w	81018a2 <HAL_DMA_Start_IT+0x21e>
  __HAL_LOCK(hdma);
 810168c:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8101690:	2c01      	cmp	r4, #1
 8101692:	f000 8108 	beq.w	81018a6 <HAL_DMA_Start_IT+0x222>
  if(HAL_DMA_STATE_READY == hdma->State)
 8101696:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 810169a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 810169c:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 810169e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 81016a2:	f04f 0500 	mov.w	r5, #0
 81016a6:	f040 80f7 	bne.w	8101898 <HAL_DMA_Start_IT+0x214>
    hdma->State = HAL_DMA_STATE_BUSY;
 81016aa:	2402      	movs	r4, #2
 81016ac:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 81016b0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81016b2:	6545      	str	r5, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 81016b4:	4d7d      	ldr	r5, [pc, #500]	; (81018ac <HAL_DMA_Start_IT+0x228>)
 81016b6:	42ac      	cmp	r4, r5
 81016b8:	d01e      	beq.n	81016f8 <HAL_DMA_Start_IT+0x74>
 81016ba:	4e7d      	ldr	r6, [pc, #500]	; (81018b0 <HAL_DMA_Start_IT+0x22c>)
 81016bc:	42b4      	cmp	r4, r6
 81016be:	d01b      	beq.n	81016f8 <HAL_DMA_Start_IT+0x74>
 81016c0:	3618      	adds	r6, #24
 81016c2:	42b4      	cmp	r4, r6
 81016c4:	d018      	beq.n	81016f8 <HAL_DMA_Start_IT+0x74>
 81016c6:	3618      	adds	r6, #24
 81016c8:	42b4      	cmp	r4, r6
 81016ca:	d015      	beq.n	81016f8 <HAL_DMA_Start_IT+0x74>
 81016cc:	3618      	adds	r6, #24
 81016ce:	42b4      	cmp	r4, r6
 81016d0:	d012      	beq.n	81016f8 <HAL_DMA_Start_IT+0x74>
 81016d2:	3618      	adds	r6, #24
 81016d4:	42b4      	cmp	r4, r6
 81016d6:	d00f      	beq.n	81016f8 <HAL_DMA_Start_IT+0x74>
 81016d8:	3618      	adds	r6, #24
 81016da:	42b4      	cmp	r4, r6
 81016dc:	d00c      	beq.n	81016f8 <HAL_DMA_Start_IT+0x74>
 81016de:	3618      	adds	r6, #24
 81016e0:	42b4      	cmp	r4, r6
 81016e2:	d009      	beq.n	81016f8 <HAL_DMA_Start_IT+0x74>
 81016e4:	f506 7656 	add.w	r6, r6, #856	; 0x358
 81016e8:	42b4      	cmp	r4, r6
 81016ea:	d005      	beq.n	81016f8 <HAL_DMA_Start_IT+0x74>
 81016ec:	3618      	adds	r6, #24
 81016ee:	42b4      	cmp	r4, r6
 81016f0:	d002      	beq.n	81016f8 <HAL_DMA_Start_IT+0x74>
 81016f2:	3618      	adds	r6, #24
 81016f4:	42b4      	cmp	r4, r6
 81016f6:	d0ff      	beq.n	81016f8 <HAL_DMA_Start_IT+0x74>
 81016f8:	6826      	ldr	r6, [r4, #0]
 81016fa:	f026 0601 	bic.w	r6, r6, #1
 81016fe:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8101700:	f7ff fc70 	bl	8100fe4 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101704:	6803      	ldr	r3, [r0, #0]
 8101706:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8101708:	42ab      	cmp	r3, r5
 810170a:	d053      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 810170c:	4a68      	ldr	r2, [pc, #416]	; (81018b0 <HAL_DMA_Start_IT+0x22c>)
 810170e:	4293      	cmp	r3, r2
 8101710:	d050      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 8101712:	3218      	adds	r2, #24
 8101714:	4293      	cmp	r3, r2
 8101716:	d04d      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 8101718:	3218      	adds	r2, #24
 810171a:	4293      	cmp	r3, r2
 810171c:	d04a      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 810171e:	3218      	adds	r2, #24
 8101720:	4293      	cmp	r3, r2
 8101722:	d047      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 8101724:	3218      	adds	r2, #24
 8101726:	4293      	cmp	r3, r2
 8101728:	d044      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 810172a:	3218      	adds	r2, #24
 810172c:	4293      	cmp	r3, r2
 810172e:	d041      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 8101730:	3218      	adds	r2, #24
 8101732:	4293      	cmp	r3, r2
 8101734:	d03e      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 8101736:	f502 7256 	add.w	r2, r2, #856	; 0x358
 810173a:	4293      	cmp	r3, r2
 810173c:	d03a      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 810173e:	3218      	adds	r2, #24
 8101740:	4293      	cmp	r3, r2
 8101742:	d037      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 8101744:	3218      	adds	r2, #24
 8101746:	4293      	cmp	r3, r2
 8101748:	d034      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 810174a:	3218      	adds	r2, #24
 810174c:	4293      	cmp	r3, r2
 810174e:	d031      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 8101750:	3218      	adds	r2, #24
 8101752:	4293      	cmp	r3, r2
 8101754:	d02e      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 8101756:	3218      	adds	r2, #24
 8101758:	4293      	cmp	r3, r2
 810175a:	d02b      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 810175c:	3218      	adds	r2, #24
 810175e:	4293      	cmp	r3, r2
 8101760:	d028      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
 8101762:	3218      	adds	r2, #24
 8101764:	4293      	cmp	r3, r2
 8101766:	d025      	beq.n	81017b4 <HAL_DMA_Start_IT+0x130>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8101768:	681a      	ldr	r2, [r3, #0]
 810176a:	f022 020e 	bic.w	r2, r2, #14
 810176e:	f042 020a 	orr.w	r2, r2, #10
 8101772:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8101774:	2900      	cmp	r1, #0
 8101776:	d156      	bne.n	8101826 <HAL_DMA_Start_IT+0x1a2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101778:	4a4e      	ldr	r2, [pc, #312]	; (81018b4 <HAL_DMA_Start_IT+0x230>)
 810177a:	4293      	cmp	r3, r2
 810177c:	d027      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 810177e:	4a4e      	ldr	r2, [pc, #312]	; (81018b8 <HAL_DMA_Start_IT+0x234>)
 8101780:	4293      	cmp	r3, r2
 8101782:	d024      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 8101784:	3214      	adds	r2, #20
 8101786:	4293      	cmp	r3, r2
 8101788:	d021      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 810178a:	3214      	adds	r2, #20
 810178c:	4293      	cmp	r3, r2
 810178e:	d01e      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 8101790:	3214      	adds	r2, #20
 8101792:	4293      	cmp	r3, r2
 8101794:	d01b      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 8101796:	3214      	adds	r2, #20
 8101798:	4293      	cmp	r3, r2
 810179a:	d018      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 810179c:	3214      	adds	r2, #20
 810179e:	4293      	cmp	r3, r2
 81017a0:	d015      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 81017a2:	3214      	adds	r2, #20
 81017a4:	4293      	cmp	r3, r2
 81017a6:	d012      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
    __HAL_DMA_ENABLE(hdma);
 81017a8:	681a      	ldr	r2, [r3, #0]
 81017aa:	f042 0201 	orr.w	r2, r2, #1
 81017ae:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81017b0:	2000      	movs	r0, #0
}
 81017b2:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81017b4:	681a      	ldr	r2, [r3, #0]
 81017b6:	f022 021e 	bic.w	r2, r2, #30
 81017ba:	f042 0216 	orr.w	r2, r2, #22
 81017be:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 81017c0:	b119      	cbz	r1, 81017ca <HAL_DMA_Start_IT+0x146>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81017c2:	681a      	ldr	r2, [r3, #0]
 81017c4:	f042 0208 	orr.w	r2, r2, #8
 81017c8:	601a      	str	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81017ca:	42ab      	cmp	r3, r5
 81017cc:	d130      	bne.n	8101830 <HAL_DMA_Start_IT+0x1ac>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 81017ce:	6e02      	ldr	r2, [r0, #96]	; 0x60
 81017d0:	6811      	ldr	r1, [r2, #0]
 81017d2:	03c9      	lsls	r1, r1, #15
 81017d4:	d45b      	bmi.n	810188e <HAL_DMA_Start_IT+0x20a>
      if(hdma->DMAmuxRequestGen != 0U)
 81017d6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 81017d8:	b11a      	cbz	r2, 81017e2 <HAL_DMA_Start_IT+0x15e>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 81017da:	6811      	ldr	r1, [r2, #0]
 81017dc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 81017e0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 81017e2:	42ab      	cmp	r3, r5
 81017e4:	d0e0      	beq.n	81017a8 <HAL_DMA_Start_IT+0x124>
 81017e6:	4a32      	ldr	r2, [pc, #200]	; (81018b0 <HAL_DMA_Start_IT+0x22c>)
 81017e8:	4293      	cmp	r3, r2
 81017ea:	d0dd      	beq.n	81017a8 <HAL_DMA_Start_IT+0x124>
 81017ec:	3218      	adds	r2, #24
 81017ee:	4293      	cmp	r3, r2
 81017f0:	d0da      	beq.n	81017a8 <HAL_DMA_Start_IT+0x124>
 81017f2:	3218      	adds	r2, #24
 81017f4:	4293      	cmp	r3, r2
 81017f6:	d0d7      	beq.n	81017a8 <HAL_DMA_Start_IT+0x124>
 81017f8:	3218      	adds	r2, #24
 81017fa:	4293      	cmp	r3, r2
 81017fc:	d0d4      	beq.n	81017a8 <HAL_DMA_Start_IT+0x124>
 81017fe:	3218      	adds	r2, #24
 8101800:	4293      	cmp	r3, r2
 8101802:	d0d1      	beq.n	81017a8 <HAL_DMA_Start_IT+0x124>
 8101804:	3218      	adds	r2, #24
 8101806:	4293      	cmp	r3, r2
 8101808:	d0ce      	beq.n	81017a8 <HAL_DMA_Start_IT+0x124>
 810180a:	3218      	adds	r2, #24
 810180c:	4293      	cmp	r3, r2
 810180e:	d0cb      	beq.n	81017a8 <HAL_DMA_Start_IT+0x124>
 8101810:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8101814:	4293      	cmp	r3, r2
 8101816:	d0c7      	beq.n	81017a8 <HAL_DMA_Start_IT+0x124>
 8101818:	3218      	adds	r2, #24
 810181a:	4293      	cmp	r3, r2
 810181c:	d0c4      	beq.n	81017a8 <HAL_DMA_Start_IT+0x124>
 810181e:	3218      	adds	r2, #24
 8101820:	4293      	cmp	r3, r2
 8101822:	d0c1      	beq.n	81017a8 <HAL_DMA_Start_IT+0x124>
 8101824:	e7c0      	b.n	81017a8 <HAL_DMA_Start_IT+0x124>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8101826:	681a      	ldr	r2, [r3, #0]
 8101828:	f042 0204 	orr.w	r2, r2, #4
 810182c:	601a      	str	r2, [r3, #0]
 810182e:	e7a3      	b.n	8101778 <HAL_DMA_Start_IT+0xf4>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101830:	4a1f      	ldr	r2, [pc, #124]	; (81018b0 <HAL_DMA_Start_IT+0x22c>)
 8101832:	4293      	cmp	r3, r2
 8101834:	d0cb      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 8101836:	3218      	adds	r2, #24
 8101838:	4293      	cmp	r3, r2
 810183a:	d0c8      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 810183c:	3218      	adds	r2, #24
 810183e:	4293      	cmp	r3, r2
 8101840:	d0c5      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 8101842:	3218      	adds	r2, #24
 8101844:	4293      	cmp	r3, r2
 8101846:	d0c2      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 8101848:	3218      	adds	r2, #24
 810184a:	4293      	cmp	r3, r2
 810184c:	d0bf      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 810184e:	3218      	adds	r2, #24
 8101850:	4293      	cmp	r3, r2
 8101852:	d0bc      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 8101854:	3218      	adds	r2, #24
 8101856:	4293      	cmp	r3, r2
 8101858:	d0b9      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 810185a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 810185e:	4293      	cmp	r3, r2
 8101860:	d0b5      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 8101862:	3218      	adds	r2, #24
 8101864:	4293      	cmp	r3, r2
 8101866:	d0b2      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 8101868:	3218      	adds	r2, #24
 810186a:	4293      	cmp	r3, r2
 810186c:	d0af      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 810186e:	3218      	adds	r2, #24
 8101870:	4293      	cmp	r3, r2
 8101872:	d0ac      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 8101874:	3218      	adds	r2, #24
 8101876:	4293      	cmp	r3, r2
 8101878:	d0a9      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 810187a:	3218      	adds	r2, #24
 810187c:	4293      	cmp	r3, r2
 810187e:	d0a6      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 8101880:	3218      	adds	r2, #24
 8101882:	4293      	cmp	r3, r2
 8101884:	d0a3      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 8101886:	3218      	adds	r2, #24
 8101888:	4293      	cmp	r3, r2
 810188a:	d0a0      	beq.n	81017ce <HAL_DMA_Start_IT+0x14a>
 810188c:	e774      	b.n	8101778 <HAL_DMA_Start_IT+0xf4>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 810188e:	6811      	ldr	r1, [r2, #0]
 8101890:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8101894:	6011      	str	r1, [r2, #0]
 8101896:	e79e      	b.n	81017d6 <HAL_DMA_Start_IT+0x152>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8101898:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 810189c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 81018a0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 81018a2:	2001      	movs	r0, #1
 81018a4:	e785      	b.n	81017b2 <HAL_DMA_Start_IT+0x12e>
  __HAL_LOCK(hdma);
 81018a6:	2002      	movs	r0, #2
 81018a8:	e783      	b.n	81017b2 <HAL_DMA_Start_IT+0x12e>
 81018aa:	bf00      	nop
 81018ac:	40020010 	.word	0x40020010
 81018b0:	40020028 	.word	0x40020028
 81018b4:	58025408 	.word	0x58025408
 81018b8:	5802541c 	.word	0x5802541c

081018bc <HAL_DMA_Abort>:
{
 81018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81018be:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 81018c0:	f7ff fb04 	bl	8100ecc <HAL_GetTick>
 81018c4:	4607      	mov	r7, r0
  if(hdma == NULL)
 81018c6:	b145      	cbz	r5, 81018da <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81018c8:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 81018cc:	2b02      	cmp	r3, #2
 81018ce:	d006      	beq.n	81018de <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81018d0:	2380      	movs	r3, #128	; 0x80
 81018d2:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 81018d4:	2300      	movs	r3, #0
 81018d6:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 81018da:	2001      	movs	r0, #1
 81018dc:	e158      	b.n	8101b90 <HAL_DMA_Abort+0x2d4>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81018de:	682c      	ldr	r4, [r5, #0]
 81018e0:	4eac      	ldr	r6, [pc, #688]	; (8101b94 <HAL_DMA_Abort+0x2d8>)
 81018e2:	42b4      	cmp	r4, r6
 81018e4:	d04a      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 81018e6:	4bac      	ldr	r3, [pc, #688]	; (8101b98 <HAL_DMA_Abort+0x2dc>)
 81018e8:	429c      	cmp	r4, r3
 81018ea:	d047      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 81018ec:	3318      	adds	r3, #24
 81018ee:	429c      	cmp	r4, r3
 81018f0:	d044      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 81018f2:	3318      	adds	r3, #24
 81018f4:	429c      	cmp	r4, r3
 81018f6:	d041      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 81018f8:	3318      	adds	r3, #24
 81018fa:	429c      	cmp	r4, r3
 81018fc:	d03e      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 81018fe:	3318      	adds	r3, #24
 8101900:	429c      	cmp	r4, r3
 8101902:	d03b      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 8101904:	3318      	adds	r3, #24
 8101906:	429c      	cmp	r4, r3
 8101908:	d038      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 810190a:	3318      	adds	r3, #24
 810190c:	429c      	cmp	r4, r3
 810190e:	d035      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 8101910:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8101914:	429c      	cmp	r4, r3
 8101916:	d031      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 8101918:	3318      	adds	r3, #24
 810191a:	429c      	cmp	r4, r3
 810191c:	d02e      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 810191e:	3318      	adds	r3, #24
 8101920:	429c      	cmp	r4, r3
 8101922:	d02b      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 8101924:	3318      	adds	r3, #24
 8101926:	429c      	cmp	r4, r3
 8101928:	d028      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 810192a:	3318      	adds	r3, #24
 810192c:	429c      	cmp	r4, r3
 810192e:	d025      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 8101930:	3318      	adds	r3, #24
 8101932:	429c      	cmp	r4, r3
 8101934:	d022      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 8101936:	3318      	adds	r3, #24
 8101938:	429c      	cmp	r4, r3
 810193a:	d01f      	beq.n	810197c <HAL_DMA_Abort+0xc0>
 810193c:	3318      	adds	r3, #24
 810193e:	429c      	cmp	r4, r3
 8101940:	d01c      	beq.n	810197c <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8101942:	6823      	ldr	r3, [r4, #0]
 8101944:	f023 030e 	bic.w	r3, r3, #14
 8101948:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810194a:	4b94      	ldr	r3, [pc, #592]	; (8101b9c <HAL_DMA_Abort+0x2e0>)
 810194c:	429c      	cmp	r4, r3
 810194e:	d01f      	beq.n	8101990 <HAL_DMA_Abort+0xd4>
 8101950:	3314      	adds	r3, #20
 8101952:	429c      	cmp	r4, r3
 8101954:	d01c      	beq.n	8101990 <HAL_DMA_Abort+0xd4>
 8101956:	3314      	adds	r3, #20
 8101958:	429c      	cmp	r4, r3
 810195a:	d019      	beq.n	8101990 <HAL_DMA_Abort+0xd4>
 810195c:	3314      	adds	r3, #20
 810195e:	429c      	cmp	r4, r3
 8101960:	d016      	beq.n	8101990 <HAL_DMA_Abort+0xd4>
 8101962:	3314      	adds	r3, #20
 8101964:	429c      	cmp	r4, r3
 8101966:	d013      	beq.n	8101990 <HAL_DMA_Abort+0xd4>
 8101968:	3314      	adds	r3, #20
 810196a:	429c      	cmp	r4, r3
 810196c:	d010      	beq.n	8101990 <HAL_DMA_Abort+0xd4>
 810196e:	3314      	adds	r3, #20
 8101970:	429c      	cmp	r4, r3
 8101972:	d00d      	beq.n	8101990 <HAL_DMA_Abort+0xd4>
 8101974:	3314      	adds	r3, #20
 8101976:	429c      	cmp	r4, r3
 8101978:	d112      	bne.n	81019a0 <HAL_DMA_Abort+0xe4>
 810197a:	e009      	b.n	8101990 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 810197c:	6823      	ldr	r3, [r4, #0]
 810197e:	f023 031e 	bic.w	r3, r3, #30
 8101982:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8101984:	6963      	ldr	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101986:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8101988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810198c:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810198e:	d178      	bne.n	8101a82 <HAL_DMA_Abort+0x1c6>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8101990:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8101992:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8101994:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8101996:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810199a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 810199c:	f040 80ad 	bne.w	8101afa <HAL_DMA_Abort+0x23e>
 81019a0:	6823      	ldr	r3, [r4, #0]
 81019a2:	f023 0301 	bic.w	r3, r3, #1
 81019a6:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81019a8:	6823      	ldr	r3, [r4, #0]
 81019aa:	07db      	lsls	r3, r3, #31
 81019ac:	f100 80cf 	bmi.w	8101b4e <HAL_DMA_Abort+0x292>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81019b0:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81019b2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81019b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81019b6:	42b3      	cmp	r3, r6
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81019b8:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81019bc:	f000 80d6 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 81019c0:	4975      	ldr	r1, [pc, #468]	; (8101b98 <HAL_DMA_Abort+0x2dc>)
 81019c2:	428b      	cmp	r3, r1
 81019c4:	f000 80d2 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 81019c8:	3118      	adds	r1, #24
 81019ca:	428b      	cmp	r3, r1
 81019cc:	f000 80ce 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 81019d0:	3118      	adds	r1, #24
 81019d2:	428b      	cmp	r3, r1
 81019d4:	f000 80ca 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 81019d8:	3118      	adds	r1, #24
 81019da:	428b      	cmp	r3, r1
 81019dc:	f000 80c6 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 81019e0:	3118      	adds	r1, #24
 81019e2:	428b      	cmp	r3, r1
 81019e4:	f000 80c2 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 81019e8:	3118      	adds	r1, #24
 81019ea:	428b      	cmp	r3, r1
 81019ec:	f000 80be 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 81019f0:	3118      	adds	r1, #24
 81019f2:	428b      	cmp	r3, r1
 81019f4:	f000 80ba 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 81019f8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 81019fc:	428b      	cmp	r3, r1
 81019fe:	f000 80b5 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 8101a02:	3118      	adds	r1, #24
 8101a04:	428b      	cmp	r3, r1
 8101a06:	f000 80b1 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 8101a0a:	3118      	adds	r1, #24
 8101a0c:	428b      	cmp	r3, r1
 8101a0e:	f000 80ad 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 8101a12:	3118      	adds	r1, #24
 8101a14:	428b      	cmp	r3, r1
 8101a16:	f000 80a9 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 8101a1a:	3118      	adds	r1, #24
 8101a1c:	428b      	cmp	r3, r1
 8101a1e:	f000 80a5 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 8101a22:	3118      	adds	r1, #24
 8101a24:	428b      	cmp	r3, r1
 8101a26:	f000 80a1 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 8101a2a:	3118      	adds	r1, #24
 8101a2c:	428b      	cmp	r3, r1
 8101a2e:	f000 809d 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
 8101a32:	3118      	adds	r1, #24
 8101a34:	428b      	cmp	r3, r1
 8101a36:	f000 8099 	beq.w	8101b6c <HAL_DMA_Abort+0x2b0>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101a3a:	2101      	movs	r1, #1
 8101a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8101a40:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101a42:	4a56      	ldr	r2, [pc, #344]	; (8101b9c <HAL_DMA_Abort+0x2e0>)
 8101a44:	4293      	cmp	r3, r2
 8101a46:	f000 8097 	beq.w	8101b78 <HAL_DMA_Abort+0x2bc>
 8101a4a:	3214      	adds	r2, #20
 8101a4c:	4293      	cmp	r3, r2
 8101a4e:	f000 8093 	beq.w	8101b78 <HAL_DMA_Abort+0x2bc>
 8101a52:	3214      	adds	r2, #20
 8101a54:	4293      	cmp	r3, r2
 8101a56:	f000 808f 	beq.w	8101b78 <HAL_DMA_Abort+0x2bc>
 8101a5a:	3214      	adds	r2, #20
 8101a5c:	4293      	cmp	r3, r2
 8101a5e:	f000 808b 	beq.w	8101b78 <HAL_DMA_Abort+0x2bc>
 8101a62:	3214      	adds	r2, #20
 8101a64:	4293      	cmp	r3, r2
 8101a66:	f000 8087 	beq.w	8101b78 <HAL_DMA_Abort+0x2bc>
 8101a6a:	3214      	adds	r2, #20
 8101a6c:	4293      	cmp	r3, r2
 8101a6e:	f000 8083 	beq.w	8101b78 <HAL_DMA_Abort+0x2bc>
 8101a72:	3214      	adds	r2, #20
 8101a74:	4293      	cmp	r3, r2
 8101a76:	d07f      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101a78:	3214      	adds	r2, #20
 8101a7a:	4293      	cmp	r3, r2
 8101a7c:	f040 8082 	bne.w	8101b84 <HAL_DMA_Abort+0x2c8>
 8101a80:	e07a      	b.n	8101b78 <HAL_DMA_Abort+0x2bc>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101a82:	4b45      	ldr	r3, [pc, #276]	; (8101b98 <HAL_DMA_Abort+0x2dc>)
 8101a84:	429c      	cmp	r4, r3
 8101a86:	d083      	beq.n	8101990 <HAL_DMA_Abort+0xd4>
 8101a88:	3318      	adds	r3, #24
 8101a8a:	429c      	cmp	r4, r3
 8101a8c:	d080      	beq.n	8101990 <HAL_DMA_Abort+0xd4>
 8101a8e:	3318      	adds	r3, #24
 8101a90:	429c      	cmp	r4, r3
 8101a92:	f43f af7d 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101a96:	3318      	adds	r3, #24
 8101a98:	429c      	cmp	r4, r3
 8101a9a:	f43f af79 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101a9e:	3318      	adds	r3, #24
 8101aa0:	429c      	cmp	r4, r3
 8101aa2:	f43f af75 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101aa6:	3318      	adds	r3, #24
 8101aa8:	429c      	cmp	r4, r3
 8101aaa:	f43f af71 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101aae:	3318      	adds	r3, #24
 8101ab0:	429c      	cmp	r4, r3
 8101ab2:	f43f af6d 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101ab6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8101aba:	429c      	cmp	r4, r3
 8101abc:	f43f af68 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101ac0:	3318      	adds	r3, #24
 8101ac2:	429c      	cmp	r4, r3
 8101ac4:	f43f af64 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101ac8:	3318      	adds	r3, #24
 8101aca:	429c      	cmp	r4, r3
 8101acc:	f43f af60 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101ad0:	3318      	adds	r3, #24
 8101ad2:	429c      	cmp	r4, r3
 8101ad4:	f43f af5c 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101ad8:	3318      	adds	r3, #24
 8101ada:	429c      	cmp	r4, r3
 8101adc:	f43f af58 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101ae0:	3318      	adds	r3, #24
 8101ae2:	429c      	cmp	r4, r3
 8101ae4:	f43f af54 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101ae8:	3318      	adds	r3, #24
 8101aea:	429c      	cmp	r4, r3
 8101aec:	f43f af50 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101af0:	3318      	adds	r3, #24
 8101af2:	429c      	cmp	r4, r3
 8101af4:	f43f af4c 	beq.w	8101990 <HAL_DMA_Abort+0xd4>
 8101af8:	e727      	b.n	810194a <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 8101afa:	4b27      	ldr	r3, [pc, #156]	; (8101b98 <HAL_DMA_Abort+0x2dc>)
 8101afc:	429c      	cmp	r4, r3
 8101afe:	f43f af4f 	beq.w	81019a0 <HAL_DMA_Abort+0xe4>
 8101b02:	3318      	adds	r3, #24
 8101b04:	429c      	cmp	r4, r3
 8101b06:	f43f af4b 	beq.w	81019a0 <HAL_DMA_Abort+0xe4>
 8101b0a:	3318      	adds	r3, #24
 8101b0c:	429c      	cmp	r4, r3
 8101b0e:	f43f af47 	beq.w	81019a0 <HAL_DMA_Abort+0xe4>
 8101b12:	3318      	adds	r3, #24
 8101b14:	429c      	cmp	r4, r3
 8101b16:	f43f af43 	beq.w	81019a0 <HAL_DMA_Abort+0xe4>
 8101b1a:	3318      	adds	r3, #24
 8101b1c:	429c      	cmp	r4, r3
 8101b1e:	f43f af3f 	beq.w	81019a0 <HAL_DMA_Abort+0xe4>
 8101b22:	3318      	adds	r3, #24
 8101b24:	429c      	cmp	r4, r3
 8101b26:	f43f af3b 	beq.w	81019a0 <HAL_DMA_Abort+0xe4>
 8101b2a:	3318      	adds	r3, #24
 8101b2c:	429c      	cmp	r4, r3
 8101b2e:	f43f af37 	beq.w	81019a0 <HAL_DMA_Abort+0xe4>
 8101b32:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8101b36:	429c      	cmp	r4, r3
 8101b38:	f43f af32 	beq.w	81019a0 <HAL_DMA_Abort+0xe4>
 8101b3c:	3318      	adds	r3, #24
 8101b3e:	429c      	cmp	r4, r3
 8101b40:	f43f af2e 	beq.w	81019a0 <HAL_DMA_Abort+0xe4>
 8101b44:	3318      	adds	r3, #24
 8101b46:	429c      	cmp	r4, r3
 8101b48:	f43f af2a 	beq.w	81019a0 <HAL_DMA_Abort+0xe4>
 8101b4c:	e728      	b.n	81019a0 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8101b4e:	f7ff f9bd 	bl	8100ecc <HAL_GetTick>
 8101b52:	1bc0      	subs	r0, r0, r7
 8101b54:	2805      	cmp	r0, #5
 8101b56:	f67f af27 	bls.w	81019a8 <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8101b5a:	2320      	movs	r3, #32
 8101b5c:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8101b5e:	2300      	movs	r3, #0
 8101b60:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8101b64:	2303      	movs	r3, #3
 8101b66:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
        return HAL_ERROR;
 8101b6a:	e6b6      	b.n	81018da <HAL_DMA_Abort+0x1e>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101b6c:	213f      	movs	r1, #63	; 0x3f
 8101b6e:	fa01 f202 	lsl.w	r2, r1, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101b72:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101b74:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101b76:	d113      	bne.n	8101ba0 <HAL_DMA_Abort+0x2e4>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8101b78:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 8101b7c:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8101b7e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8101b80:	2b00      	cmp	r3, #0
 8101b82:	d13c      	bne.n	8101bfe <HAL_DMA_Abort+0x342>
    __HAL_UNLOCK(hdma);
 8101b84:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8101b86:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8101b88:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8101b8c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8101b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8101b92:	bf00      	nop
 8101b94:	40020010 	.word	0x40020010
 8101b98:	40020028 	.word	0x40020028
 8101b9c:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101ba0:	4a1b      	ldr	r2, [pc, #108]	; (8101c10 <HAL_DMA_Abort+0x354>)
 8101ba2:	4293      	cmp	r3, r2
 8101ba4:	d0e8      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101ba6:	3218      	adds	r2, #24
 8101ba8:	4293      	cmp	r3, r2
 8101baa:	d0e5      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bac:	3218      	adds	r2, #24
 8101bae:	4293      	cmp	r3, r2
 8101bb0:	d0e2      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bb2:	3218      	adds	r2, #24
 8101bb4:	4293      	cmp	r3, r2
 8101bb6:	d0df      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bb8:	3218      	adds	r2, #24
 8101bba:	4293      	cmp	r3, r2
 8101bbc:	d0dc      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bbe:	3218      	adds	r2, #24
 8101bc0:	4293      	cmp	r3, r2
 8101bc2:	d0d9      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bc4:	3218      	adds	r2, #24
 8101bc6:	4293      	cmp	r3, r2
 8101bc8:	d0d6      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bca:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8101bce:	4293      	cmp	r3, r2
 8101bd0:	d0d2      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bd2:	3218      	adds	r2, #24
 8101bd4:	4293      	cmp	r3, r2
 8101bd6:	d0cf      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bd8:	3218      	adds	r2, #24
 8101bda:	4293      	cmp	r3, r2
 8101bdc:	d0cc      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bde:	3218      	adds	r2, #24
 8101be0:	4293      	cmp	r3, r2
 8101be2:	d0c9      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101be4:	3218      	adds	r2, #24
 8101be6:	4293      	cmp	r3, r2
 8101be8:	d0c6      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bea:	3218      	adds	r2, #24
 8101bec:	4293      	cmp	r3, r2
 8101bee:	d0c3      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bf0:	3218      	adds	r2, #24
 8101bf2:	4293      	cmp	r3, r2
 8101bf4:	d0c0      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bf6:	3218      	adds	r2, #24
 8101bf8:	4293      	cmp	r3, r2
 8101bfa:	d0bd      	beq.n	8101b78 <HAL_DMA_Abort+0x2bc>
 8101bfc:	e721      	b.n	8101a42 <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8101bfe:	681a      	ldr	r2, [r3, #0]
 8101c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8101c04:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8101c06:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 8101c0a:	605a      	str	r2, [r3, #4]
 8101c0c:	e7ba      	b.n	8101b84 <HAL_DMA_Abort+0x2c8>
 8101c0e:	bf00      	nop
 8101c10:	40020028 	.word	0x40020028

08101c14 <HAL_DMA_Abort_IT>:
{
 8101c14:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8101c16:	b128      	cbz	r0, 8101c24 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8101c18:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8101c1c:	2b02      	cmp	r3, #2
 8101c1e:	d003      	beq.n	8101c28 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8101c20:	2380      	movs	r3, #128	; 0x80
 8101c22:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8101c24:	2001      	movs	r0, #1
 8101c26:	e07f      	b.n	8101d28 <HAL_DMA_Abort_IT+0x114>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101c28:	6803      	ldr	r3, [r0, #0]
 8101c2a:	4a50      	ldr	r2, [pc, #320]	; (8101d6c <HAL_DMA_Abort_IT+0x158>)
 8101c2c:	4293      	cmp	r3, r2
 8101c2e:	d052      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c30:	494f      	ldr	r1, [pc, #316]	; (8101d70 <HAL_DMA_Abort_IT+0x15c>)
 8101c32:	428b      	cmp	r3, r1
 8101c34:	d04f      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c36:	3118      	adds	r1, #24
 8101c38:	428b      	cmp	r3, r1
 8101c3a:	d04c      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c3c:	3118      	adds	r1, #24
 8101c3e:	428b      	cmp	r3, r1
 8101c40:	d049      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c42:	3118      	adds	r1, #24
 8101c44:	428b      	cmp	r3, r1
 8101c46:	d046      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c48:	3118      	adds	r1, #24
 8101c4a:	428b      	cmp	r3, r1
 8101c4c:	d043      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c4e:	3118      	adds	r1, #24
 8101c50:	428b      	cmp	r3, r1
 8101c52:	d040      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c54:	3118      	adds	r1, #24
 8101c56:	428b      	cmp	r3, r1
 8101c58:	d03d      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c5a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8101c5e:	428b      	cmp	r3, r1
 8101c60:	d039      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c62:	3118      	adds	r1, #24
 8101c64:	428b      	cmp	r3, r1
 8101c66:	d036      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c68:	3118      	adds	r1, #24
 8101c6a:	428b      	cmp	r3, r1
 8101c6c:	d033      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c6e:	3118      	adds	r1, #24
 8101c70:	428b      	cmp	r3, r1
 8101c72:	d030      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c74:	3118      	adds	r1, #24
 8101c76:	428b      	cmp	r3, r1
 8101c78:	d02d      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c7a:	3118      	adds	r1, #24
 8101c7c:	428b      	cmp	r3, r1
 8101c7e:	d02a      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c80:	3118      	adds	r1, #24
 8101c82:	428b      	cmp	r3, r1
 8101c84:	d027      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
 8101c86:	3118      	adds	r1, #24
 8101c88:	428b      	cmp	r3, r1
 8101c8a:	d024      	beq.n	8101cd6 <HAL_DMA_Abort_IT+0xc2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8101c8c:	681a      	ldr	r2, [r3, #0]
 8101c8e:	f022 020e 	bic.w	r2, r2, #14
 8101c92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8101c94:	681a      	ldr	r2, [r3, #0]
 8101c96:	f022 0201 	bic.w	r2, r2, #1
 8101c9a:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101c9c:	4a35      	ldr	r2, [pc, #212]	; (8101d74 <HAL_DMA_Abort_IT+0x160>)
 8101c9e:	4293      	cmp	r3, r2
 8101ca0:	d143      	bne.n	8101d2a <HAL_DMA_Abort_IT+0x116>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8101ca2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8101ca4:	6813      	ldr	r3, [r2, #0]
 8101ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8101caa:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101cac:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 8101cb0:	f003 021f 	and.w	r2, r3, #31
 8101cb4:	2301      	movs	r3, #1
 8101cb6:	4093      	lsls	r3, r2
 8101cb8:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8101cba:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 8101cbe:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8101cc0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8101cc2:	2b00      	cmp	r3, #0
 8101cc4:	d046      	beq.n	8101d54 <HAL_DMA_Abort_IT+0x140>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8101cc6:	681a      	ldr	r2, [r3, #0]
 8101cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8101ccc:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8101cce:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 8101cd2:	605a      	str	r2, [r3, #4]
 8101cd4:	e03e      	b.n	8101d54 <HAL_DMA_Abort_IT+0x140>
      hdma->State = HAL_DMA_STATE_ABORT;
 8101cd6:	2104      	movs	r1, #4
      __HAL_DMA_DISABLE(hdma);
 8101cd8:	4293      	cmp	r3, r2
      hdma->State = HAL_DMA_STATE_ABORT;
 8101cda:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8101cde:	d01e      	beq.n	8101d1e <HAL_DMA_Abort_IT+0x10a>
 8101ce0:	4a23      	ldr	r2, [pc, #140]	; (8101d70 <HAL_DMA_Abort_IT+0x15c>)
 8101ce2:	4293      	cmp	r3, r2
 8101ce4:	d01b      	beq.n	8101d1e <HAL_DMA_Abort_IT+0x10a>
 8101ce6:	3218      	adds	r2, #24
 8101ce8:	4293      	cmp	r3, r2
 8101cea:	d018      	beq.n	8101d1e <HAL_DMA_Abort_IT+0x10a>
 8101cec:	3218      	adds	r2, #24
 8101cee:	4293      	cmp	r3, r2
 8101cf0:	d015      	beq.n	8101d1e <HAL_DMA_Abort_IT+0x10a>
 8101cf2:	3218      	adds	r2, #24
 8101cf4:	4293      	cmp	r3, r2
 8101cf6:	d012      	beq.n	8101d1e <HAL_DMA_Abort_IT+0x10a>
 8101cf8:	3218      	adds	r2, #24
 8101cfa:	4293      	cmp	r3, r2
 8101cfc:	d00f      	beq.n	8101d1e <HAL_DMA_Abort_IT+0x10a>
 8101cfe:	3218      	adds	r2, #24
 8101d00:	4293      	cmp	r3, r2
 8101d02:	d00c      	beq.n	8101d1e <HAL_DMA_Abort_IT+0x10a>
 8101d04:	3218      	adds	r2, #24
 8101d06:	4293      	cmp	r3, r2
 8101d08:	d009      	beq.n	8101d1e <HAL_DMA_Abort_IT+0x10a>
 8101d0a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8101d0e:	4293      	cmp	r3, r2
 8101d10:	d005      	beq.n	8101d1e <HAL_DMA_Abort_IT+0x10a>
 8101d12:	3218      	adds	r2, #24
 8101d14:	4293      	cmp	r3, r2
 8101d16:	d002      	beq.n	8101d1e <HAL_DMA_Abort_IT+0x10a>
 8101d18:	3218      	adds	r2, #24
 8101d1a:	4293      	cmp	r3, r2
 8101d1c:	d0ff      	beq.n	8101d1e <HAL_DMA_Abort_IT+0x10a>
 8101d1e:	681a      	ldr	r2, [r3, #0]
 8101d20:	f022 0201 	bic.w	r2, r2, #1
 8101d24:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8101d26:	2000      	movs	r0, #0
}
 8101d28:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101d2a:	4a13      	ldr	r2, [pc, #76]	; (8101d78 <HAL_DMA_Abort_IT+0x164>)
 8101d2c:	4293      	cmp	r3, r2
 8101d2e:	d0b8      	beq.n	8101ca2 <HAL_DMA_Abort_IT+0x8e>
 8101d30:	3214      	adds	r2, #20
 8101d32:	4293      	cmp	r3, r2
 8101d34:	d0b5      	beq.n	8101ca2 <HAL_DMA_Abort_IT+0x8e>
 8101d36:	3214      	adds	r2, #20
 8101d38:	4293      	cmp	r3, r2
 8101d3a:	d0b2      	beq.n	8101ca2 <HAL_DMA_Abort_IT+0x8e>
 8101d3c:	3214      	adds	r2, #20
 8101d3e:	4293      	cmp	r3, r2
 8101d40:	d0af      	beq.n	8101ca2 <HAL_DMA_Abort_IT+0x8e>
 8101d42:	3214      	adds	r2, #20
 8101d44:	4293      	cmp	r3, r2
 8101d46:	d0ac      	beq.n	8101ca2 <HAL_DMA_Abort_IT+0x8e>
 8101d48:	3214      	adds	r2, #20
 8101d4a:	4293      	cmp	r3, r2
 8101d4c:	d0a9      	beq.n	8101ca2 <HAL_DMA_Abort_IT+0x8e>
 8101d4e:	3214      	adds	r2, #20
 8101d50:	4293      	cmp	r3, r2
 8101d52:	d0a6      	beq.n	8101ca2 <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8101d54:	2301      	movs	r3, #1
 8101d56:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8101d5a:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8101d5c:	2400      	movs	r4, #0
 8101d5e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8101d62:	b10b      	cbz	r3, 8101d68 <HAL_DMA_Abort_IT+0x154>
        hdma->XferAbortCallback(hdma);
 8101d64:	4798      	blx	r3
 8101d66:	e7de      	b.n	8101d26 <HAL_DMA_Abort_IT+0x112>
  return HAL_OK;
 8101d68:	4618      	mov	r0, r3
 8101d6a:	e7dd      	b.n	8101d28 <HAL_DMA_Abort_IT+0x114>
 8101d6c:	40020010 	.word	0x40020010
 8101d70:	40020028 	.word	0x40020028
 8101d74:	58025408 	.word	0x58025408
 8101d78:	5802541c 	.word	0x5802541c

08101d7c <HAL_DMA_IRQHandler>:
{
 8101d7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8101d80:	2300      	movs	r3, #0
 8101d82:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8101d84:	4b29      	ldr	r3, [pc, #164]	; (8101e2c <HAL_DMA_IRQHandler+0xb0>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8101d86:	4e2a      	ldr	r6, [pc, #168]	; (8101e30 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8101d88:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8101d8a:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8101d8c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8101d8e:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8101d90:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 8101d94:	f8d5 c000 	ldr.w	ip, [r5]
{
 8101d98:	4604      	mov	r4, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8101d9a:	d04f      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101d9c:	4a25      	ldr	r2, [pc, #148]	; (8101e34 <HAL_DMA_IRQHandler+0xb8>)
 8101d9e:	4293      	cmp	r3, r2
 8101da0:	d04c      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101da2:	3218      	adds	r2, #24
 8101da4:	4293      	cmp	r3, r2
 8101da6:	d049      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101da8:	3218      	adds	r2, #24
 8101daa:	4293      	cmp	r3, r2
 8101dac:	d046      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101dae:	3218      	adds	r2, #24
 8101db0:	4293      	cmp	r3, r2
 8101db2:	d043      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101db4:	3218      	adds	r2, #24
 8101db6:	4293      	cmp	r3, r2
 8101db8:	d040      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101dba:	3218      	adds	r2, #24
 8101dbc:	4293      	cmp	r3, r2
 8101dbe:	d03d      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101dc0:	3218      	adds	r2, #24
 8101dc2:	4293      	cmp	r3, r2
 8101dc4:	d03a      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101dc6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8101dca:	4293      	cmp	r3, r2
 8101dcc:	d036      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101dce:	3218      	adds	r2, #24
 8101dd0:	4293      	cmp	r3, r2
 8101dd2:	d033      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101dd4:	3218      	adds	r2, #24
 8101dd6:	4293      	cmp	r3, r2
 8101dd8:	d030      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101dda:	3218      	adds	r2, #24
 8101ddc:	4293      	cmp	r3, r2
 8101dde:	d02d      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101de0:	3218      	adds	r2, #24
 8101de2:	4293      	cmp	r3, r2
 8101de4:	d02a      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101de6:	3218      	adds	r2, #24
 8101de8:	4293      	cmp	r3, r2
 8101dea:	d027      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101dec:	3218      	adds	r2, #24
 8101dee:	4293      	cmp	r3, r2
 8101df0:	d024      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
 8101df2:	3218      	adds	r2, #24
 8101df4:	4293      	cmp	r3, r2
 8101df6:	d021      	beq.n	8101e3c <HAL_DMA_IRQHandler+0xc0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8101df8:	4a0f      	ldr	r2, [pc, #60]	; (8101e38 <HAL_DMA_IRQHandler+0xbc>)
 8101dfa:	4293      	cmp	r3, r2
 8101dfc:	f040 820b 	bne.w	8102216 <HAL_DMA_IRQHandler+0x49a>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8101e00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8101e02:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8101e04:	f001 011f 	and.w	r1, r1, #31
 8101e08:	2004      	movs	r0, #4
 8101e0a:	4088      	lsls	r0, r1
 8101e0c:	ea10 0f0c 	tst.w	r0, ip
 8101e10:	f000 8228 	beq.w	8102264 <HAL_DMA_IRQHandler+0x4e8>
 8101e14:	0756      	lsls	r6, r2, #29
 8101e16:	f140 8225 	bpl.w	8102264 <HAL_DMA_IRQHandler+0x4e8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8101e1a:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8101e1c:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8101e1e:	f140 8219 	bpl.w	8102254 <HAL_DMA_IRQHandler+0x4d8>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8101e22:	03d3      	lsls	r3, r2, #15
 8101e24:	f100 821c 	bmi.w	8102260 <HAL_DMA_IRQHandler+0x4e4>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8101e28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8101e2a:	e180      	b.n	810212e <HAL_DMA_IRQHandler+0x3b2>
 8101e2c:	10000004 	.word	0x10000004
 8101e30:	40020010 	.word	0x40020010
 8101e34:	40020028 	.word	0x40020028
 8101e38:	58025408 	.word	0x58025408
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101e3c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8101e3e:	2008      	movs	r0, #8
 8101e40:	f002 021f 	and.w	r2, r2, #31
 8101e44:	4090      	lsls	r0, r2
 8101e46:	ea10 0f08 	tst.w	r0, r8
 8101e4a:	d03d      	beq.n	8101ec8 <HAL_DMA_IRQHandler+0x14c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8101e4c:	42b3      	cmp	r3, r6
 8101e4e:	d02e      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e50:	4985      	ldr	r1, [pc, #532]	; (8102068 <HAL_DMA_IRQHandler+0x2ec>)
 8101e52:	428b      	cmp	r3, r1
 8101e54:	d02b      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e56:	3118      	adds	r1, #24
 8101e58:	428b      	cmp	r3, r1
 8101e5a:	d028      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e5c:	3118      	adds	r1, #24
 8101e5e:	428b      	cmp	r3, r1
 8101e60:	d025      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e62:	3118      	adds	r1, #24
 8101e64:	428b      	cmp	r3, r1
 8101e66:	d022      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e68:	3118      	adds	r1, #24
 8101e6a:	428b      	cmp	r3, r1
 8101e6c:	d01f      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e6e:	3118      	adds	r1, #24
 8101e70:	428b      	cmp	r3, r1
 8101e72:	d01c      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e74:	3118      	adds	r1, #24
 8101e76:	428b      	cmp	r3, r1
 8101e78:	d019      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e7a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8101e7e:	428b      	cmp	r3, r1
 8101e80:	d015      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e82:	3118      	adds	r1, #24
 8101e84:	428b      	cmp	r3, r1
 8101e86:	d012      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e88:	3118      	adds	r1, #24
 8101e8a:	428b      	cmp	r3, r1
 8101e8c:	d00f      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e8e:	3118      	adds	r1, #24
 8101e90:	428b      	cmp	r3, r1
 8101e92:	d00c      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e94:	3118      	adds	r1, #24
 8101e96:	428b      	cmp	r3, r1
 8101e98:	d009      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101e9a:	3118      	adds	r1, #24
 8101e9c:	428b      	cmp	r3, r1
 8101e9e:	d006      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101ea0:	3118      	adds	r1, #24
 8101ea2:	428b      	cmp	r3, r1
 8101ea4:	d003      	beq.n	8101eae <HAL_DMA_IRQHandler+0x132>
 8101ea6:	3118      	adds	r1, #24
 8101ea8:	428b      	cmp	r3, r1
 8101eaa:	f040 80c2 	bne.w	8102032 <HAL_DMA_IRQHandler+0x2b6>
 8101eae:	6819      	ldr	r1, [r3, #0]
 8101eb0:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8101eb4:	b141      	cbz	r1, 8101ec8 <HAL_DMA_IRQHandler+0x14c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8101eb6:	6819      	ldr	r1, [r3, #0]
 8101eb8:	f021 0104 	bic.w	r1, r1, #4
 8101ebc:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8101ebe:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8101ec0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8101ec2:	f041 0101 	orr.w	r1, r1, #1
 8101ec6:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101ec8:	fa28 f102 	lsr.w	r1, r8, r2
 8101ecc:	07c8      	lsls	r0, r1, #31
 8101ece:	d534      	bpl.n	8101f3a <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8101ed0:	42b3      	cmp	r3, r6
 8101ed2:	d02e      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101ed4:	4964      	ldr	r1, [pc, #400]	; (8102068 <HAL_DMA_IRQHandler+0x2ec>)
 8101ed6:	428b      	cmp	r3, r1
 8101ed8:	d02b      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101eda:	3118      	adds	r1, #24
 8101edc:	428b      	cmp	r3, r1
 8101ede:	d028      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101ee0:	3118      	adds	r1, #24
 8101ee2:	428b      	cmp	r3, r1
 8101ee4:	d025      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101ee6:	3118      	adds	r1, #24
 8101ee8:	428b      	cmp	r3, r1
 8101eea:	d022      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101eec:	3118      	adds	r1, #24
 8101eee:	428b      	cmp	r3, r1
 8101ef0:	d01f      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101ef2:	3118      	adds	r1, #24
 8101ef4:	428b      	cmp	r3, r1
 8101ef6:	d01c      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101ef8:	3118      	adds	r1, #24
 8101efa:	428b      	cmp	r3, r1
 8101efc:	d019      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101efe:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8101f02:	428b      	cmp	r3, r1
 8101f04:	d015      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101f06:	3118      	adds	r1, #24
 8101f08:	428b      	cmp	r3, r1
 8101f0a:	d012      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101f0c:	3118      	adds	r1, #24
 8101f0e:	428b      	cmp	r3, r1
 8101f10:	d00f      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101f12:	3118      	adds	r1, #24
 8101f14:	428b      	cmp	r3, r1
 8101f16:	d00c      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101f18:	3118      	adds	r1, #24
 8101f1a:	428b      	cmp	r3, r1
 8101f1c:	d009      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101f1e:	3118      	adds	r1, #24
 8101f20:	428b      	cmp	r3, r1
 8101f22:	d006      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101f24:	3118      	adds	r1, #24
 8101f26:	428b      	cmp	r3, r1
 8101f28:	d003      	beq.n	8101f32 <HAL_DMA_IRQHandler+0x1b6>
 8101f2a:	3118      	adds	r1, #24
 8101f2c:	428b      	cmp	r3, r1
 8101f2e:	f040 8084 	bne.w	810203a <HAL_DMA_IRQHandler+0x2be>
 8101f32:	6959      	ldr	r1, [r3, #20]
 8101f34:	0609      	lsls	r1, r1, #24
 8101f36:	f100 8082 	bmi.w	810203e <HAL_DMA_IRQHandler+0x2c2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101f3a:	2104      	movs	r1, #4
 8101f3c:	4091      	lsls	r1, r2
 8101f3e:	ea11 0f08 	tst.w	r1, r8
 8101f42:	d032      	beq.n	8101faa <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8101f44:	42b3      	cmp	r3, r6
 8101f46:	d02d      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f48:	4847      	ldr	r0, [pc, #284]	; (8102068 <HAL_DMA_IRQHandler+0x2ec>)
 8101f4a:	4283      	cmp	r3, r0
 8101f4c:	d02a      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f4e:	3018      	adds	r0, #24
 8101f50:	4283      	cmp	r3, r0
 8101f52:	d027      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f54:	3018      	adds	r0, #24
 8101f56:	4283      	cmp	r3, r0
 8101f58:	d024      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f5a:	3018      	adds	r0, #24
 8101f5c:	4283      	cmp	r3, r0
 8101f5e:	d021      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f60:	3018      	adds	r0, #24
 8101f62:	4283      	cmp	r3, r0
 8101f64:	d01e      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f66:	3018      	adds	r0, #24
 8101f68:	4283      	cmp	r3, r0
 8101f6a:	d01b      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f6c:	3018      	adds	r0, #24
 8101f6e:	4283      	cmp	r3, r0
 8101f70:	d018      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f72:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8101f76:	4283      	cmp	r3, r0
 8101f78:	d014      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f7a:	3018      	adds	r0, #24
 8101f7c:	4283      	cmp	r3, r0
 8101f7e:	d011      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f80:	3018      	adds	r0, #24
 8101f82:	4283      	cmp	r3, r0
 8101f84:	d00e      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f86:	3018      	adds	r0, #24
 8101f88:	4283      	cmp	r3, r0
 8101f8a:	d00b      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f8c:	3018      	adds	r0, #24
 8101f8e:	4283      	cmp	r3, r0
 8101f90:	d008      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f92:	3018      	adds	r0, #24
 8101f94:	4283      	cmp	r3, r0
 8101f96:	d005      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f98:	3018      	adds	r0, #24
 8101f9a:	4283      	cmp	r3, r0
 8101f9c:	d002      	beq.n	8101fa4 <HAL_DMA_IRQHandler+0x228>
 8101f9e:	3018      	adds	r0, #24
 8101fa0:	4283      	cmp	r3, r0
 8101fa2:	d154      	bne.n	810204e <HAL_DMA_IRQHandler+0x2d2>
 8101fa4:	6818      	ldr	r0, [r3, #0]
 8101fa6:	0780      	lsls	r0, r0, #30
 8101fa8:	d453      	bmi.n	8102052 <HAL_DMA_IRQHandler+0x2d6>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101faa:	2110      	movs	r1, #16
 8101fac:	fa01 f202 	lsl.w	r2, r1, r2
 8101fb0:	ea12 0f08 	tst.w	r2, r8
 8101fb4:	d05e      	beq.n	8102074 <HAL_DMA_IRQHandler+0x2f8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8101fb6:	42b3      	cmp	r3, r6
 8101fb8:	d02d      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8101fba:	492b      	ldr	r1, [pc, #172]	; (8102068 <HAL_DMA_IRQHandler+0x2ec>)
 8101fbc:	428b      	cmp	r3, r1
 8101fbe:	d02a      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8101fc0:	3118      	adds	r1, #24
 8101fc2:	428b      	cmp	r3, r1
 8101fc4:	d027      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8101fc6:	3118      	adds	r1, #24
 8101fc8:	428b      	cmp	r3, r1
 8101fca:	d024      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8101fcc:	3118      	adds	r1, #24
 8101fce:	428b      	cmp	r3, r1
 8101fd0:	d021      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8101fd2:	3118      	adds	r1, #24
 8101fd4:	428b      	cmp	r3, r1
 8101fd6:	d01e      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8101fd8:	3118      	adds	r1, #24
 8101fda:	428b      	cmp	r3, r1
 8101fdc:	d01b      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8101fde:	3118      	adds	r1, #24
 8101fe0:	428b      	cmp	r3, r1
 8101fe2:	d018      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8101fe4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8101fe8:	428b      	cmp	r3, r1
 8101fea:	d014      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8101fec:	3118      	adds	r1, #24
 8101fee:	428b      	cmp	r3, r1
 8101ff0:	d011      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8101ff2:	3118      	adds	r1, #24
 8101ff4:	428b      	cmp	r3, r1
 8101ff6:	d00e      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8101ff8:	3118      	adds	r1, #24
 8101ffa:	428b      	cmp	r3, r1
 8101ffc:	d00b      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8101ffe:	3118      	adds	r1, #24
 8102000:	428b      	cmp	r3, r1
 8102002:	d008      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8102004:	3118      	adds	r1, #24
 8102006:	428b      	cmp	r3, r1
 8102008:	d005      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 810200a:	3118      	adds	r1, #24
 810200c:	428b      	cmp	r3, r1
 810200e:	d002      	beq.n	8102016 <HAL_DMA_IRQHandler+0x29a>
 8102010:	3118      	adds	r1, #24
 8102012:	428b      	cmp	r3, r1
 8102014:	d123      	bne.n	810205e <HAL_DMA_IRQHandler+0x2e2>
 8102016:	6819      	ldr	r1, [r3, #0]
 8102018:	f011 0f08 	tst.w	r1, #8
 810201c:	d02a      	beq.n	8102074 <HAL_DMA_IRQHandler+0x2f8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 810201e:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102020:	681a      	ldr	r2, [r3, #0]
 8102022:	0350      	lsls	r0, r2, #13
 8102024:	f140 808b 	bpl.w	810213e <HAL_DMA_IRQHandler+0x3c2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102028:	681b      	ldr	r3, [r3, #0]
 810202a:	0319      	lsls	r1, r3, #12
 810202c:	d41e      	bmi.n	810206c <HAL_DMA_IRQHandler+0x2f0>
          if(hdma->XferHalfCpltCallback != NULL)
 810202e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8102030:	e01d      	b.n	810206e <HAL_DMA_IRQHandler+0x2f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8102032:	6819      	ldr	r1, [r3, #0]
 8102034:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8102038:	e73c      	b.n	8101eb4 <HAL_DMA_IRQHandler+0x138>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810203a:	6819      	ldr	r1, [r3, #0]
 810203c:	e77d      	b.n	8101f3a <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810203e:	2101      	movs	r1, #1
 8102040:	4091      	lsls	r1, r2
 8102042:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8102044:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8102046:	f041 0102 	orr.w	r1, r1, #2
 810204a:	6561      	str	r1, [r4, #84]	; 0x54
 810204c:	e775      	b.n	8101f3a <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810204e:	6819      	ldr	r1, [r3, #0]
 8102050:	e7ab      	b.n	8101faa <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102052:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8102054:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8102056:	f041 0104 	orr.w	r1, r1, #4
 810205a:	6561      	str	r1, [r4, #84]	; 0x54
 810205c:	e7a5      	b.n	8101faa <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 810205e:	6819      	ldr	r1, [r3, #0]
 8102060:	f011 0f04 	tst.w	r1, #4
 8102064:	e7da      	b.n	810201c <HAL_DMA_IRQHandler+0x2a0>
 8102066:	bf00      	nop
 8102068:	40020028 	.word	0x40020028
            if(hdma->XferM1HalfCpltCallback != NULL)
 810206c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 810206e:	b10b      	cbz	r3, 8102074 <HAL_DMA_IRQHandler+0x2f8>
            hdma->XferHalfCpltCallback(hdma);
 8102070:	4620      	mov	r0, r4
 8102072:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102074:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8102076:	2120      	movs	r1, #32
 8102078:	f002 021f 	and.w	r2, r2, #31
 810207c:	4091      	lsls	r1, r2
 810207e:	ea11 0f08 	tst.w	r1, r8
 8102082:	d072      	beq.n	810216a <HAL_DMA_IRQHandler+0x3ee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8102084:	6823      	ldr	r3, [r4, #0]
 8102086:	42b3      	cmp	r3, r6
 8102088:	d02d      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 810208a:	488e      	ldr	r0, [pc, #568]	; (81022c4 <HAL_DMA_IRQHandler+0x548>)
 810208c:	4283      	cmp	r3, r0
 810208e:	d02a      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 8102090:	3018      	adds	r0, #24
 8102092:	4283      	cmp	r3, r0
 8102094:	d027      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 8102096:	3018      	adds	r0, #24
 8102098:	4283      	cmp	r3, r0
 810209a:	d024      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 810209c:	3018      	adds	r0, #24
 810209e:	4283      	cmp	r3, r0
 81020a0:	d021      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 81020a2:	3018      	adds	r0, #24
 81020a4:	4283      	cmp	r3, r0
 81020a6:	d01e      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 81020a8:	3018      	adds	r0, #24
 81020aa:	4283      	cmp	r3, r0
 81020ac:	d01b      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 81020ae:	3018      	adds	r0, #24
 81020b0:	4283      	cmp	r3, r0
 81020b2:	d018      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 81020b4:	f500 7056 	add.w	r0, r0, #856	; 0x358
 81020b8:	4283      	cmp	r3, r0
 81020ba:	d014      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 81020bc:	3018      	adds	r0, #24
 81020be:	4283      	cmp	r3, r0
 81020c0:	d011      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 81020c2:	3018      	adds	r0, #24
 81020c4:	4283      	cmp	r3, r0
 81020c6:	d00e      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 81020c8:	3018      	adds	r0, #24
 81020ca:	4283      	cmp	r3, r0
 81020cc:	d00b      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 81020ce:	3018      	adds	r0, #24
 81020d0:	4283      	cmp	r3, r0
 81020d2:	d008      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 81020d4:	3018      	adds	r0, #24
 81020d6:	4283      	cmp	r3, r0
 81020d8:	d005      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 81020da:	3018      	adds	r0, #24
 81020dc:	4283      	cmp	r3, r0
 81020de:	d002      	beq.n	81020e6 <HAL_DMA_IRQHandler+0x36a>
 81020e0:	3018      	adds	r0, #24
 81020e2:	4283      	cmp	r3, r0
 81020e4:	d133      	bne.n	810214e <HAL_DMA_IRQHandler+0x3d2>
 81020e6:	6818      	ldr	r0, [r3, #0]
 81020e8:	f010 0f10 	tst.w	r0, #16
 81020ec:	d03d      	beq.n	810216a <HAL_DMA_IRQHandler+0x3ee>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81020ee:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 81020f0:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 81020f4:	2904      	cmp	r1, #4
 81020f6:	d12e      	bne.n	8102156 <HAL_DMA_IRQHandler+0x3da>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81020f8:	6819      	ldr	r1, [r3, #0]
 81020fa:	f021 0116 	bic.w	r1, r1, #22
 81020fe:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102100:	6959      	ldr	r1, [r3, #20]
 8102102:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8102106:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8102108:	6c21      	ldr	r1, [r4, #64]	; 0x40
 810210a:	b909      	cbnz	r1, 8102110 <HAL_DMA_IRQHandler+0x394>
 810210c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 810210e:	b119      	cbz	r1, 8102118 <HAL_DMA_IRQHandler+0x39c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102110:	6819      	ldr	r1, [r3, #0]
 8102112:	f021 0108 	bic.w	r1, r1, #8
 8102116:	6019      	str	r1, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102118:	233f      	movs	r3, #63	; 0x3f
 810211a:	fa03 f202 	lsl.w	r2, r3, r2
          __HAL_UNLOCK(hdma);
 810211e:	2300      	movs	r3, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102120:	60aa      	str	r2, [r5, #8]
          __HAL_UNLOCK(hdma);
 8102122:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8102126:	2301      	movs	r3, #1
 8102128:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 810212c:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 810212e:	2b00      	cmp	r3, #0
 8102130:	f000 808d 	beq.w	810224e <HAL_DMA_IRQHandler+0x4d2>
        hdma->XferErrorCallback(hdma);
 8102134:	4620      	mov	r0, r4
}
 8102136:	b002      	add	sp, #8
 8102138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 810213c:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810213e:	681a      	ldr	r2, [r3, #0]
 8102140:	05d2      	lsls	r2, r2, #23
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102142:	bf5e      	ittt	pl
 8102144:	681a      	ldrpl	r2, [r3, #0]
 8102146:	f022 0208 	bicpl.w	r2, r2, #8
 810214a:	601a      	strpl	r2, [r3, #0]
 810214c:	e76f      	b.n	810202e <HAL_DMA_IRQHandler+0x2b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 810214e:	6818      	ldr	r0, [r3, #0]
 8102150:	f010 0f02 	tst.w	r0, #2
 8102154:	e7ca      	b.n	81020ec <HAL_DMA_IRQHandler+0x370>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102156:	681a      	ldr	r2, [r3, #0]
 8102158:	0355      	lsls	r5, r2, #13
 810215a:	d54d      	bpl.n	81021f8 <HAL_DMA_IRQHandler+0x47c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810215c:	681b      	ldr	r3, [r3, #0]
 810215e:	0318      	lsls	r0, r3, #12
 8102160:	d457      	bmi.n	8102212 <HAL_DMA_IRQHandler+0x496>
            if(hdma->XferM1CpltCallback != NULL)
 8102162:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 8102164:	b10b      	cbz	r3, 810216a <HAL_DMA_IRQHandler+0x3ee>
            hdma->XferCpltCallback(hdma);
 8102166:	4620      	mov	r0, r4
 8102168:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 810216a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 810216c:	2b00      	cmp	r3, #0
 810216e:	d06e      	beq.n	810224e <HAL_DMA_IRQHandler+0x4d2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8102170:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102172:	07d9      	lsls	r1, r3, #31
 8102174:	d53e      	bpl.n	81021f4 <HAL_DMA_IRQHandler+0x478>
        hdma->State = HAL_DMA_STATE_ABORT;
 8102176:	2304      	movs	r3, #4
 8102178:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 810217c:	6823      	ldr	r3, [r4, #0]
 810217e:	42b3      	cmp	r3, r6
 8102180:	d01e      	beq.n	81021c0 <HAL_DMA_IRQHandler+0x444>
 8102182:	4a50      	ldr	r2, [pc, #320]	; (81022c4 <HAL_DMA_IRQHandler+0x548>)
 8102184:	4293      	cmp	r3, r2
 8102186:	d01b      	beq.n	81021c0 <HAL_DMA_IRQHandler+0x444>
 8102188:	3218      	adds	r2, #24
 810218a:	4293      	cmp	r3, r2
 810218c:	d018      	beq.n	81021c0 <HAL_DMA_IRQHandler+0x444>
 810218e:	3218      	adds	r2, #24
 8102190:	4293      	cmp	r3, r2
 8102192:	d015      	beq.n	81021c0 <HAL_DMA_IRQHandler+0x444>
 8102194:	3218      	adds	r2, #24
 8102196:	4293      	cmp	r3, r2
 8102198:	d012      	beq.n	81021c0 <HAL_DMA_IRQHandler+0x444>
 810219a:	3218      	adds	r2, #24
 810219c:	4293      	cmp	r3, r2
 810219e:	d00f      	beq.n	81021c0 <HAL_DMA_IRQHandler+0x444>
 81021a0:	3218      	adds	r2, #24
 81021a2:	4293      	cmp	r3, r2
 81021a4:	d00c      	beq.n	81021c0 <HAL_DMA_IRQHandler+0x444>
 81021a6:	3218      	adds	r2, #24
 81021a8:	4293      	cmp	r3, r2
 81021aa:	d009      	beq.n	81021c0 <HAL_DMA_IRQHandler+0x444>
 81021ac:	f502 7256 	add.w	r2, r2, #856	; 0x358
 81021b0:	4293      	cmp	r3, r2
 81021b2:	d005      	beq.n	81021c0 <HAL_DMA_IRQHandler+0x444>
 81021b4:	3218      	adds	r2, #24
 81021b6:	4293      	cmp	r3, r2
 81021b8:	d002      	beq.n	81021c0 <HAL_DMA_IRQHandler+0x444>
 81021ba:	3218      	adds	r2, #24
 81021bc:	4293      	cmp	r3, r2
 81021be:	d0ff      	beq.n	81021c0 <HAL_DMA_IRQHandler+0x444>
 81021c0:	681a      	ldr	r2, [r3, #0]
 81021c2:	f022 0201 	bic.w	r2, r2, #1
 81021c6:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 81021c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 81021cc:	fbb7 f7f2 	udiv	r7, r7, r2
          if (++count > timeout)
 81021d0:	9a01      	ldr	r2, [sp, #4]
 81021d2:	3201      	adds	r2, #1
 81021d4:	42ba      	cmp	r2, r7
 81021d6:	9201      	str	r2, [sp, #4]
 81021d8:	d802      	bhi.n	81021e0 <HAL_DMA_IRQHandler+0x464>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81021da:	681a      	ldr	r2, [r3, #0]
 81021dc:	07d2      	lsls	r2, r2, #31
 81021de:	d4f7      	bmi.n	81021d0 <HAL_DMA_IRQHandler+0x454>
        __HAL_UNLOCK(hdma);
 81021e0:	2200      	movs	r2, #0
 81021e2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81021e6:	681b      	ldr	r3, [r3, #0]
 81021e8:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 81021ea:	bf4c      	ite	mi
 81021ec:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 81021ee:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 81021f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 81021f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 81021f6:	e79a      	b.n	810212e <HAL_DMA_IRQHandler+0x3b2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81021f8:	681a      	ldr	r2, [r3, #0]
 81021fa:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 81021fe:	d108      	bne.n	8102212 <HAL_DMA_IRQHandler+0x496>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8102200:	6819      	ldr	r1, [r3, #0]
 8102202:	f021 0110 	bic.w	r1, r1, #16
 8102206:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8102208:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 810220a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 810220e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8102212:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8102214:	e7a6      	b.n	8102164 <HAL_DMA_IRQHandler+0x3e8>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8102216:	4a2c      	ldr	r2, [pc, #176]	; (81022c8 <HAL_DMA_IRQHandler+0x54c>)
 8102218:	4293      	cmp	r3, r2
 810221a:	f43f adf1 	beq.w	8101e00 <HAL_DMA_IRQHandler+0x84>
 810221e:	3214      	adds	r2, #20
 8102220:	4293      	cmp	r3, r2
 8102222:	f43f aded 	beq.w	8101e00 <HAL_DMA_IRQHandler+0x84>
 8102226:	3214      	adds	r2, #20
 8102228:	4293      	cmp	r3, r2
 810222a:	f43f ade9 	beq.w	8101e00 <HAL_DMA_IRQHandler+0x84>
 810222e:	3214      	adds	r2, #20
 8102230:	4293      	cmp	r3, r2
 8102232:	f43f ade5 	beq.w	8101e00 <HAL_DMA_IRQHandler+0x84>
 8102236:	3214      	adds	r2, #20
 8102238:	4293      	cmp	r3, r2
 810223a:	f43f ade1 	beq.w	8101e00 <HAL_DMA_IRQHandler+0x84>
 810223e:	3214      	adds	r2, #20
 8102240:	4293      	cmp	r3, r2
 8102242:	f43f addd 	beq.w	8101e00 <HAL_DMA_IRQHandler+0x84>
 8102246:	3214      	adds	r2, #20
 8102248:	4293      	cmp	r3, r2
 810224a:	f43f add9 	beq.w	8101e00 <HAL_DMA_IRQHandler+0x84>
}
 810224e:	b002      	add	sp, #8
 8102250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8102254:	0697      	lsls	r7, r2, #26
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8102256:	bf5e      	ittt	pl
 8102258:	681a      	ldrpl	r2, [r3, #0]
 810225a:	f022 0204 	bicpl.w	r2, r2, #4
 810225e:	601a      	strpl	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8102260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8102262:	e764      	b.n	810212e <HAL_DMA_IRQHandler+0x3b2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8102264:	2002      	movs	r0, #2
 8102266:	4088      	lsls	r0, r1
 8102268:	ea10 0f0c 	tst.w	r0, ip
 810226c:	d016      	beq.n	810229c <HAL_DMA_IRQHandler+0x520>
 810226e:	0796      	lsls	r6, r2, #30
 8102270:	d514      	bpl.n	810229c <HAL_DMA_IRQHandler+0x520>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8102272:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102274:	0410      	lsls	r0, r2, #16
 8102276:	d503      	bpl.n	8102280 <HAL_DMA_IRQHandler+0x504>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8102278:	03d1      	lsls	r1, r2, #15
 810227a:	d40d      	bmi.n	8102298 <HAL_DMA_IRQHandler+0x51c>
          if(hdma->XferM1CpltCallback != NULL)
 810227c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 810227e:	e756      	b.n	810212e <HAL_DMA_IRQHandler+0x3b2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8102280:	f012 0220 	ands.w	r2, r2, #32
 8102284:	d108      	bne.n	8102298 <HAL_DMA_IRQHandler+0x51c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8102286:	6819      	ldr	r1, [r3, #0]
 8102288:	f021 010a 	bic.w	r1, r1, #10
 810228c:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 810228e:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8102290:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8102294:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8102298:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 810229a:	e748      	b.n	810212e <HAL_DMA_IRQHandler+0x3b2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810229c:	2008      	movs	r0, #8
 810229e:	4088      	lsls	r0, r1
 81022a0:	ea10 0f0c 	tst.w	r0, ip
 81022a4:	d0d3      	beq.n	810224e <HAL_DMA_IRQHandler+0x4d2>
 81022a6:	0712      	lsls	r2, r2, #28
 81022a8:	d5d1      	bpl.n	810224e <HAL_DMA_IRQHandler+0x4d2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81022aa:	681a      	ldr	r2, [r3, #0]
 81022ac:	f022 020e 	bic.w	r2, r2, #14
 81022b0:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81022b2:	2301      	movs	r3, #1
 81022b4:	fa03 f101 	lsl.w	r1, r3, r1
      __HAL_UNLOCK(hdma);
 81022b8:	2200      	movs	r2, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81022ba:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81022bc:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 81022be:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 81022c2:	e795      	b.n	81021f0 <HAL_DMA_IRQHandler+0x474>
 81022c4:	40020028 	.word	0x40020028
 81022c8:	5802541c 	.word	0x5802541c

081022cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81022cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81022d0:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8102498 <HAL_GPIO_Init+0x1cc>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81022d4:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 810249c <HAL_GPIO_Init+0x1d0>
  uint32_t position = 0x00U;
 81022d8:	2300      	movs	r3, #0
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81022da:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81022de:	680a      	ldr	r2, [r1, #0]
 81022e0:	fa32 f503 	lsrs.w	r5, r2, r3
 81022e4:	d102      	bne.n	81022ec <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  }
}
 81022e6:	b003      	add	sp, #12
 81022e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81022ec:	f04f 0c01 	mov.w	ip, #1
 81022f0:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 81022f4:	ea1c 0202 	ands.w	r2, ip, r2
 81022f8:	f000 80b7 	beq.w	810246a <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81022fc:	684d      	ldr	r5, [r1, #4]
 81022fe:	f025 0a10 	bic.w	sl, r5, #16
 8102302:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102306:	2603      	movs	r6, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8102308:	f10a 37ff 	add.w	r7, sl, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810230c:	fa06 f60e 	lsl.w	r6, r6, lr
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8102310:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102312:	ea6f 0606 	mvn.w	r6, r6
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8102316:	d811      	bhi.n	810233c <HAL_GPIO_Init+0x70>
        temp = GPIOx->OSPEEDR;
 8102318:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810231a:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 810231e:	68cf      	ldr	r7, [r1, #12]
 8102320:	fa07 f70e 	lsl.w	r7, r7, lr
 8102324:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8102328:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 810232a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810232c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8102330:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8102334:	409f      	lsls	r7, r3
 8102336:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 810233a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 810233c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810233e:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102342:	688f      	ldr	r7, [r1, #8]
 8102344:	fa07 f70e 	lsl.w	r7, r7, lr
 8102348:	ea47 070c 	orr.w	r7, r7, ip
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810234c:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 8102350:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102352:	d116      	bne.n	8102382 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8102354:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8102358:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810235c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8102360:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102364:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8102368:	f04f 0c0f 	mov.w	ip, #15
 810236c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8102370:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102374:	690f      	ldr	r7, [r1, #16]
 8102376:	fa07 f70b 	lsl.w	r7, r7, fp
 810237a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 810237e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8102382:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102384:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102386:	f005 0703 	and.w	r7, r5, #3
 810238a:	fa07 f70e 	lsl.w	r7, r7, lr
 810238e:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8102390:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8102392:	00ee      	lsls	r6, r5, #3
 8102394:	d569      	bpl.n	810246a <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102396:	f8d8 60f4 	ldr.w	r6, [r8, #244]	; 0xf4
 810239a:	f046 0602 	orr.w	r6, r6, #2
 810239e:	f8c8 60f4 	str.w	r6, [r8, #244]	; 0xf4
 81023a2:	f8d8 60f4 	ldr.w	r6, [r8, #244]	; 0xf4
 81023a6:	f023 0703 	bic.w	r7, r3, #3
 81023aa:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
 81023ae:	f006 0602 	and.w	r6, r6, #2
 81023b2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 81023b6:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81023b8:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81023bc:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 81023be:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81023c2:	f04f 0e0f 	mov.w	lr, #15
 81023c6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 81023ca:	fa0e f60c 	lsl.w	r6, lr, ip
 81023ce:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81023d2:	4e30      	ldr	r6, [pc, #192]	; (8102494 <HAL_GPIO_Init+0x1c8>)
 81023d4:	42b0      	cmp	r0, r6
 81023d6:	d04a      	beq.n	810246e <HAL_GPIO_Init+0x1a2>
 81023d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 81023dc:	42b0      	cmp	r0, r6
 81023de:	d048      	beq.n	8102472 <HAL_GPIO_Init+0x1a6>
 81023e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 81023e4:	42b0      	cmp	r0, r6
 81023e6:	d046      	beq.n	8102476 <HAL_GPIO_Init+0x1aa>
 81023e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 81023ec:	42b0      	cmp	r0, r6
 81023ee:	d044      	beq.n	810247a <HAL_GPIO_Init+0x1ae>
 81023f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 81023f4:	42b0      	cmp	r0, r6
 81023f6:	d042      	beq.n	810247e <HAL_GPIO_Init+0x1b2>
 81023f8:	4548      	cmp	r0, r9
 81023fa:	d042      	beq.n	8102482 <HAL_GPIO_Init+0x1b6>
 81023fc:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8102400:	42b0      	cmp	r0, r6
 8102402:	d040      	beq.n	8102486 <HAL_GPIO_Init+0x1ba>
 8102404:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8102408:	42b0      	cmp	r0, r6
 810240a:	d03e      	beq.n	810248a <HAL_GPIO_Init+0x1be>
 810240c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8102410:	42b0      	cmp	r0, r6
 8102412:	d03c      	beq.n	810248e <HAL_GPIO_Init+0x1c2>
 8102414:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8102418:	42b0      	cmp	r0, r6
 810241a:	bf0c      	ite	eq
 810241c:	2609      	moveq	r6, #9
 810241e:	260a      	movne	r6, #10
 8102420:	fa06 f60c 	lsl.w	r6, r6, ip
 8102424:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102428:	60be      	str	r6, [r7, #8]
        temp = EXTI_CurrentCPU->IMR1;
 810242a:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
        temp &= ~(iocurrent);
 810242e:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8102430:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 8102434:	bf0c      	ite	eq
 8102436:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8102438:	4316      	orrne	r6, r2
        EXTI_CurrentCPU->IMR1 = temp;
 810243a:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
        temp = EXTI_CurrentCPU->EMR1;
 810243e:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8102442:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8102446:	bf0c      	ite	eq
 8102448:	403e      	andeq	r6, r7
          temp |= iocurrent;
 810244a:	4316      	orrne	r6, r2
        EXTI_CurrentCPU->EMR1 = temp;
 810244c:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
        temp = EXTI->RTSR1;
 8102450:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8102452:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8102456:	bf0c      	ite	eq
 8102458:	403e      	andeq	r6, r7
          temp |= iocurrent;
 810245a:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 810245c:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 810245e:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8102460:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 8102462:	bf54      	ite	pl
 8102464:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8102466:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8102468:	6066      	str	r6, [r4, #4]
    position++;
 810246a:	3301      	adds	r3, #1
 810246c:	e737      	b.n	81022de <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810246e:	2600      	movs	r6, #0
 8102470:	e7d6      	b.n	8102420 <HAL_GPIO_Init+0x154>
 8102472:	2601      	movs	r6, #1
 8102474:	e7d4      	b.n	8102420 <HAL_GPIO_Init+0x154>
 8102476:	2602      	movs	r6, #2
 8102478:	e7d2      	b.n	8102420 <HAL_GPIO_Init+0x154>
 810247a:	2603      	movs	r6, #3
 810247c:	e7d0      	b.n	8102420 <HAL_GPIO_Init+0x154>
 810247e:	2604      	movs	r6, #4
 8102480:	e7ce      	b.n	8102420 <HAL_GPIO_Init+0x154>
 8102482:	2605      	movs	r6, #5
 8102484:	e7cc      	b.n	8102420 <HAL_GPIO_Init+0x154>
 8102486:	2606      	movs	r6, #6
 8102488:	e7ca      	b.n	8102420 <HAL_GPIO_Init+0x154>
 810248a:	2607      	movs	r6, #7
 810248c:	e7c8      	b.n	8102420 <HAL_GPIO_Init+0x154>
 810248e:	2608      	movs	r6, #8
 8102490:	e7c6      	b.n	8102420 <HAL_GPIO_Init+0x154>
 8102492:	bf00      	nop
 8102494:	58020000 	.word	0x58020000
 8102498:	58024400 	.word	0x58024400
 810249c:	58021400 	.word	0x58021400

081024a0 <HAL_HSEM_ActivateNotification>:
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81024a0:	4a02      	ldr	r2, [pc, #8]	; (81024ac <HAL_HSEM_ActivateNotification+0xc>)
 81024a2:	6913      	ldr	r3, [r2, #16]
 81024a4:	4318      	orrs	r0, r3
 81024a6:	6110      	str	r0, [r2, #16]
#endif
}
 81024a8:	4770      	bx	lr
 81024aa:	bf00      	nop
 81024ac:	58026500 	.word	0x58026500

081024b0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81024b0:	b538      	push	{r3, r4, r5, lr}
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81024b2:	4c1e      	ldr	r4, [pc, #120]	; (810252c <HAL_PWREx_EnterSTOPMode+0x7c>)
 81024b4:	6823      	ldr	r3, [r4, #0]
 81024b6:	f023 0301 	bic.w	r3, r3, #1
 81024ba:	4318      	orrs	r0, r3
{
 81024bc:	460d      	mov	r5, r1
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81024be:	6020      	str	r0, [r4, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81024c0:	b9c2      	cbnz	r2, 81024f4 <HAL_PWREx_EnterSTOPMode+0x44>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81024c2:	f7fe fd83 	bl	8100fcc <HAL_GetCurrentCPUID>
 81024c6:	2803      	cmp	r0, #3
 81024c8:	d113      	bne.n	81024f2 <HAL_PWREx_EnterSTOPMode+0x42>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81024ca:	6923      	ldr	r3, [r4, #16]
 81024cc:	f023 0301 	bic.w	r3, r3, #1
 81024d0:	6123      	str	r3, [r4, #16]

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81024d2:	4b17      	ldr	r3, [pc, #92]	; (8102530 <HAL_PWREx_EnterSTOPMode+0x80>)
 81024d4:	691a      	ldr	r2, [r3, #16]
 81024d6:	f042 0204 	orr.w	r2, r2, #4
 81024da:	611a      	str	r2, [r3, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81024dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 81024e0:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81024e4:	2d01      	cmp	r5, #1
 81024e6:	d110      	bne.n	810250a <HAL_PWREx_EnterSTOPMode+0x5a>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81024e8:	bf30      	wfi
      /* Request Wait For Event */
      __WFE ();
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81024ea:	691a      	ldr	r2, [r3, #16]
 81024ec:	f022 0204 	bic.w	r2, r2, #4
 81024f0:	611a      	str	r2, [r3, #16]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81024f2:	bd38      	pop	{r3, r4, r5, pc}
  else if (Domain == PWR_D2_DOMAIN)
 81024f4:	2a01      	cmp	r2, #1
 81024f6:	d10a      	bne.n	810250e <HAL_PWREx_EnterSTOPMode+0x5e>
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81024f8:	f7fe fd68 	bl	8100fcc <HAL_GetCurrentCPUID>
 81024fc:	2801      	cmp	r0, #1
 81024fe:	d1f8      	bne.n	81024f2 <HAL_PWREx_EnterSTOPMode+0x42>
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102500:	6963      	ldr	r3, [r4, #20]
 8102502:	f023 0302 	bic.w	r3, r3, #2
 8102506:	6163      	str	r3, [r4, #20]
 8102508:	e7e3      	b.n	81024d2 <HAL_PWREx_EnterSTOPMode+0x22>
      __WFE ();
 810250a:	bf20      	wfe
 810250c:	e7ed      	b.n	81024ea <HAL_PWREx_EnterSTOPMode+0x3a>
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810250e:	f7fe fd5d 	bl	8100fcc <HAL_GetCurrentCPUID>
 8102512:	2803      	cmp	r0, #3
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102514:	bf0b      	itete	eq
 8102516:	6923      	ldreq	r3, [r4, #16]
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102518:	6963      	ldrne	r3, [r4, #20]
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810251a:	f023 0304 	biceq.w	r3, r3, #4
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810251e:	f023 0304 	bicne.w	r3, r3, #4
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102522:	bf0c      	ite	eq
 8102524:	6123      	streq	r3, [r4, #16]
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102526:	6163      	strne	r3, [r4, #20]
 8102528:	e7e3      	b.n	81024f2 <HAL_PWREx_EnterSTOPMode+0x42>
 810252a:	bf00      	nop
 810252c:	58024800 	.word	0x58024800
 8102530:	e000ed00 	.word	0xe000ed00

08102534 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102534:	b508      	push	{r3, lr}
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102536:	f7fe fd49 	bl	8100fcc <HAL_GetCurrentCPUID>
 810253a:	2803      	cmp	r0, #3
 810253c:	d101      	bne.n	8102542 <HAL_PWREx_ClearPendingEvent+0xe>
    __WFE ();
  }
  else
  {
    __SEV ();
    __WFE ();
 810253e:	bf20      	wfe
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102540:	bd08      	pop	{r3, pc}
    __SEV ();
 8102542:	bf40      	sev
 8102544:	e7fb      	b.n	810253e <HAL_PWREx_ClearPendingEvent+0xa>
	...

08102548 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102548:	4b48      	ldr	r3, [pc, #288]	; (810266c <HAL_RCC_GetSysClockFreq+0x124>)
 810254a:	691a      	ldr	r2, [r3, #16]
 810254c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8102550:	2a10      	cmp	r2, #16
{
 8102552:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102554:	f000 8086 	beq.w	8102664 <HAL_RCC_GetSysClockFreq+0x11c>
 8102558:	2a18      	cmp	r2, #24
 810255a:	d00c      	beq.n	8102576 <HAL_RCC_GetSysClockFreq+0x2e>
 810255c:	2a00      	cmp	r2, #0
 810255e:	f040 8083 	bne.w	8102668 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102562:	681a      	ldr	r2, [r3, #0]
 8102564:	4842      	ldr	r0, [pc, #264]	; (8102670 <HAL_RCC_GetSysClockFreq+0x128>)
 8102566:	f012 0f20 	tst.w	r2, #32
 810256a:	d003      	beq.n	8102574 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810256c:	681b      	ldr	r3, [r3, #0]
 810256e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8102572:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8102574:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102576:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102578:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810257a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810257c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 810257e:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102582:	f3c5 1005 	ubfx	r0, r5, #4, #6
    if (pllm != 0U)
 8102586:	d0f5      	beq.n	8102574 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102588:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810258c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102590:	f004 0401 	and.w	r4, r4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102594:	4362      	muls	r2, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102596:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810259a:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810259e:	ee07 2a90 	vmov	s15, r2
 81025a2:	2901      	cmp	r1, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81025a4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 81025a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 81025ac:	d04c      	beq.n	8102648 <HAL_RCC_GetSysClockFreq+0x100>
 81025ae:	2902      	cmp	r1, #2
 81025b0:	d03c      	beq.n	810262c <HAL_RCC_GetSysClockFreq+0xe4>
 81025b2:	2900      	cmp	r1, #0
 81025b4:	d148      	bne.n	8102648 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81025b6:	681a      	ldr	r2, [r3, #0]
 81025b8:	0692      	lsls	r2, r2, #26
 81025ba:	d527      	bpl.n	810260c <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81025bc:	6819      	ldr	r1, [r3, #0]
 81025be:	4a2c      	ldr	r2, [pc, #176]	; (8102670 <HAL_RCC_GetSysClockFreq+0x128>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81025c2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 81025c6:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81025c8:	ee07 2a10 	vmov	s14, r2
 81025cc:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 81025d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81025d4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 81025d8:	ee06 3a90 	vmov	s13, r3
 81025dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 81025e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81025e4:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81025e8:	4b20      	ldr	r3, [pc, #128]	; (810266c <HAL_RCC_GetSysClockFreq+0x124>)
 81025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81025ec:	f3c3 2346 	ubfx	r3, r3, #9, #7
 81025f0:	3301      	adds	r3, #1
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81025f2:	ee67 7a87 	vmul.f32	s15, s15, s14
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81025f6:	ee07 3a10 	vmov	s14, r3
 81025fa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 81025fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8102602:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8102606:	ee17 0a90 	vmov	r0, s15
 810260a:	e7b3      	b.n	8102574 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810260e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102612:	ee07 3a10 	vmov	s14, r3
 8102616:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810261a:	ee77 7a27 	vadd.f32	s15, s14, s15
 810261e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8102622:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8102674 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102626:	ee86 7a26 	vdiv.f32	s14, s12, s13
 810262a:	e7dd      	b.n	81025e8 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810262e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102632:	ee07 3a10 	vmov	s14, r3
 8102636:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810263a:	ee77 7a27 	vadd.f32	s15, s14, s15
 810263e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8102642:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8102678 <HAL_RCC_GetSysClockFreq+0x130>
 8102646:	e7ee      	b.n	8102626 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810264a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810264e:	ee07 3a10 	vmov	s14, r3
 8102652:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8102656:	ee77 7a27 	vadd.f32	s15, s14, s15
 810265a:	ee77 7a86 	vadd.f32	s15, s15, s12
 810265e:	ed9f 6a07 	vldr	s12, [pc, #28]	; 810267c <HAL_RCC_GetSysClockFreq+0x134>
 8102662:	e7e0      	b.n	8102626 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102664:	4806      	ldr	r0, [pc, #24]	; (8102680 <HAL_RCC_GetSysClockFreq+0x138>)
 8102666:	e785      	b.n	8102574 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8102668:	4806      	ldr	r0, [pc, #24]	; (8102684 <HAL_RCC_GetSysClockFreq+0x13c>)
 810266a:	e783      	b.n	8102574 <HAL_RCC_GetSysClockFreq+0x2c>
 810266c:	58024400 	.word	0x58024400
 8102670:	03d09000 	.word	0x03d09000
 8102674:	4c742400 	.word	0x4c742400
 8102678:	4af42400 	.word	0x4af42400
 810267c:	4a742400 	.word	0x4a742400
 8102680:	007a1200 	.word	0x007a1200
 8102684:	003d0900 	.word	0x003d0900

08102688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102688:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810268a:	f7ff ff5d 	bl	8102548 <HAL_RCC_GetSysClockFreq>
 810268e:	4b0a      	ldr	r3, [pc, #40]	; (81026b8 <HAL_RCC_GetHCLKFreq+0x30>)
 8102690:	490a      	ldr	r1, [pc, #40]	; (81026bc <HAL_RCC_GetHCLKFreq+0x34>)
 8102692:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102694:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102696:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810269a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810269e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81026a0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81026a2:	f002 021f 	and.w	r2, r2, #31
 81026a6:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81026a8:	f003 031f 	and.w	r3, r3, #31
 81026ac:	40d8      	lsrs	r0, r3
 81026ae:	4b04      	ldr	r3, [pc, #16]	; (81026c0 <HAL_RCC_GetHCLKFreq+0x38>)
 81026b0:	6018      	str	r0, [r3, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81026b2:	4b04      	ldr	r3, [pc, #16]	; (81026c4 <HAL_RCC_GetHCLKFreq+0x3c>)
 81026b4:	6018      	str	r0, [r3, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 81026b6:	bd08      	pop	{r3, pc}
 81026b8:	58024400 	.word	0x58024400
 81026bc:	08104194 	.word	0x08104194
 81026c0:	10000008 	.word	0x10000008
 81026c4:	10000004 	.word	0x10000004

081026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81026c8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81026ca:	f7ff ffdd 	bl	8102688 <HAL_RCC_GetHCLKFreq>
 81026ce:	4b05      	ldr	r3, [pc, #20]	; (81026e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 81026d0:	4a05      	ldr	r2, [pc, #20]	; (81026e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 81026d2:	69db      	ldr	r3, [r3, #28]
 81026d4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 81026d8:	5cd3      	ldrb	r3, [r2, r3]
 81026da:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81026de:	40d8      	lsrs	r0, r3
 81026e0:	bd08      	pop	{r3, pc}
 81026e2:	bf00      	nop
 81026e4:	58024400 	.word	0x58024400
 81026e8:	08104194 	.word	0x08104194

081026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81026ec:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81026ee:	f7ff ffcb 	bl	8102688 <HAL_RCC_GetHCLKFreq>
 81026f2:	4b05      	ldr	r3, [pc, #20]	; (8102708 <HAL_RCC_GetPCLK2Freq+0x1c>)
 81026f4:	4a05      	ldr	r2, [pc, #20]	; (810270c <HAL_RCC_GetPCLK2Freq+0x20>)
 81026f6:	69db      	ldr	r3, [r3, #28]
 81026f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 81026fc:	5cd3      	ldrb	r3, [r2, r3]
 81026fe:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102702:	40d8      	lsrs	r0, r3
 8102704:	bd08      	pop	{r3, pc}
 8102706:	bf00      	nop
 8102708:	58024400 	.word	0x58024400
 810270c:	08104194 	.word	0x08104194

08102710 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102712:	4c3a      	ldr	r4, [pc, #232]	; (81027fc <RCCEx_PLL2_Config+0xec>)
 8102714:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8102716:	f003 0303 	and.w	r3, r3, #3
 810271a:	2b03      	cmp	r3, #3
{
 810271c:	4606      	mov	r6, r0
 810271e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102720:	d069      	beq.n	81027f6 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102722:	6823      	ldr	r3, [r4, #0]
 8102724:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8102728:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810272a:	f7fe fbcf 	bl	8100ecc <HAL_GetTick>
 810272e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102730:	6823      	ldr	r3, [r4, #0]
 8102732:	011a      	lsls	r2, r3, #4
 8102734:	d44b      	bmi.n	81027ce <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8102738:	6832      	ldr	r2, [r6, #0]
 810273a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 810273e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8102742:	62a3      	str	r3, [r4, #40]	; 0x28
 8102744:	68b3      	ldr	r3, [r6, #8]
 8102746:	68f2      	ldr	r2, [r6, #12]
 8102748:	3b01      	subs	r3, #1
 810274a:	3a01      	subs	r2, #1
 810274c:	025b      	lsls	r3, r3, #9
 810274e:	0412      	lsls	r2, r2, #16
 8102750:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8102754:	b29b      	uxth	r3, r3
 8102756:	4313      	orrs	r3, r2
 8102758:	6872      	ldr	r2, [r6, #4]
 810275a:	3a01      	subs	r2, #1
 810275c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8102760:	4313      	orrs	r3, r2
 8102762:	6932      	ldr	r2, [r6, #16]
 8102764:	3a01      	subs	r2, #1
 8102766:	0612      	lsls	r2, r2, #24
 8102768:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 810276c:	4313      	orrs	r3, r2
 810276e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102770:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8102772:	6972      	ldr	r2, [r6, #20]
 8102774:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8102778:	4313      	orrs	r3, r2
 810277a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810277c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810277e:	69b2      	ldr	r2, [r6, #24]
 8102780:	f023 0320 	bic.w	r3, r3, #32
 8102784:	4313      	orrs	r3, r2
 8102786:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102788:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810278a:	f023 0310 	bic.w	r3, r3, #16
 810278e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102790:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8102792:	69f2      	ldr	r2, [r6, #28]
 8102794:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102798:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810279c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 81027a0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81027a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 81027a4:	f043 0310 	orr.w	r3, r3, #16
 81027a8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81027aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 81027ac:	b9b5      	cbnz	r5, 81027dc <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81027ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81027b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81027b4:	4c11      	ldr	r4, [pc, #68]	; (81027fc <RCCEx_PLL2_Config+0xec>)
 81027b6:	6823      	ldr	r3, [r4, #0]
 81027b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81027bc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81027be:	f7fe fb85 	bl	8100ecc <HAL_GetTick>
 81027c2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81027c4:	6823      	ldr	r3, [r4, #0]
 81027c6:	011b      	lsls	r3, r3, #4
 81027c8:	d50f      	bpl.n	81027ea <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 81027ca:	2000      	movs	r0, #0
 81027cc:	e005      	b.n	81027da <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81027ce:	f7fe fb7d 	bl	8100ecc <HAL_GetTick>
 81027d2:	1bc0      	subs	r0, r0, r7
 81027d4:	2802      	cmp	r0, #2
 81027d6:	d9ab      	bls.n	8102730 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 81027d8:	2003      	movs	r0, #3
}
 81027da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 81027dc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81027de:	bf0c      	ite	eq
 81027e0:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81027e4:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 81027e8:	e7e3      	b.n	81027b2 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81027ea:	f7fe fb6f 	bl	8100ecc <HAL_GetTick>
 81027ee:	1b40      	subs	r0, r0, r5
 81027f0:	2802      	cmp	r0, #2
 81027f2:	d9e7      	bls.n	81027c4 <RCCEx_PLL2_Config+0xb4>
 81027f4:	e7f0      	b.n	81027d8 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 81027f6:	2001      	movs	r0, #1
 81027f8:	e7ef      	b.n	81027da <RCCEx_PLL2_Config+0xca>
 81027fa:	bf00      	nop
 81027fc:	58024400 	.word	0x58024400

08102800 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8102800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102802:	4c3a      	ldr	r4, [pc, #232]	; (81028ec <RCCEx_PLL3_Config+0xec>)
 8102804:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8102806:	f003 0303 	and.w	r3, r3, #3
 810280a:	2b03      	cmp	r3, #3
{
 810280c:	4606      	mov	r6, r0
 810280e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102810:	d069      	beq.n	81028e6 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8102812:	6823      	ldr	r3, [r4, #0]
 8102814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102818:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810281a:	f7fe fb57 	bl	8100ecc <HAL_GetTick>
 810281e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102820:	6823      	ldr	r3, [r4, #0]
 8102822:	009a      	lsls	r2, r3, #2
 8102824:	d44b      	bmi.n	81028be <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8102826:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8102828:	6832      	ldr	r2, [r6, #0]
 810282a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 810282e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8102832:	62a3      	str	r3, [r4, #40]	; 0x28
 8102834:	68b3      	ldr	r3, [r6, #8]
 8102836:	68f2      	ldr	r2, [r6, #12]
 8102838:	3b01      	subs	r3, #1
 810283a:	3a01      	subs	r2, #1
 810283c:	025b      	lsls	r3, r3, #9
 810283e:	0412      	lsls	r2, r2, #16
 8102840:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8102844:	b29b      	uxth	r3, r3
 8102846:	4313      	orrs	r3, r2
 8102848:	6872      	ldr	r2, [r6, #4]
 810284a:	3a01      	subs	r2, #1
 810284c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8102850:	4313      	orrs	r3, r2
 8102852:	6932      	ldr	r2, [r6, #16]
 8102854:	3a01      	subs	r2, #1
 8102856:	0612      	lsls	r2, r2, #24
 8102858:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 810285c:	4313      	orrs	r3, r2
 810285e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8102862:	6972      	ldr	r2, [r6, #20]
 8102864:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8102868:	4313      	orrs	r3, r2
 810286a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810286c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810286e:	69b2      	ldr	r2, [r6, #24]
 8102870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8102874:	4313      	orrs	r3, r2
 8102876:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8102878:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810287a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810287e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8102880:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8102882:	69f2      	ldr	r2, [r6, #28]
 8102884:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102888:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810288c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8102890:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8102892:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8102894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102898:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810289a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 810289c:	b9b5      	cbnz	r5, 81028cc <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810289e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81028a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81028a4:	4c11      	ldr	r4, [pc, #68]	; (81028ec <RCCEx_PLL3_Config+0xec>)
 81028a6:	6823      	ldr	r3, [r4, #0]
 81028a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81028ac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81028ae:	f7fe fb0d 	bl	8100ecc <HAL_GetTick>
 81028b2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81028b4:	6823      	ldr	r3, [r4, #0]
 81028b6:	009b      	lsls	r3, r3, #2
 81028b8:	d50f      	bpl.n	81028da <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 81028ba:	2000      	movs	r0, #0
 81028bc:	e005      	b.n	81028ca <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81028be:	f7fe fb05 	bl	8100ecc <HAL_GetTick>
 81028c2:	1bc0      	subs	r0, r0, r7
 81028c4:	2802      	cmp	r0, #2
 81028c6:	d9ab      	bls.n	8102820 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 81028c8:	2003      	movs	r0, #3
}
 81028ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 81028cc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81028ce:	bf0c      	ite	eq
 81028d0:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81028d4:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 81028d8:	e7e3      	b.n	81028a2 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81028da:	f7fe faf7 	bl	8100ecc <HAL_GetTick>
 81028de:	1b40      	subs	r0, r0, r5
 81028e0:	2802      	cmp	r0, #2
 81028e2:	d9e7      	bls.n	81028b4 <RCCEx_PLL3_Config+0xb4>
 81028e4:	e7f0      	b.n	81028c8 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 81028e6:	2001      	movs	r0, #1
 81028e8:	e7ef      	b.n	81028ca <RCCEx_PLL3_Config+0xca>
 81028ea:	bf00      	nop
 81028ec:	58024400 	.word	0x58024400

081028f0 <HAL_RCCEx_PeriphCLKConfig>:
{
 81028f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81028f4:	6806      	ldr	r6, [r0, #0]
 81028f6:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
{
 81028fa:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81028fc:	d009      	beq.n	8102912 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 81028fe:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8102900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102904:	d02e      	beq.n	8102964 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8102906:	d813      	bhi.n	8102930 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8102908:	b1f3      	cbz	r3, 8102948 <HAL_RCCEx_PeriphCLKConfig+0x58>
 810290a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810290e:	d021      	beq.n	8102954 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102910:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102912:	682b      	ldr	r3, [r5, #0]
 8102914:	05dc      	lsls	r4, r3, #23
 8102916:	f140 80ea 	bpl.w	8102aee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->Sai1ClockSelection)
 810291a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 810291c:	2b04      	cmp	r3, #4
 810291e:	f200 80e5 	bhi.w	8102aec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8102922:	e8df f013 	tbh	[pc, r3, lsl #1]
 8102926:	0024      	.short	0x0024
 8102928:	00dd002b 	.word	0x00dd002b
 810292c:	00290029 	.word	0x00290029
    switch(PeriphClkInit->SpdifrxClockSelection)
 8102930:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102934:	d1ec      	bne.n	8102910 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102936:	4aa6      	ldr	r2, [pc, #664]	; (8102bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8102938:	6e69      	ldr	r1, [r5, #100]	; 0x64
 810293a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 810293c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8102940:	430b      	orrs	r3, r1
 8102942:	6513      	str	r3, [r2, #80]	; 0x50
 8102944:	2600      	movs	r6, #0
 8102946:	e7e4      	b.n	8102912 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102948:	4aa1      	ldr	r2, [pc, #644]	; (8102bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 810294a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 810294c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102950:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8102952:	e7f0      	b.n	8102936 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102954:	2102      	movs	r1, #2
 8102956:	3004      	adds	r0, #4
 8102958:	f7ff feda 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810295c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 810295e:	2800      	cmp	r0, #0
 8102960:	d1d7      	bne.n	8102912 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8102962:	e7e8      	b.n	8102936 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102964:	2102      	movs	r1, #2
 8102966:	3024      	adds	r0, #36	; 0x24
 8102968:	f7ff ff4a 	bl	8102800 <RCCEx_PLL3_Config>
 810296c:	e7f6      	b.n	810295c <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810296e:	4a98      	ldr	r2, [pc, #608]	; (8102bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8102970:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8102972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102976:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8102978:	4634      	mov	r4, r6
 810297a:	e004      	b.n	8102986 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810297c:	2100      	movs	r1, #0
 810297e:	1d28      	adds	r0, r5, #4
 8102980:	f7ff fec6 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102984:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8102986:	2c00      	cmp	r4, #0
 8102988:	f040 80b3 	bne.w	8102af2 <HAL_RCCEx_PeriphCLKConfig+0x202>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810298c:	4a90      	ldr	r2, [pc, #576]	; (8102bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 810298e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8102990:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8102992:	f023 0307 	bic.w	r3, r3, #7
 8102996:	430b      	orrs	r3, r1
 8102998:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810299a:	682b      	ldr	r3, [r5, #0]
 810299c:	0598      	lsls	r0, r3, #22
 810299e:	d50d      	bpl.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai23ClockSelection)
 81029a0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 81029a2:	2b80      	cmp	r3, #128	; 0x80
 81029a4:	f000 80c2 	beq.w	8102b2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 81029a8:	f200 80a5 	bhi.w	8102af6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 81029ac:	2b00      	cmp	r3, #0
 81029ae:	f000 80b1 	beq.w	8102b14 <HAL_RCCEx_PeriphCLKConfig+0x224>
 81029b2:	2b40      	cmp	r3, #64	; 0x40
 81029b4:	f000 80b4 	beq.w	8102b20 <HAL_RCCEx_PeriphCLKConfig+0x230>
 81029b8:	2601      	movs	r6, #1
 81029ba:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81029bc:	682b      	ldr	r3, [r5, #0]
 81029be:	0559      	lsls	r1, r3, #21
 81029c0:	d510      	bpl.n	81029e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 81029c2:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 81029c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81029ca:	f000 80d4 	beq.w	8102b76 <HAL_RCCEx_PeriphCLKConfig+0x286>
 81029ce:	f200 80b5 	bhi.w	8102b3c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 81029d2:	2b00      	cmp	r3, #0
 81029d4:	f000 80c3 	beq.w	8102b5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81029d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81029dc:	f000 80c5 	beq.w	8102b6a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 81029e0:	2601      	movs	r6, #1
 81029e2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81029e4:	682b      	ldr	r3, [r5, #0]
 81029e6:	051a      	lsls	r2, r3, #20
 81029e8:	d510      	bpl.n	8102a0c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai4BClockSelection)
 81029ea:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 81029ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81029f2:	f000 80e5 	beq.w	8102bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81029f6:	f200 80c6 	bhi.w	8102b86 <HAL_RCCEx_PeriphCLKConfig+0x296>
 81029fa:	2b00      	cmp	r3, #0
 81029fc:	f000 80d4 	beq.w	8102ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8102a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102a04:	f000 80d6 	beq.w	8102bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8102a08:	2601      	movs	r6, #1
 8102a0a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102a0c:	682b      	ldr	r3, [r5, #0]
 8102a0e:	019b      	lsls	r3, r3, #6
 8102a10:	d50d      	bpl.n	8102a2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->QspiClockSelection)
 8102a12:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8102a14:	2b20      	cmp	r3, #32
 8102a16:	f000 80ef 	beq.w	8102bf8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8102a1a:	f200 80db 	bhi.w	8102bd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8102a1e:	2b00      	cmp	r3, #0
 8102a20:	f000 80db 	beq.w	8102bda <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8102a24:	2b10      	cmp	r3, #16
 8102a26:	f000 80e1 	beq.w	8102bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8102a2a:	2601      	movs	r6, #1
 8102a2c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102a2e:	682b      	ldr	r3, [r5, #0]
 8102a30:	04df      	lsls	r7, r3, #19
 8102a32:	d50f      	bpl.n	8102a54 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 8102a34:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8102a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102a3a:	f000 8101 	beq.w	8102c40 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8102a3e:	f200 80e3 	bhi.w	8102c08 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8102a42:	2b00      	cmp	r3, #0
 8102a44:	f000 80f0 	beq.w	8102c28 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8102a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102a4c:	f000 80f2 	beq.w	8102c34 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102a50:	2601      	movs	r6, #1
 8102a52:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102a54:	682b      	ldr	r3, [r5, #0]
 8102a56:	0498      	lsls	r0, r3, #18
 8102a58:	d50f      	bpl.n	8102a7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi45ClockSelection)
 8102a5a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8102a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102a60:	f000 810e 	beq.w	8102c80 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8102a64:	f200 80f4 	bhi.w	8102c50 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8102a68:	2b00      	cmp	r3, #0
 8102a6a:	f000 80fa 	beq.w	8102c62 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8102a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102a72:	f000 80ff 	beq.w	8102c74 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8102a76:	2601      	movs	r6, #1
 8102a78:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102a7a:	682b      	ldr	r3, [r5, #0]
 8102a7c:	0459      	lsls	r1, r3, #17
 8102a7e:	d510      	bpl.n	8102aa2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 8102a80:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8102a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102a88:	f000 811b 	beq.w	8102cc2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8102a8c:	f200 8100 	bhi.w	8102c90 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8102a90:	2b00      	cmp	r3, #0
 8102a92:	f000 8106 	beq.w	8102ca2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8102a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102a9a:	f000 810c 	beq.w	8102cb6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8102a9e:	2601      	movs	r6, #1
 8102aa0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102aa2:	682b      	ldr	r3, [r5, #0]
 8102aa4:	041a      	lsls	r2, r3, #16
 8102aa6:	d50d      	bpl.n	8102ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    switch(PeriphClkInit->FdcanClockSelection)
 8102aa8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8102aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102aae:	f000 8110 	beq.w	8102cd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8102ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102ab6:	f000 811a 	beq.w	8102cee <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8102aba:	2b00      	cmp	r3, #0
 8102abc:	f000 810e 	beq.w	8102cdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8102ac0:	2601      	movs	r6, #1
 8102ac2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102ac4:	682b      	ldr	r3, [r5, #0]
 8102ac6:	01db      	lsls	r3, r3, #7
 8102ac8:	f140 8127 	bpl.w	8102d1a <HAL_RCCEx_PeriphCLKConfig+0x42a>
    switch(PeriphClkInit->FmcClockSelection)
 8102acc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8102ace:	2b03      	cmp	r3, #3
 8102ad0:	f200 8167 	bhi.w	8102da2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8102ad4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8102ad8:	01130118 	.word	0x01130118
 8102adc:	0118015f 	.word	0x0118015f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102ae0:	2100      	movs	r1, #0
 8102ae2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8102ae6:	f7ff fe8b 	bl	8102800 <RCCEx_PLL3_Config>
 8102aea:	e74b      	b.n	8102984 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8102aec:	2601      	movs	r6, #1
 8102aee:	4634      	mov	r4, r6
 8102af0:	e753      	b.n	810299a <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8102af2:	4626      	mov	r6, r4
 8102af4:	e751      	b.n	810299a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai23ClockSelection)
 8102af6:	2bc0      	cmp	r3, #192	; 0xc0
 8102af8:	d003      	beq.n	8102b02 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8102afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102afe:	f47f af5b 	bne.w	81029b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if(ret == HAL_OK)
 8102b02:	b9cc      	cbnz	r4, 8102b38 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102b04:	4a32      	ldr	r2, [pc, #200]	; (8102bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8102b06:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8102b08:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8102b0a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8102b0e:	430b      	orrs	r3, r1
 8102b10:	6513      	str	r3, [r2, #80]	; 0x50
 8102b12:	e753      	b.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b14:	4a2e      	ldr	r2, [pc, #184]	; (8102bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8102b16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8102b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102b1c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8102b1e:	e7f0      	b.n	8102b02 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102b20:	2100      	movs	r1, #0
 8102b22:	1d28      	adds	r0, r5, #4
 8102b24:	f7ff fdf4 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102b28:	4604      	mov	r4, r0
      break;
 8102b2a:	e7ea      	b.n	8102b02 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102b2c:	2100      	movs	r1, #0
 8102b2e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8102b32:	f7ff fe65 	bl	8102800 <RCCEx_PLL3_Config>
 8102b36:	e7f7      	b.n	8102b28 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8102b38:	4626      	mov	r6, r4
 8102b3a:	e73f      	b.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai4AClockSelection)
 8102b3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102b40:	d003      	beq.n	8102b4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8102b42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102b46:	f47f af4b 	bne.w	81029e0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if(ret == HAL_OK)
 8102b4a:	b9d4      	cbnz	r4, 8102b82 <HAL_RCCEx_PeriphCLKConfig+0x292>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102b4c:	4a20      	ldr	r2, [pc, #128]	; (8102bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8102b4e:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8102b52:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8102b54:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8102b58:	430b      	orrs	r3, r1
 8102b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8102b5c:	e742      	b.n	81029e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b5e:	4a1c      	ldr	r2, [pc, #112]	; (8102bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8102b60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8102b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102b66:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8102b68:	e7ef      	b.n	8102b4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102b6a:	2100      	movs	r1, #0
 8102b6c:	1d28      	adds	r0, r5, #4
 8102b6e:	f7ff fdcf 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102b72:	4604      	mov	r4, r0
      break;
 8102b74:	e7e9      	b.n	8102b4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102b76:	2100      	movs	r1, #0
 8102b78:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8102b7c:	f7ff fe40 	bl	8102800 <RCCEx_PLL3_Config>
 8102b80:	e7f7      	b.n	8102b72 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8102b82:	4626      	mov	r6, r4
 8102b84:	e72e      	b.n	81029e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 8102b86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102b8a:	d003      	beq.n	8102b94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8102b8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102b90:	f47f af3a 	bne.w	8102a08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if(ret == HAL_OK)
 8102b94:	b9d4      	cbnz	r4, 8102bcc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102b96:	4a0e      	ldr	r2, [pc, #56]	; (8102bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8102b98:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8102b9c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8102b9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8102ba2:	430b      	orrs	r3, r1
 8102ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8102ba6:	e731      	b.n	8102a0c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ba8:	4a09      	ldr	r2, [pc, #36]	; (8102bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8102baa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8102bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8102bb2:	e7ef      	b.n	8102b94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102bb4:	2100      	movs	r1, #0
 8102bb6:	1d28      	adds	r0, r5, #4
 8102bb8:	f7ff fdaa 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102bbc:	4604      	mov	r4, r0
      break;
 8102bbe:	e7e9      	b.n	8102b94 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102bc0:	2100      	movs	r1, #0
 8102bc2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8102bc6:	f7ff fe1b 	bl	8102800 <RCCEx_PLL3_Config>
 8102bca:	e7f7      	b.n	8102bbc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8102bcc:	4626      	mov	r6, r4
 8102bce:	e71d      	b.n	8102a0c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8102bd0:	58024400 	.word	0x58024400
    switch(PeriphClkInit->QspiClockSelection)
 8102bd4:	2b30      	cmp	r3, #48	; 0x30
 8102bd6:	f47f af28 	bne.w	8102a2a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 8102bda:	b99c      	cbnz	r4, 8102c04 <HAL_RCCEx_PeriphCLKConfig+0x314>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102bdc:	4a9d      	ldr	r2, [pc, #628]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102bde:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8102be0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8102be2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8102be6:	430b      	orrs	r3, r1
 8102be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8102bea:	e720      	b.n	8102a2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102bec:	4a99      	ldr	r2, [pc, #612]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102bee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8102bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8102bf6:	e7f0      	b.n	8102bda <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102bf8:	2102      	movs	r1, #2
 8102bfa:	1d28      	adds	r0, r5, #4
 8102bfc:	f7ff fd88 	bl	8102710 <RCCEx_PLL2_Config>
 8102c00:	4604      	mov	r4, r0
      break;
 8102c02:	e7ea      	b.n	8102bda <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8102c04:	4626      	mov	r6, r4
 8102c06:	e712      	b.n	8102a2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8102c08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102c0c:	d003      	beq.n	8102c16 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8102c0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102c12:	f47f af1d 	bne.w	8102a50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 8102c16:	b9cc      	cbnz	r4, 8102c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102c18:	4a8e      	ldr	r2, [pc, #568]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102c1a:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8102c1c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8102c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102c22:	430b      	orrs	r3, r1
 8102c24:	6513      	str	r3, [r2, #80]	; 0x50
 8102c26:	e715      	b.n	8102a54 <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c28:	4a8a      	ldr	r2, [pc, #552]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102c2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8102c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102c30:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8102c32:	e7f0      	b.n	8102c16 <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102c34:	2100      	movs	r1, #0
 8102c36:	1d28      	adds	r0, r5, #4
 8102c38:	f7ff fd6a 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102c3c:	4604      	mov	r4, r0
      break;
 8102c3e:	e7ea      	b.n	8102c16 <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102c40:	2100      	movs	r1, #0
 8102c42:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8102c46:	f7ff fddb 	bl	8102800 <RCCEx_PLL3_Config>
 8102c4a:	e7f7      	b.n	8102c3c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8102c4c:	4626      	mov	r6, r4
 8102c4e:	e701      	b.n	8102a54 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8102c50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102c54:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8102c58:	d003      	beq.n	8102c62 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8102c5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102c5e:	f47f af0a 	bne.w	8102a76 <HAL_RCCEx_PeriphCLKConfig+0x186>
    if(ret == HAL_OK)
 8102c62:	b99c      	cbnz	r4, 8102c8c <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8102c64:	4a7b      	ldr	r2, [pc, #492]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102c66:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8102c68:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8102c6a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8102c6e:	430b      	orrs	r3, r1
 8102c70:	6513      	str	r3, [r2, #80]	; 0x50
 8102c72:	e702      	b.n	8102a7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102c74:	2101      	movs	r1, #1
 8102c76:	1d28      	adds	r0, r5, #4
 8102c78:	f7ff fd4a 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102c7c:	4604      	mov	r4, r0
      break;
 8102c7e:	e7f0      	b.n	8102c62 <HAL_RCCEx_PeriphCLKConfig+0x372>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102c80:	2101      	movs	r1, #1
 8102c82:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8102c86:	f7ff fdbb 	bl	8102800 <RCCEx_PLL3_Config>
 8102c8a:	e7f7      	b.n	8102c7c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8102c8c:	4626      	mov	r6, r4
 8102c8e:	e6f4      	b.n	8102a7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi6ClockSelection)
 8102c90:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8102c94:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8102c98:	d003      	beq.n	8102ca2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8102c9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102c9e:	f47f aefe 	bne.w	8102a9e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    if(ret == HAL_OK)
 8102ca2:	b9a4      	cbnz	r4, 8102cce <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102ca4:	4a6b      	ldr	r2, [pc, #428]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102ca6:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8102caa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8102cac:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8102cb0:	430b      	orrs	r3, r1
 8102cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8102cb4:	e6f5      	b.n	8102aa2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102cb6:	2101      	movs	r1, #1
 8102cb8:	1d28      	adds	r0, r5, #4
 8102cba:	f7ff fd29 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102cbe:	4604      	mov	r4, r0
      break;
 8102cc0:	e7ef      	b.n	8102ca2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102cc2:	2101      	movs	r1, #1
 8102cc4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8102cc8:	f7ff fd9a 	bl	8102800 <RCCEx_PLL3_Config>
 8102ccc:	e7f7      	b.n	8102cbe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8102cce:	4626      	mov	r6, r4
 8102cd0:	e6e7      	b.n	8102aa2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102cd2:	4a60      	ldr	r2, [pc, #384]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102cd4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8102cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102cda:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8102cdc:	b96c      	cbnz	r4, 8102cfa <HAL_RCCEx_PeriphCLKConfig+0x40a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102cde:	4a5d      	ldr	r2, [pc, #372]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102ce0:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8102ce2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8102ce4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8102ce8:	430b      	orrs	r3, r1
 8102cea:	6513      	str	r3, [r2, #80]	; 0x50
 8102cec:	e6ea      	b.n	8102ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102cee:	2101      	movs	r1, #1
 8102cf0:	1d28      	adds	r0, r5, #4
 8102cf2:	f7ff fd0d 	bl	8102710 <RCCEx_PLL2_Config>
 8102cf6:	4604      	mov	r4, r0
      break;
 8102cf8:	e7f0      	b.n	8102cdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8102cfa:	4626      	mov	r6, r4
 8102cfc:	e6e2      	b.n	8102ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102cfe:	4a55      	ldr	r2, [pc, #340]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102d00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8102d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d06:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8102d08:	2c00      	cmp	r4, #0
 8102d0a:	d14d      	bne.n	8102da8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102d0c:	4a51      	ldr	r2, [pc, #324]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102d0e:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8102d10:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8102d12:	f023 0303 	bic.w	r3, r3, #3
 8102d16:	430b      	orrs	r3, r1
 8102d18:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102d1a:	682b      	ldr	r3, [r5, #0]
 8102d1c:	025f      	lsls	r7, r3, #9
 8102d1e:	d54d      	bpl.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102d20:	4f4d      	ldr	r7, [pc, #308]	; (8102e58 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8102d22:	683b      	ldr	r3, [r7, #0]
 8102d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102d28:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8102d2a:	f7fe f8cf 	bl	8100ecc <HAL_GetTick>
 8102d2e:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102d30:	683b      	ldr	r3, [r7, #0]
 8102d32:	05d8      	lsls	r0, r3, #23
 8102d34:	d53a      	bpl.n	8102dac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if(ret == HAL_OK)
 8102d36:	2c00      	cmp	r4, #0
 8102d38:	d16c      	bne.n	8102e14 <HAL_RCCEx_PeriphCLKConfig+0x524>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102d3a:	4b46      	ldr	r3, [pc, #280]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102d3c:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8102d40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102d42:	4042      	eors	r2, r0
 8102d44:	f412 7f40 	tst.w	r2, #768	; 0x300
 8102d48:	d00b      	beq.n	8102d62 <HAL_RCCEx_PeriphCLKConfig+0x472>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102d4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8102d4c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8102d4e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8102d52:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102d54:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102d56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102d5a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8102d5e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8102d60:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8102d62:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8102d66:	d040      	beq.n	8102dea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102d68:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8102d6c:	4939      	ldr	r1, [pc, #228]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102d6e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8102d72:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8102d76:	d149      	bne.n	8102e0c <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8102d78:	6908      	ldr	r0, [r1, #16]
 8102d7a:	4a38      	ldr	r2, [pc, #224]	; (8102e5c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8102d7c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8102d80:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8102d84:	4302      	orrs	r2, r0
 8102d86:	610a      	str	r2, [r1, #16]
 8102d88:	4a32      	ldr	r2, [pc, #200]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102d8a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8102d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102d90:	430b      	orrs	r3, r1
 8102d92:	6713      	str	r3, [r2, #112]	; 0x70
 8102d94:	e012      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102d96:	2102      	movs	r1, #2
 8102d98:	1d28      	adds	r0, r5, #4
 8102d9a:	f7ff fcb9 	bl	8102710 <RCCEx_PLL2_Config>
 8102d9e:	4604      	mov	r4, r0
      break;
 8102da0:	e7b2      	b.n	8102d08 <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->FmcClockSelection)
 8102da2:	2601      	movs	r6, #1
 8102da4:	4634      	mov	r4, r6
 8102da6:	e7b8      	b.n	8102d1a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8102da8:	4626      	mov	r6, r4
 8102daa:	e7b6      	b.n	8102d1a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102dac:	f7fe f88e 	bl	8100ecc <HAL_GetTick>
 8102db0:	eba0 0008 	sub.w	r0, r0, r8
 8102db4:	2864      	cmp	r0, #100	; 0x64
 8102db6:	d9bb      	bls.n	8102d30 <HAL_RCCEx_PeriphCLKConfig+0x440>
        ret = HAL_TIMEOUT;
 8102db8:	2603      	movs	r6, #3
 8102dba:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102dbc:	682b      	ldr	r3, [r5, #0]
 8102dbe:	07da      	lsls	r2, r3, #31
 8102dc0:	d508      	bpl.n	8102dd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    switch(PeriphClkInit->Usart16ClockSelection)
 8102dc2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8102dc4:	2b10      	cmp	r3, #16
 8102dc6:	d03c      	beq.n	8102e42 <HAL_RCCEx_PeriphCLKConfig+0x552>
 8102dc8:	d826      	bhi.n	8102e18 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8102dca:	b35b      	cbz	r3, 8102e24 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8102dcc:	2b08      	cmp	r3, #8
 8102dce:	d032      	beq.n	8102e36 <HAL_RCCEx_PeriphCLKConfig+0x546>
 8102dd0:	2601      	movs	r6, #1
 8102dd2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102dd4:	682b      	ldr	r3, [r5, #0]
 8102dd6:	079b      	lsls	r3, r3, #30
 8102dd8:	d54f      	bpl.n	8102e7a <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8102dda:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8102ddc:	2b05      	cmp	r3, #5
 8102dde:	d862      	bhi.n	8102ea6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8102de0:	e8df f003 	tbb	[pc, r3]
 8102de4:	435b3e43 	.word	0x435b3e43
 8102de8:	4343      	.short	0x4343
        tickstart = HAL_GetTick();
 8102dea:	f7fe f86f 	bl	8100ecc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102dee:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>
        tickstart = HAL_GetTick();
 8102df2:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102df4:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102df8:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8102dfc:	0799      	lsls	r1, r3, #30
 8102dfe:	d4b3      	bmi.n	8102d68 <HAL_RCCEx_PeriphCLKConfig+0x478>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102e00:	f7fe f864 	bl	8100ecc <HAL_GetTick>
 8102e04:	1bc0      	subs	r0, r0, r7
 8102e06:	4548      	cmp	r0, r9
 8102e08:	d9f6      	bls.n	8102df8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8102e0a:	e7d5      	b.n	8102db8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102e0c:	690a      	ldr	r2, [r1, #16]
 8102e0e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8102e12:	e7b8      	b.n	8102d86 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8102e14:	4626      	mov	r6, r4
 8102e16:	e7d1      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->Usart16ClockSelection)
 8102e18:	f023 0208 	bic.w	r2, r3, #8
 8102e1c:	2a20      	cmp	r2, #32
 8102e1e:	d001      	beq.n	8102e24 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8102e20:	2b18      	cmp	r3, #24
 8102e22:	d1d5      	bne.n	8102dd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if(ret == HAL_OK)
 8102e24:	b99c      	cbnz	r4, 8102e4e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102e26:	4a0b      	ldr	r2, [pc, #44]	; (8102e54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8102e28:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8102e2a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8102e2c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8102e30:	430b      	orrs	r3, r1
 8102e32:	6553      	str	r3, [r2, #84]	; 0x54
 8102e34:	e7ce      	b.n	8102dd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102e36:	2101      	movs	r1, #1
 8102e38:	1d28      	adds	r0, r5, #4
 8102e3a:	f7ff fc69 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102e3e:	4604      	mov	r4, r0
      break;
 8102e40:	e7f0      	b.n	8102e24 <HAL_RCCEx_PeriphCLKConfig+0x534>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102e42:	2101      	movs	r1, #1
 8102e44:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8102e48:	f7ff fcda 	bl	8102800 <RCCEx_PLL3_Config>
 8102e4c:	e7f7      	b.n	8102e3e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8102e4e:	4626      	mov	r6, r4
 8102e50:	e7c0      	b.n	8102dd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8102e52:	bf00      	nop
 8102e54:	58024400 	.word	0x58024400
 8102e58:	58024800 	.word	0x58024800
 8102e5c:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102e60:	2101      	movs	r1, #1
 8102e62:	1d28      	adds	r0, r5, #4
 8102e64:	f7ff fc54 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102e68:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8102e6a:	b9fc      	cbnz	r4, 8102eac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102e6c:	4aa6      	ldr	r2, [pc, #664]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8102e6e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8102e70:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8102e72:	f023 0307 	bic.w	r3, r3, #7
 8102e76:	430b      	orrs	r3, r1
 8102e78:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102e7a:	682b      	ldr	r3, [r5, #0]
 8102e7c:	075f      	lsls	r7, r3, #29
 8102e7e:	d527      	bpl.n	8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8102e80:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8102e84:	2b05      	cmp	r3, #5
 8102e86:	f200 8139 	bhi.w	81030fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8102e8a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8102e8e:	0016      	.short	0x0016
 8102e90:	01310011 	.word	0x01310011
 8102e94:	00160016 	.word	0x00160016
 8102e98:	0016      	.short	0x0016
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102e9a:	2101      	movs	r1, #1
 8102e9c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8102ea0:	f7ff fcae 	bl	8102800 <RCCEx_PLL3_Config>
 8102ea4:	e7e0      	b.n	8102e68 <HAL_RCCEx_PeriphCLKConfig+0x578>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8102ea6:	2601      	movs	r6, #1
 8102ea8:	4634      	mov	r4, r6
 8102eaa:	e7e6      	b.n	8102e7a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8102eac:	4626      	mov	r6, r4
 8102eae:	e7e4      	b.n	8102e7a <HAL_RCCEx_PeriphCLKConfig+0x58a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102eb0:	2101      	movs	r1, #1
 8102eb2:	1d28      	adds	r0, r5, #4
 8102eb4:	f7ff fc2c 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102eb8:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8102eba:	2c00      	cmp	r4, #0
 8102ebc:	f040 8121 	bne.w	8103102 <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102ec0:	4a91      	ldr	r2, [pc, #580]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8102ec2:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8102ec6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8102ec8:	f023 0307 	bic.w	r3, r3, #7
 8102ecc:	430b      	orrs	r3, r1
 8102ece:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102ed0:	682b      	ldr	r3, [r5, #0]
 8102ed2:	0698      	lsls	r0, r3, #26
 8102ed4:	d510      	bpl.n	8102ef8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8102ed6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8102eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102ede:	f000 812e 	beq.w	810313e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8102ee2:	f200 8113 	bhi.w	810310c <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8102ee6:	2b00      	cmp	r3, #0
 8102ee8:	f000 8119 	beq.w	810311e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8102eec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102ef0:	f000 811f 	beq.w	8103132 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8102ef4:	2601      	movs	r6, #1
 8102ef6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102ef8:	682b      	ldr	r3, [r5, #0]
 8102efa:	0659      	lsls	r1, r3, #25
 8102efc:	d510      	bpl.n	8102f20 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102efe:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8102f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102f06:	f000 813b 	beq.w	8103180 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8102f0a:	f200 8120 	bhi.w	810314e <HAL_RCCEx_PeriphCLKConfig+0x85e>
 8102f0e:	2b00      	cmp	r3, #0
 8102f10:	f000 8126 	beq.w	8103160 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8102f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102f18:	f000 812c 	beq.w	8103174 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8102f1c:	2601      	movs	r6, #1
 8102f1e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102f20:	682b      	ldr	r3, [r5, #0]
 8102f22:	061a      	lsls	r2, r3, #24
 8102f24:	d510      	bpl.n	8102f48 <HAL_RCCEx_PeriphCLKConfig+0x658>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8102f26:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8102f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102f2e:	f000 8148 	beq.w	81031c2 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8102f32:	f200 812d 	bhi.w	8103190 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8102f36:	2b00      	cmp	r3, #0
 8102f38:	f000 8133 	beq.w	81031a2 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8102f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102f40:	f000 8139 	beq.w	81031b6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8102f44:	2601      	movs	r6, #1
 8102f46:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102f48:	682b      	ldr	r3, [r5, #0]
 8102f4a:	071b      	lsls	r3, r3, #28
 8102f4c:	d514      	bpl.n	8102f78 <HAL_RCCEx_PeriphCLKConfig+0x688>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8102f4e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8102f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102f56:	d107      	bne.n	8102f68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102f58:	2102      	movs	r1, #2
 8102f5a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8102f5e:	f7ff fc4f 	bl	8102800 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8102f62:	2800      	cmp	r0, #0
 8102f64:	bf18      	it	ne
 8102f66:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102f68:	4a67      	ldr	r2, [pc, #412]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8102f6a:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8102f6e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8102f70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8102f74:	430b      	orrs	r3, r1
 8102f76:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102f78:	682b      	ldr	r3, [r5, #0]
 8102f7a:	06df      	lsls	r7, r3, #27
 8102f7c:	d514      	bpl.n	8102fa8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8102f7e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8102f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102f86:	d107      	bne.n	8102f98 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102f88:	2102      	movs	r1, #2
 8102f8a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8102f8e:	f7ff fc37 	bl	8102800 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8102f92:	2800      	cmp	r0, #0
 8102f94:	bf18      	it	ne
 8102f96:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102f98:	4a5b      	ldr	r2, [pc, #364]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8102f9a:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8102f9e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8102fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102fa4:	430b      	orrs	r3, r1
 8102fa6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102fa8:	682b      	ldr	r3, [r5, #0]
 8102faa:	0318      	lsls	r0, r3, #12
 8102fac:	d51a      	bpl.n	8102fe4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->AdcClockSelection)
 8102fae:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8102fb2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8102fb6:	f000 810c 	beq.w	81031d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8102fba:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8102fbe:	d006      	beq.n	8102fce <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8102fc0:	2900      	cmp	r1, #0
 8102fc2:	f040 810c 	bne.w	81031de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102fc6:	1d28      	adds	r0, r5, #4
 8102fc8:	f7ff fba2 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102fcc:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8102fce:	2c00      	cmp	r4, #0
 8102fd0:	f040 8108 	bne.w	81031e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102fd4:	4a4c      	ldr	r2, [pc, #304]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8102fd6:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8102fda:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8102fdc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8102fe0:	430b      	orrs	r3, r1
 8102fe2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102fe4:	682b      	ldr	r3, [r5, #0]
 8102fe6:	0359      	lsls	r1, r3, #13
 8102fe8:	d51c      	bpl.n	8103024 <HAL_RCCEx_PeriphCLKConfig+0x734>
    switch(PeriphClkInit->UsbClockSelection)
 8102fea:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8102fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102ff2:	f000 80f9 	beq.w	81031e8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8102ff6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102ffa:	d008      	beq.n	810300e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8102ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103000:	f040 80f9 	bne.w	81031f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103004:	4a40      	ldr	r2, [pc, #256]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8103006:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8103008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810300c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 810300e:	2c00      	cmp	r4, #0
 8103010:	f040 80f4 	bne.w	81031fc <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103014:	4a3c      	ldr	r2, [pc, #240]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8103016:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 810301a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 810301c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8103020:	430b      	orrs	r3, r1
 8103022:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103024:	682b      	ldr	r3, [r5, #0]
 8103026:	03da      	lsls	r2, r3, #15
 8103028:	d509      	bpl.n	810303e <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->SdmmcClockSelection)
 810302a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 810302c:	2b00      	cmp	r3, #0
 810302e:	f000 80e7 	beq.w	8103200 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8103032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103036:	f000 80f1 	beq.w	810321c <HAL_RCCEx_PeriphCLKConfig+0x92c>
 810303a:	2601      	movs	r6, #1
 810303c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810303e:	682b      	ldr	r3, [r5, #0]
 8103040:	009b      	lsls	r3, r3, #2
 8103042:	d507      	bpl.n	8103054 <HAL_RCCEx_PeriphCLKConfig+0x764>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103044:	2102      	movs	r1, #2
 8103046:	f105 0024 	add.w	r0, r5, #36	; 0x24
 810304a:	f7ff fbd9 	bl	8102800 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 810304e:	2800      	cmp	r0, #0
 8103050:	bf18      	it	ne
 8103052:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103054:	682b      	ldr	r3, [r5, #0]
 8103056:	039f      	lsls	r7, r3, #14
 8103058:	d50a      	bpl.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0x780>
    switch(PeriphClkInit->RngClockSelection)
 810305a:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 810305c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8103060:	f000 80f2 	beq.w	8103248 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8103064:	f200 80e2 	bhi.w	810322c <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8103068:	2900      	cmp	r1, #0
 810306a:	f000 80e5 	beq.w	8103238 <HAL_RCCEx_PeriphCLKConfig+0x948>
 810306e:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103070:	02dc      	lsls	r4, r3, #11
 8103072:	d506      	bpl.n	8103082 <HAL_RCCEx_PeriphCLKConfig+0x792>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103074:	4924      	ldr	r1, [pc, #144]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8103076:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8103078:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 810307a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810307e:	4302      	orrs	r2, r0
 8103080:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103082:	00d8      	lsls	r0, r3, #3
 8103084:	d507      	bpl.n	8103096 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103086:	4920      	ldr	r1, [pc, #128]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8103088:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 810308c:	690a      	ldr	r2, [r1, #16]
 810308e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8103092:	4302      	orrs	r2, r0
 8103094:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103096:	0299      	lsls	r1, r3, #10
 8103098:	d506      	bpl.n	81030a8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810309a:	491b      	ldr	r1, [pc, #108]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 810309c:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 810309e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 81030a0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 81030a4:	4302      	orrs	r2, r0
 81030a6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81030a8:	005a      	lsls	r2, r3, #1
 81030aa:	d509      	bpl.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81030ac:	4a16      	ldr	r2, [pc, #88]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 81030ae:	6911      	ldr	r1, [r2, #16]
 81030b0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 81030b4:	6111      	str	r1, [r2, #16]
 81030b6:	6911      	ldr	r1, [r2, #16]
 81030b8:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 81030bc:	4301      	orrs	r1, r0
 81030be:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81030c0:	2b00      	cmp	r3, #0
 81030c2:	da06      	bge.n	81030d2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81030c4:	4910      	ldr	r1, [pc, #64]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 81030c6:	6d28      	ldr	r0, [r5, #80]	; 0x50
 81030c8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 81030ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 81030ce:	4302      	orrs	r2, r0
 81030d0:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81030d2:	021b      	lsls	r3, r3, #8
 81030d4:	d507      	bpl.n	81030e6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81030d6:	4a0c      	ldr	r2, [pc, #48]	; (8103108 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 81030d8:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 81030dc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 81030de:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 81030e2:	430b      	orrs	r3, r1
 81030e4:	6553      	str	r3, [r2, #84]	; 0x54
}
 81030e6:	1e30      	subs	r0, r6, #0
 81030e8:	bf18      	it	ne
 81030ea:	2001      	movne	r0, #1
 81030ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81030f0:	2101      	movs	r1, #1
 81030f2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 81030f6:	f7ff fb83 	bl	8102800 <RCCEx_PLL3_Config>
 81030fa:	e6dd      	b.n	8102eb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81030fc:	2601      	movs	r6, #1
 81030fe:	4634      	mov	r4, r6
 8103100:	e6e6      	b.n	8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8103102:	4626      	mov	r6, r4
 8103104:	e6e4      	b.n	8102ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8103106:	bf00      	nop
 8103108:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim1ClockSelection)
 810310c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8103110:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8103114:	d003      	beq.n	810311e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8103116:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810311a:	f47f aeeb 	bne.w	8102ef4 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(ret == HAL_OK)
 810311e:	b9a4      	cbnz	r4, 810314a <HAL_RCCEx_PeriphCLKConfig+0x85a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103120:	4a4d      	ldr	r2, [pc, #308]	; (8103258 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8103122:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8103126:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8103128:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 810312c:	430b      	orrs	r3, r1
 810312e:	6553      	str	r3, [r2, #84]	; 0x54
 8103130:	e6e2      	b.n	8102ef8 <HAL_RCCEx_PeriphCLKConfig+0x608>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103132:	2100      	movs	r1, #0
 8103134:	1d28      	adds	r0, r5, #4
 8103136:	f7ff faeb 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810313a:	4604      	mov	r4, r0
      break;
 810313c:	e7ef      	b.n	810311e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810313e:	2102      	movs	r1, #2
 8103140:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8103144:	f7ff fb5c 	bl	8102800 <RCCEx_PLL3_Config>
 8103148:	e7f7      	b.n	810313a <HAL_RCCEx_PeriphCLKConfig+0x84a>
 810314a:	4626      	mov	r6, r4
 810314c:	e6d4      	b.n	8102ef8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim2ClockSelection)
 810314e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8103152:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8103156:	d003      	beq.n	8103160 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8103158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810315c:	f47f aede 	bne.w	8102f1c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    if(ret == HAL_OK)
 8103160:	b9a4      	cbnz	r4, 810318c <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103162:	4a3d      	ldr	r2, [pc, #244]	; (8103258 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8103164:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8103168:	6d93      	ldr	r3, [r2, #88]	; 0x58
 810316a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 810316e:	430b      	orrs	r3, r1
 8103170:	6593      	str	r3, [r2, #88]	; 0x58
 8103172:	e6d5      	b.n	8102f20 <HAL_RCCEx_PeriphCLKConfig+0x630>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103174:	2100      	movs	r1, #0
 8103176:	1d28      	adds	r0, r5, #4
 8103178:	f7ff faca 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810317c:	4604      	mov	r4, r0
      break;
 810317e:	e7ef      	b.n	8103160 <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103180:	2102      	movs	r1, #2
 8103182:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8103186:	f7ff fb3b 	bl	8102800 <RCCEx_PLL3_Config>
 810318a:	e7f7      	b.n	810317c <HAL_RCCEx_PeriphCLKConfig+0x88c>
 810318c:	4626      	mov	r6, r4
 810318e:	e6c7      	b.n	8102f20 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8103190:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8103194:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8103198:	d003      	beq.n	81031a2 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 810319a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810319e:	f47f aed1 	bne.w	8102f44 <HAL_RCCEx_PeriphCLKConfig+0x654>
    if(ret == HAL_OK)
 81031a2:	b9a4      	cbnz	r4, 81031ce <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81031a4:	4a2c      	ldr	r2, [pc, #176]	; (8103258 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 81031a6:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 81031aa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 81031ac:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 81031b0:	430b      	orrs	r3, r1
 81031b2:	6593      	str	r3, [r2, #88]	; 0x58
 81031b4:	e6c8      	b.n	8102f48 <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81031b6:	2100      	movs	r1, #0
 81031b8:	1d28      	adds	r0, r5, #4
 81031ba:	f7ff faa9 	bl	8102710 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81031be:	4604      	mov	r4, r0
      break;
 81031c0:	e7ef      	b.n	81031a2 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81031c2:	2102      	movs	r1, #2
 81031c4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 81031c8:	f7ff fb1a 	bl	8102800 <RCCEx_PLL3_Config>
 81031cc:	e7f7      	b.n	81031be <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 81031ce:	4626      	mov	r6, r4
 81031d0:	e6ba      	b.n	8102f48 <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81031d2:	2102      	movs	r1, #2
 81031d4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 81031d8:	f7ff fb12 	bl	8102800 <RCCEx_PLL3_Config>
 81031dc:	e6f6      	b.n	8102fcc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
    switch(PeriphClkInit->AdcClockSelection)
 81031de:	2601      	movs	r6, #1
 81031e0:	4634      	mov	r4, r6
 81031e2:	e6ff      	b.n	8102fe4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 81031e4:	4626      	mov	r6, r4
 81031e6:	e6fd      	b.n	8102fe4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81031e8:	2101      	movs	r1, #1
 81031ea:	f105 0024 	add.w	r0, r5, #36	; 0x24
 81031ee:	f7ff fb07 	bl	8102800 <RCCEx_PLL3_Config>
 81031f2:	4604      	mov	r4, r0
      break;
 81031f4:	e70b      	b.n	810300e <HAL_RCCEx_PeriphCLKConfig+0x71e>
    switch(PeriphClkInit->UsbClockSelection)
 81031f6:	2601      	movs	r6, #1
 81031f8:	4634      	mov	r4, r6
 81031fa:	e713      	b.n	8103024 <HAL_RCCEx_PeriphCLKConfig+0x734>
 81031fc:	4626      	mov	r6, r4
 81031fe:	e711      	b.n	8103024 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103200:	4a15      	ldr	r2, [pc, #84]	; (8103258 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8103202:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8103204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103208:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 810320a:	b96c      	cbnz	r4, 8103228 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810320c:	4a12      	ldr	r2, [pc, #72]	; (8103258 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 810320e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8103210:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8103212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103216:	430b      	orrs	r3, r1
 8103218:	64d3      	str	r3, [r2, #76]	; 0x4c
 810321a:	e710      	b.n	810303e <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810321c:	2102      	movs	r1, #2
 810321e:	1d28      	adds	r0, r5, #4
 8103220:	f7ff fa76 	bl	8102710 <RCCEx_PLL2_Config>
 8103224:	4604      	mov	r4, r0
      break;
 8103226:	e7f0      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8103228:	4626      	mov	r6, r4
 810322a:	e708      	b.n	810303e <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->RngClockSelection)
 810322c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8103230:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8103234:	f47f af1b 	bne.w	810306e <HAL_RCCEx_PeriphCLKConfig+0x77e>
    if(ret == HAL_OK)
 8103238:	b964      	cbnz	r4, 8103254 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810323a:	4807      	ldr	r0, [pc, #28]	; (8103258 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 810323c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 810323e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103242:	430a      	orrs	r2, r1
 8103244:	6542      	str	r2, [r0, #84]	; 0x54
 8103246:	e713      	b.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0x780>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103248:	4803      	ldr	r0, [pc, #12]	; (8103258 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 810324a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 810324c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8103250:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8103252:	e7f1      	b.n	8103238 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8103254:	4626      	mov	r6, r4
 8103256:	e70b      	b.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8103258:	58024400 	.word	0x58024400

0810325c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 810325c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810325e:	f7ff fa13 	bl	8102688 <HAL_RCC_GetHCLKFreq>
 8103262:	4b05      	ldr	r3, [pc, #20]	; (8103278 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8103264:	4a05      	ldr	r2, [pc, #20]	; (810327c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8103266:	6a1b      	ldr	r3, [r3, #32]
 8103268:	f3c3 1302 	ubfx	r3, r3, #4, #3
 810326c:	5cd3      	ldrb	r3, [r2, r3]
 810326e:	f003 031f 	and.w	r3, r3, #31
}
 8103272:	40d8      	lsrs	r0, r3
 8103274:	bd08      	pop	{r3, pc}
 8103276:	bf00      	nop
 8103278:	58024400 	.word	0x58024400
 810327c:	08104194 	.word	0x08104194

08103280 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103280:	4a4e      	ldr	r2, [pc, #312]	; (81033bc <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 8103282:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103284:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8103286:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8103288:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810328a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 810328c:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8103290:	f3c6 3105 	ubfx	r1, r6, #12, #6
  if (pll2m != 0U)
 8103294:	f000 808d 	beq.w	81033b2 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103298:	ee07 1a90 	vmov	s15, r1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810329c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81032a0:	f3c5 1100 	ubfx	r1, r5, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81032a4:	434b      	muls	r3, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81032a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81032aa:	f004 0403 	and.w	r4, r4, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81032ae:	ee07 3a90 	vmov	s15, r3
    switch (pllsource)
 81032b2:	2c01      	cmp	r4, #1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81032b4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 81032b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    switch (pllsource)
 81032bc:	d06b      	beq.n	8103396 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 81032be:	2c02      	cmp	r4, #2
 81032c0:	d05b      	beq.n	810337a <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 81032c2:	2c00      	cmp	r4, #0
 81032c4:	d167      	bne.n	8103396 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81032c6:	6813      	ldr	r3, [r2, #0]
 81032c8:	069b      	lsls	r3, r3, #26
 81032ca:	d546      	bpl.n	810335a <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81032cc:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81032ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81032d0:	4a3b      	ldr	r2, [pc, #236]	; (81033c0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 81032d2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 81032d6:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81032d8:	ee07 2a10 	vmov	s14, r2
 81032dc:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 81032e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81032e4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 81032e8:	ee06 3a90 	vmov	s13, r3
 81032ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 81032f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81032f4:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81032f8:	4a30      	ldr	r2, [pc, #192]	; (81033bc <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
 81032fa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 81032fc:	f3c3 2346 	ubfx	r3, r3, #9, #7
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103300:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8103304:	ee07 3a10 	vmov	s14, r3
 8103308:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810330c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8103310:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8103314:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8103318:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810331c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 810331e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8103322:	ee07 3a10 	vmov	s14, r3
 8103326:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810332a:	ee37 7a06 	vadd.f32	s14, s14, s12
 810332e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8103332:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8103336:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810333a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 810333c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8103340:	ee07 3a10 	vmov	s14, r3
 8103344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8103348:	ee37 6a06 	vadd.f32	s12, s14, s12
 810334c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8103350:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8103354:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8103358:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810335a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 810335c:	eddf 5a19 	vldr	s11, [pc, #100]	; 81033c4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8103360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103364:	ee07 3a10 	vmov	s14, r3
 8103368:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810336c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8103370:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103374:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8103378:	e7be      	b.n	81032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810337a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 810337c:	eddf 5a12 	vldr	s11, [pc, #72]	; 81033c8 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8103380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103384:	ee07 3a10 	vmov	s14, r3
 8103388:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810338c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8103390:	ee77 7a86 	vadd.f32	s15, s15, s12
 8103394:	e7ee      	b.n	8103374 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103396:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8103398:	eddf 5a0c 	vldr	s11, [pc, #48]	; 81033cc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 810339c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033a0:	ee07 3a10 	vmov	s14, r3
 81033a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81033a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 81033ac:	ee77 7a86 	vadd.f32	s15, s15, s12
 81033b0:	e7e0      	b.n	8103374 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81033b2:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81033b6:	6081      	str	r1, [r0, #8]
}
 81033b8:	e7ce      	b.n	8103358 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 81033ba:	bf00      	nop
 81033bc:	58024400 	.word	0x58024400
 81033c0:	03d09000 	.word	0x03d09000
 81033c4:	4c742400 	.word	0x4c742400
 81033c8:	4af42400 	.word	0x4af42400
 81033cc:	4a742400 	.word	0x4a742400

081033d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81033d0:	4a4e      	ldr	r2, [pc, #312]	; (810350c <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 81033d2:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81033d4:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81033d6:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81033d8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81033da:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 81033dc:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81033e0:	f3c6 5105 	ubfx	r1, r6, #20, #6
  if (pll3m != 0U)
 81033e4:	f000 808d 	beq.w	8103502 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81033e8:	ee07 1a90 	vmov	s15, r1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81033ec:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81033f0:	f3c5 2100 	ubfx	r1, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81033f4:	434b      	muls	r3, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81033f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81033fa:	f004 0403 	and.w	r4, r4, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81033fe:	ee07 3a90 	vmov	s15, r3
    switch (pllsource)
 8103402:	2c01      	cmp	r4, #1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103404:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8103408:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    switch (pllsource)
 810340c:	d06b      	beq.n	81034e6 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 810340e:	2c02      	cmp	r4, #2
 8103410:	d05b      	beq.n	81034ca <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 8103412:	2c00      	cmp	r4, #0
 8103414:	d167      	bne.n	81034e6 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103416:	6813      	ldr	r3, [r2, #0]
 8103418:	069b      	lsls	r3, r3, #26
 810341a:	d546      	bpl.n	81034aa <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810341c:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810341e:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103420:	4a3b      	ldr	r2, [pc, #236]	; (8103510 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8103422:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8103426:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103428:	ee07 2a10 	vmov	s14, r2
 810342c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8103430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103434:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8103438:	ee06 3a90 	vmov	s13, r3
 810343c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8103440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103444:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8103448:	4a30      	ldr	r2, [pc, #192]	; (810350c <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
 810344a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 810344c:	f3c3 2346 	ubfx	r3, r3, #9, #7
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103450:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8103454:	ee07 3a10 	vmov	s14, r3
 8103458:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810345c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8103460:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8103464:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8103468:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810346c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 810346e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8103472:	ee07 3a10 	vmov	s14, r3
 8103476:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810347a:	ee37 7a06 	vadd.f32	s14, s14, s12
 810347e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8103482:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8103486:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810348a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 810348c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8103490:	ee07 3a10 	vmov	s14, r3
 8103494:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8103498:	ee37 6a06 	vadd.f32	s12, s14, s12
 810349c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 81034a0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 81034a4:	ed80 7a02 	vstr	s14, [r0, #8]
}
 81034a8:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81034aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 81034ac:	eddf 5a19 	vldr	s11, [pc, #100]	; 8103514 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 81034b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034b4:	ee07 3a10 	vmov	s14, r3
 81034b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81034bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 81034c0:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81034c4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 81034c8:	e7be      	b.n	8103448 <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81034ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 81034cc:	eddf 5a12 	vldr	s11, [pc, #72]	; 8103518 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 81034d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034d4:	ee07 3a10 	vmov	s14, r3
 81034d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81034dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 81034e0:	ee77 7a86 	vadd.f32	s15, s15, s12
 81034e4:	e7ee      	b.n	81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81034e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 81034e8:	eddf 5a0c 	vldr	s11, [pc, #48]	; 810351c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 81034ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034f0:	ee07 3a10 	vmov	s14, r3
 81034f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81034f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 81034fc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8103500:	e7e0      	b.n	81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8103502:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8103506:	6081      	str	r1, [r0, #8]
}
 8103508:	e7ce      	b.n	81034a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 810350a:	bf00      	nop
 810350c:	58024400 	.word	0x58024400
 8103510:	03d09000 	.word	0x03d09000
 8103514:	4c742400 	.word	0x4c742400
 8103518:	4af42400 	.word	0x4af42400
 810351c:	4a742400 	.word	0x4a742400

08103520 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8103520:	6803      	ldr	r3, [r0, #0]
 8103522:	681a      	ldr	r2, [r3, #0]
 8103524:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8103528:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810352a:	689a      	ldr	r2, [r3, #8]
 810352c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8103530:	f022 0201 	bic.w	r2, r2, #1
 8103534:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8103536:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8103538:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810353a:	bf02      	ittt	eq
 810353c:	681a      	ldreq	r2, [r3, #0]
 810353e:	f022 0210 	biceq.w	r2, r2, #16
 8103542:	601a      	streq	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8103544:	2320      	movs	r3, #32
 8103546:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810354a:	2300      	movs	r3, #0
 810354c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810354e:	6703      	str	r3, [r0, #112]	; 0x70
}
 8103550:	4770      	bx	lr
	...

08103554 <HAL_UART_Transmit_DMA>:
{
 8103554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103556:	4604      	mov	r4, r0
 8103558:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 810355a:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 810355e:	2f20      	cmp	r7, #32
 8103560:	d13a      	bne.n	81035d8 <HAL_UART_Transmit_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 8103562:	b361      	cbz	r1, 81035be <HAL_UART_Transmit_DMA+0x6a>
 8103564:	b35a      	cbz	r2, 81035be <HAL_UART_Transmit_DMA+0x6a>
    __HAL_LOCK(huart);
 8103566:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
 810356a:	2a01      	cmp	r2, #1
 810356c:	d034      	beq.n	81035d8 <HAL_UART_Transmit_DMA+0x84>
    if (huart->hdmatx != NULL)
 810356e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 8103570:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    __HAL_LOCK(huart);
 8103574:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103576:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8103578:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810357a:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    __HAL_LOCK(huart);
 810357e:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8103582:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 8103584:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8103588:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 810358c:	b1c8      	cbz	r0, 81035c2 <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810358e:	f8df c04c 	ldr.w	ip, [pc, #76]	; 81035dc <HAL_UART_Transmit_DMA+0x88>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8103592:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8103594:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8103598:	f8df c044 	ldr.w	ip, [pc, #68]	; 81035e0 <HAL_UART_Transmit_DMA+0x8c>
 810359c:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 81035a0:	f8df c040 	ldr.w	ip, [pc, #64]	; 81035e4 <HAL_UART_Transmit_DMA+0x90>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 81035a4:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 81035a6:	e9c0 c613 	strd	ip, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 81035aa:	f7fe f86b 	bl	8101684 <HAL_DMA_Start_IT>
 81035ae:	b140      	cbz	r0, 81035c2 <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 81035b0:	2310      	movs	r3, #16
 81035b2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 81035b6:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 81035ba:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
      return HAL_ERROR;
 81035be:	2001      	movs	r0, #1
 81035c0:	e009      	b.n	81035d6 <HAL_UART_Transmit_DMA+0x82>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 81035c2:	6823      	ldr	r3, [r4, #0]
 81035c4:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 81035c6:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 81035c8:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 81035ca:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81035ce:	689a      	ldr	r2, [r3, #8]
 81035d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 81035d4:	609a      	str	r2, [r3, #8]
}
 81035d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 81035d8:	2002      	movs	r0, #2
 81035da:	e7fc      	b.n	81035d6 <HAL_UART_Transmit_DMA+0x82>
 81035dc:	081035e9 	.word	0x081035e9
 81035e0:	08103617 	.word	0x08103617
 81035e4:	08103621 	.word	0x08103621

081035e8 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81035e8:	69c2      	ldr	r2, [r0, #28]
 81035ea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 81035ee:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81035f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81035f2:	d00c      	beq.n	810360e <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 81035f4:	2200      	movs	r2, #0
 81035f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	689a      	ldr	r2, [r3, #8]
 81035fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103602:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8103604:	681a      	ldr	r2, [r3, #0]
 8103606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810360a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810360c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 810360e:	4618      	mov	r0, r3
 8103610:	f7fd fa46 	bl	8100aa0 <HAL_UART_TxCpltCallback>
}
 8103614:	e7fa      	b.n	810360c <UART_DMATransmitCplt+0x24>

08103616 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8103616:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8103618:	6b80      	ldr	r0, [r0, #56]	; 0x38
 810361a:	f7fd fa51 	bl	8100ac0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810361e:	bd08      	pop	{r3, pc}

08103620 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8103620:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8103622:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8103624:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8103628:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
{
 810362c:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810362e:	689c      	ldr	r4, [r3, #8]
 8103630:	0624      	lsls	r4, r4, #24
 8103632:	d50f      	bpl.n	8103654 <UART_DMAError+0x34>
 8103634:	2a21      	cmp	r2, #33	; 0x21
 8103636:	d10d      	bne.n	8103654 <UART_DMAError+0x34>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8103638:	2200      	movs	r2, #0
 810363a:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810363e:	681a      	ldr	r2, [r3, #0]
 8103640:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8103644:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8103646:	689a      	ldr	r2, [r3, #8]
 8103648:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810364c:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 810364e:	2220      	movs	r2, #32
 8103650:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8103654:	689b      	ldr	r3, [r3, #8]
 8103656:	065b      	lsls	r3, r3, #25
 8103658:	d506      	bpl.n	8103668 <UART_DMAError+0x48>
 810365a:	2922      	cmp	r1, #34	; 0x22
 810365c:	d104      	bne.n	8103668 <UART_DMAError+0x48>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810365e:	2300      	movs	r3, #0
 8103660:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8103664:	f7ff ff5c 	bl	8103520 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8103668:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 810366c:	f043 0310 	orr.w	r3, r3, #16
 8103670:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8103674:	f7fd fa34 	bl	8100ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8103678:	bd10      	pop	{r4, pc}

0810367a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810367a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810367c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 810367e:	2300      	movs	r3, #0
 8103680:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8103684:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8103688:	f7fd fa2a 	bl	8100ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810368c:	bd08      	pop	{r3, pc}

0810368e <HAL_UARTEx_RxEventCallback>:
}
 810368e:	4770      	bx	lr

08103690 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8103690:	6803      	ldr	r3, [r0, #0]
 8103692:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8103694:	6819      	ldr	r1, [r3, #0]
{
 8103696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == 0U)
 810369a:	f640 060f 	movw	r6, #2063	; 0x80f
 810369e:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 81036a0:	689d      	ldr	r5, [r3, #8]
{
 81036a2:	4604      	mov	r4, r0
  if (errorflags == 0U)
 81036a4:	d10f      	bne.n	81036c6 <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81036a6:	0696      	lsls	r6, r2, #26
 81036a8:	f140 808b 	bpl.w	81037c2 <HAL_UART_IRQHandler+0x132>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81036ac:	f001 0620 	and.w	r6, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81036b0:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 81036b4:	433e      	orrs	r6, r7
 81036b6:	f000 8084 	beq.w	81037c2 <HAL_UART_IRQHandler+0x132>
      if (huart->RxISR != NULL)
 81036ba:	6f03      	ldr	r3, [r0, #112]	; 0x70
 81036bc:	2b00      	cmp	r3, #0
 81036be:	d079      	beq.n	81037b4 <HAL_UART_IRQHandler+0x124>
}
 81036c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81036c4:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81036c6:	4e9f      	ldr	r6, [pc, #636]	; (8103944 <HAL_UART_IRQHandler+0x2b4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81036c8:	489f      	ldr	r0, [pc, #636]	; (8103948 <HAL_UART_IRQHandler+0x2b8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81036ca:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81036cc:	4008      	ands	r0, r1
 81036ce:	4330      	orrs	r0, r6
 81036d0:	d077      	beq.n	81037c2 <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81036d2:	07d7      	lsls	r7, r2, #31
 81036d4:	d509      	bpl.n	81036ea <HAL_UART_IRQHandler+0x5a>
 81036d6:	05c8      	lsls	r0, r1, #23
 81036d8:	d507      	bpl.n	81036ea <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81036da:	2001      	movs	r0, #1
 81036dc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81036de:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 81036e2:	f040 0001 	orr.w	r0, r0, #1
 81036e6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81036ea:	0797      	lsls	r7, r2, #30
 81036ec:	d509      	bpl.n	8103702 <HAL_UART_IRQHandler+0x72>
 81036ee:	07e8      	lsls	r0, r5, #31
 81036f0:	d507      	bpl.n	8103702 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 81036f2:	2002      	movs	r0, #2
 81036f4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 81036f6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 81036fa:	f040 0004 	orr.w	r0, r0, #4
 81036fe:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8103702:	0757      	lsls	r7, r2, #29
 8103704:	d509      	bpl.n	810371a <HAL_UART_IRQHandler+0x8a>
 8103706:	07e8      	lsls	r0, r5, #31
 8103708:	d507      	bpl.n	810371a <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810370a:	2004      	movs	r0, #4
 810370c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810370e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8103712:	f040 0002 	orr.w	r0, r0, #2
 8103716:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 810371a:	0717      	lsls	r7, r2, #28
 810371c:	d50b      	bpl.n	8103736 <HAL_UART_IRQHandler+0xa6>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810371e:	f001 0020 	and.w	r0, r1, #32
 8103722:	4330      	orrs	r0, r6
 8103724:	d007      	beq.n	8103736 <HAL_UART_IRQHandler+0xa6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8103726:	2008      	movs	r0, #8
 8103728:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810372a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 810372e:	f040 0008 	orr.w	r0, r0, #8
 8103732:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8103736:	0516      	lsls	r6, r2, #20
 8103738:	d50a      	bpl.n	8103750 <HAL_UART_IRQHandler+0xc0>
 810373a:	0148      	lsls	r0, r1, #5
 810373c:	d508      	bpl.n	8103750 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810373e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8103742:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8103744:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8103748:	f043 0320 	orr.w	r3, r3, #32
 810374c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8103750:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8103754:	b373      	cbz	r3, 81037b4 <HAL_UART_IRQHandler+0x124>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8103756:	0693      	lsls	r3, r2, #26
 8103758:	d50a      	bpl.n	8103770 <HAL_UART_IRQHandler+0xe0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810375a:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810375e:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8103762:	ea51 0305 	orrs.w	r3, r1, r5
 8103766:	d003      	beq.n	8103770 <HAL_UART_IRQHandler+0xe0>
        if (huart->RxISR != NULL)
 8103768:	6f23      	ldr	r3, [r4, #112]	; 0x70
 810376a:	b10b      	cbz	r3, 8103770 <HAL_UART_IRQHandler+0xe0>
          huart->RxISR(huart);
 810376c:	4620      	mov	r0, r4
 810376e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8103770:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8103772:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8103776:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8103778:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103780:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8103782:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8103784:	d018      	beq.n	81037b8 <HAL_UART_IRQHandler+0x128>
        UART_EndRxTransfer(huart);
 8103786:	f7ff fecb 	bl	8103520 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810378a:	6823      	ldr	r3, [r4, #0]
 810378c:	689a      	ldr	r2, [r3, #8]
 810378e:	0657      	lsls	r7, r2, #25
 8103790:	d50d      	bpl.n	81037ae <HAL_UART_IRQHandler+0x11e>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8103792:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8103794:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8103796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810379a:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 810379c:	b138      	cbz	r0, 81037ae <HAL_UART_IRQHandler+0x11e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810379e:	4b6b      	ldr	r3, [pc, #428]	; (810394c <HAL_UART_IRQHandler+0x2bc>)
 81037a0:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 81037a2:	f7fe fa37 	bl	8101c14 <HAL_DMA_Abort_IT>
 81037a6:	b128      	cbz	r0, 81037b4 <HAL_UART_IRQHandler+0x124>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81037a8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 81037aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 81037ac:	e788      	b.n	81036c0 <HAL_UART_IRQHandler+0x30>
            HAL_UART_ErrorCallback(huart);
 81037ae:	4620      	mov	r0, r4
 81037b0:	f7fd f996 	bl	8100ae0 <HAL_UART_ErrorCallback>
}
 81037b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 81037b8:	f7fd f992 	bl	8100ae0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 81037bc:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 81037c0:	e7f8      	b.n	81037b4 <HAL_UART_IRQHandler+0x124>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81037c2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 81037c4:	2801      	cmp	r0, #1
 81037c6:	d17e      	bne.n	81038c6 <HAL_UART_IRQHandler+0x236>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 81037c8:	06d6      	lsls	r6, r2, #27
 81037ca:	d57c      	bpl.n	81038c6 <HAL_UART_IRQHandler+0x236>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 81037cc:	06c8      	lsls	r0, r1, #27
 81037ce:	d57a      	bpl.n	81038c6 <HAL_UART_IRQHandler+0x236>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 81037d0:	2210      	movs	r2, #16
 81037d2:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81037d4:	689a      	ldr	r2, [r3, #8]
 81037d6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 81037da:	d052      	beq.n	8103882 <HAL_UART_IRQHandler+0x1f2>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 81037dc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 81037de:	495c      	ldr	r1, [pc, #368]	; (8103950 <HAL_UART_IRQHandler+0x2c0>)
 81037e0:	6802      	ldr	r2, [r0, #0]
 81037e2:	428a      	cmp	r2, r1
 81037e4:	d01e      	beq.n	8103824 <HAL_UART_IRQHandler+0x194>
 81037e6:	3118      	adds	r1, #24
 81037e8:	428a      	cmp	r2, r1
 81037ea:	d01b      	beq.n	8103824 <HAL_UART_IRQHandler+0x194>
 81037ec:	3118      	adds	r1, #24
 81037ee:	428a      	cmp	r2, r1
 81037f0:	d018      	beq.n	8103824 <HAL_UART_IRQHandler+0x194>
 81037f2:	3118      	adds	r1, #24
 81037f4:	428a      	cmp	r2, r1
 81037f6:	d015      	beq.n	8103824 <HAL_UART_IRQHandler+0x194>
 81037f8:	3118      	adds	r1, #24
 81037fa:	428a      	cmp	r2, r1
 81037fc:	d012      	beq.n	8103824 <HAL_UART_IRQHandler+0x194>
 81037fe:	3118      	adds	r1, #24
 8103800:	428a      	cmp	r2, r1
 8103802:	d00f      	beq.n	8103824 <HAL_UART_IRQHandler+0x194>
 8103804:	3118      	adds	r1, #24
 8103806:	428a      	cmp	r2, r1
 8103808:	d00c      	beq.n	8103824 <HAL_UART_IRQHandler+0x194>
 810380a:	3118      	adds	r1, #24
 810380c:	428a      	cmp	r2, r1
 810380e:	d009      	beq.n	8103824 <HAL_UART_IRQHandler+0x194>
 8103810:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8103814:	428a      	cmp	r2, r1
 8103816:	d005      	beq.n	8103824 <HAL_UART_IRQHandler+0x194>
 8103818:	3118      	adds	r1, #24
 810381a:	428a      	cmp	r2, r1
 810381c:	d002      	beq.n	8103824 <HAL_UART_IRQHandler+0x194>
 810381e:	3118      	adds	r1, #24
 8103820:	428a      	cmp	r2, r1
 8103822:	d0ff      	beq.n	8103824 <HAL_UART_IRQHandler+0x194>
 8103824:	6852      	ldr	r2, [r2, #4]
 8103826:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8103828:	2a00      	cmp	r2, #0
 810382a:	d0c3      	beq.n	81037b4 <HAL_UART_IRQHandler+0x124>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810382c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8103830:	4291      	cmp	r1, r2
 8103832:	d9bf      	bls.n	81037b4 <HAL_UART_IRQHandler+0x124>
        huart->RxXferCount = nb_remaining_rx_data;
 8103834:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8103838:	69c2      	ldr	r2, [r0, #28]
 810383a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 810383e:	d016      	beq.n	810386e <HAL_UART_IRQHandler+0x1de>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8103840:	681a      	ldr	r2, [r3, #0]
 8103842:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103846:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103848:	689a      	ldr	r2, [r3, #8]
 810384a:	f022 0201 	bic.w	r2, r2, #1
 810384e:	609a      	str	r2, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8103850:	689a      	ldr	r2, [r3, #8]
 8103852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8103856:	609a      	str	r2, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8103858:	2220      	movs	r2, #32
 810385a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810385e:	2200      	movs	r2, #0
 8103860:	66e2      	str	r2, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8103862:	681a      	ldr	r2, [r3, #0]
 8103864:	f022 0210 	bic.w	r2, r2, #16
 8103868:	601a      	str	r2, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 810386a:	f7fe f827 	bl	81018bc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810386e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8103872:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8103876:	1ac9      	subs	r1, r1, r3
 8103878:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810387a:	4620      	mov	r0, r4
 810387c:	f7ff ff07 	bl	810368e <HAL_UARTEx_RxEventCallback>
 8103880:	e798      	b.n	81037b4 <HAL_UART_IRQHandler+0x124>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8103882:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8103886:	b288      	uxth	r0, r1
      if ((huart->RxXferCount > 0U)
 8103888:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 810388c:	b289      	uxth	r1, r1
 810388e:	2900      	cmp	r1, #0
 8103890:	d090      	beq.n	81037b4 <HAL_UART_IRQHandler+0x124>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8103892:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8103896:	1a09      	subs	r1, r1, r0
 8103898:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 810389a:	2900      	cmp	r1, #0
 810389c:	d08a      	beq.n	81037b4 <HAL_UART_IRQHandler+0x124>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810389e:	6818      	ldr	r0, [r3, #0]
 81038a0:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 81038a4:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81038a6:	6898      	ldr	r0, [r3, #8]
 81038a8:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 81038ac:	f020 0001 	bic.w	r0, r0, #1
 81038b0:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 81038b2:	2020      	movs	r0, #32
 81038b4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81038b8:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 81038ba:	6722      	str	r2, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81038bc:	681a      	ldr	r2, [r3, #0]
 81038be:	f022 0210 	bic.w	r2, r2, #16
 81038c2:	601a      	str	r2, [r3, #0]
 81038c4:	e7d9      	b.n	810387a <HAL_UART_IRQHandler+0x1ea>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 81038c6:	02d7      	lsls	r7, r2, #11
 81038c8:	d509      	bpl.n	81038de <HAL_UART_IRQHandler+0x24e>
 81038ca:	026e      	lsls	r6, r5, #9
 81038cc:	d507      	bpl.n	81038de <HAL_UART_IRQHandler+0x24e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 81038ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 81038d2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 81038d4:	621a      	str	r2, [r3, #32]
}
 81038d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 81038da:	f000 bb31 	b.w	8103f40 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 81038de:	0610      	lsls	r0, r2, #24
 81038e0:	d50b      	bpl.n	81038fa <HAL_UART_IRQHandler+0x26a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 81038e2:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 81038e6:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 81038ea:	4328      	orrs	r0, r5
 81038ec:	d005      	beq.n	81038fa <HAL_UART_IRQHandler+0x26a>
    if (huart->TxISR != NULL)
 81038ee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 81038f0:	2b00      	cmp	r3, #0
 81038f2:	f43f af5f 	beq.w	81037b4 <HAL_UART_IRQHandler+0x124>
      huart->TxISR(huart);
 81038f6:	4620      	mov	r0, r4
 81038f8:	e6e2      	b.n	81036c0 <HAL_UART_IRQHandler+0x30>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 81038fa:	0657      	lsls	r7, r2, #25
 81038fc:	d50e      	bpl.n	810391c <HAL_UART_IRQHandler+0x28c>
 81038fe:	064e      	lsls	r6, r1, #25
 8103900:	d50c      	bpl.n	810391c <HAL_UART_IRQHandler+0x28c>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8103902:	681a      	ldr	r2, [r3, #0]
 8103904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8103908:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810390a:	2320      	movs	r3, #32
 810390c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8103910:	2300      	movs	r3, #0
 8103912:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8103914:	4620      	mov	r0, r4
 8103916:	f7fd f8c3 	bl	8100aa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810391a:	e74b      	b.n	81037b4 <HAL_UART_IRQHandler+0x124>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810391c:	0215      	lsls	r5, r2, #8
 810391e:	d506      	bpl.n	810392e <HAL_UART_IRQHandler+0x29e>
 8103920:	0048      	lsls	r0, r1, #1
 8103922:	d504      	bpl.n	810392e <HAL_UART_IRQHandler+0x29e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8103924:	4620      	mov	r0, r4
}
 8103926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810392a:	f000 bb0b 	b.w	8103f44 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810392e:	01d3      	lsls	r3, r2, #7
 8103930:	f57f af40 	bpl.w	81037b4 <HAL_UART_IRQHandler+0x124>
 8103934:	2900      	cmp	r1, #0
 8103936:	f6bf af3d 	bge.w	81037b4 <HAL_UART_IRQHandler+0x124>
    HAL_UARTEx_RxFifoFullCallback(huart);
 810393a:	4620      	mov	r0, r4
}
 810393c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8103940:	f000 baff 	b.w	8103f42 <HAL_UARTEx_RxFifoFullCallback>
 8103944:	10000001 	.word	0x10000001
 8103948:	04000120 	.word	0x04000120
 810394c:	0810367b 	.word	0x0810367b
 8103950:	40020010 	.word	0x40020010

08103954 <UART_SetConfig>:
{
 8103954:	b530      	push	{r4, r5, lr}
 8103956:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8103958:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810395a:	6921      	ldr	r1, [r4, #16]
 810395c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810395e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8103960:	69c0      	ldr	r0, [r0, #28]
 8103962:	430a      	orrs	r2, r1
 8103964:	6961      	ldr	r1, [r4, #20]
 8103966:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8103968:	4998      	ldr	r1, [pc, #608]	; (8103bcc <UART_SetConfig+0x278>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810396a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810396c:	4029      	ands	r1, r5
 810396e:	430a      	orrs	r2, r1
 8103970:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8103972:	685a      	ldr	r2, [r3, #4]
 8103974:	68e1      	ldr	r1, [r4, #12]
 8103976:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 810397a:	430a      	orrs	r2, r1
 810397c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810397e:	4a94      	ldr	r2, [pc, #592]	; (8103bd0 <UART_SetConfig+0x27c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8103980:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8103982:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8103984:	bf1c      	itt	ne
 8103986:	6a22      	ldrne	r2, [r4, #32]
 8103988:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810398a:	689a      	ldr	r2, [r3, #8]
 810398c:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8103990:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8103994:	430a      	orrs	r2, r1
 8103996:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8103998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810399a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 810399c:	f022 020f 	bic.w	r2, r2, #15
 81039a0:	430a      	orrs	r2, r1
 81039a2:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 81039a4:	4a8b      	ldr	r2, [pc, #556]	; (8103bd4 <UART_SetConfig+0x280>)
 81039a6:	4293      	cmp	r3, r2
{
 81039a8:	b087      	sub	sp, #28
  UART_GETCLOCKSOURCE(huart, clocksource);
 81039aa:	d11b      	bne.n	81039e4 <UART_SetConfig+0x90>
 81039ac:	4b8a      	ldr	r3, [pc, #552]	; (8103bd8 <UART_SetConfig+0x284>)
 81039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81039b4:	2b28      	cmp	r3, #40	; 0x28
 81039b6:	d86c      	bhi.n	8103a92 <UART_SetConfig+0x13e>
 81039b8:	4a88      	ldr	r2, [pc, #544]	; (8103bdc <UART_SetConfig+0x288>)
 81039ba:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81039bc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 81039c0:	f040 8134 	bne.w	8103c2c <UART_SetConfig+0x2d8>
    switch (clocksource)
 81039c4:	2b08      	cmp	r3, #8
 81039c6:	f200 80c0 	bhi.w	8103b4a <UART_SetConfig+0x1f6>
 81039ca:	2b08      	cmp	r3, #8
 81039cc:	d861      	bhi.n	8103a92 <UART_SetConfig+0x13e>
 81039ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 81039d2:	00e8      	.short	0x00e8
 81039d4:	006000ed 	.word	0x006000ed
 81039d8:	00f00060 	.word	0x00f00060
 81039dc:	00600060 	.word	0x00600060
 81039e0:	00f50060 	.word	0x00f50060
  UART_GETCLOCKSOURCE(huart, clocksource);
 81039e4:	4a7e      	ldr	r2, [pc, #504]	; (8103be0 <UART_SetConfig+0x28c>)
 81039e6:	4293      	cmp	r3, r2
 81039e8:	d107      	bne.n	81039fa <UART_SetConfig+0xa6>
 81039ea:	4b7b      	ldr	r3, [pc, #492]	; (8103bd8 <UART_SetConfig+0x284>)
 81039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039ee:	f003 0307 	and.w	r3, r3, #7
 81039f2:	2b05      	cmp	r3, #5
 81039f4:	d84d      	bhi.n	8103a92 <UART_SetConfig+0x13e>
 81039f6:	4a7b      	ldr	r2, [pc, #492]	; (8103be4 <UART_SetConfig+0x290>)
 81039f8:	e7df      	b.n	81039ba <UART_SetConfig+0x66>
 81039fa:	4a7b      	ldr	r2, [pc, #492]	; (8103be8 <UART_SetConfig+0x294>)
 81039fc:	4293      	cmp	r3, r2
 81039fe:	d107      	bne.n	8103a10 <UART_SetConfig+0xbc>
 8103a00:	4b75      	ldr	r3, [pc, #468]	; (8103bd8 <UART_SetConfig+0x284>)
 8103a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a04:	f003 0307 	and.w	r3, r3, #7
 8103a08:	2b05      	cmp	r3, #5
 8103a0a:	d842      	bhi.n	8103a92 <UART_SetConfig+0x13e>
 8103a0c:	4a77      	ldr	r2, [pc, #476]	; (8103bec <UART_SetConfig+0x298>)
 8103a0e:	e7d4      	b.n	81039ba <UART_SetConfig+0x66>
 8103a10:	4a77      	ldr	r2, [pc, #476]	; (8103bf0 <UART_SetConfig+0x29c>)
 8103a12:	4293      	cmp	r3, r2
 8103a14:	d107      	bne.n	8103a26 <UART_SetConfig+0xd2>
 8103a16:	4b70      	ldr	r3, [pc, #448]	; (8103bd8 <UART_SetConfig+0x284>)
 8103a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a1a:	f003 0307 	and.w	r3, r3, #7
 8103a1e:	2b05      	cmp	r3, #5
 8103a20:	d837      	bhi.n	8103a92 <UART_SetConfig+0x13e>
 8103a22:	4a74      	ldr	r2, [pc, #464]	; (8103bf4 <UART_SetConfig+0x2a0>)
 8103a24:	e7c9      	b.n	81039ba <UART_SetConfig+0x66>
 8103a26:	4a74      	ldr	r2, [pc, #464]	; (8103bf8 <UART_SetConfig+0x2a4>)
 8103a28:	4293      	cmp	r3, r2
 8103a2a:	d107      	bne.n	8103a3c <UART_SetConfig+0xe8>
 8103a2c:	4b6a      	ldr	r3, [pc, #424]	; (8103bd8 <UART_SetConfig+0x284>)
 8103a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a30:	f003 0307 	and.w	r3, r3, #7
 8103a34:	2b05      	cmp	r3, #5
 8103a36:	d82c      	bhi.n	8103a92 <UART_SetConfig+0x13e>
 8103a38:	4a70      	ldr	r2, [pc, #448]	; (8103bfc <UART_SetConfig+0x2a8>)
 8103a3a:	e7be      	b.n	81039ba <UART_SetConfig+0x66>
 8103a3c:	4a70      	ldr	r2, [pc, #448]	; (8103c00 <UART_SetConfig+0x2ac>)
 8103a3e:	4293      	cmp	r3, r2
 8103a40:	d107      	bne.n	8103a52 <UART_SetConfig+0xfe>
 8103a42:	4b65      	ldr	r3, [pc, #404]	; (8103bd8 <UART_SetConfig+0x284>)
 8103a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103a4a:	2b28      	cmp	r3, #40	; 0x28
 8103a4c:	d821      	bhi.n	8103a92 <UART_SetConfig+0x13e>
 8103a4e:	4a6d      	ldr	r2, [pc, #436]	; (8103c04 <UART_SetConfig+0x2b0>)
 8103a50:	e7b3      	b.n	81039ba <UART_SetConfig+0x66>
 8103a52:	4a6d      	ldr	r2, [pc, #436]	; (8103c08 <UART_SetConfig+0x2b4>)
 8103a54:	4293      	cmp	r3, r2
 8103a56:	d107      	bne.n	8103a68 <UART_SetConfig+0x114>
 8103a58:	4b5f      	ldr	r3, [pc, #380]	; (8103bd8 <UART_SetConfig+0x284>)
 8103a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a5c:	f003 0307 	and.w	r3, r3, #7
 8103a60:	2b05      	cmp	r3, #5
 8103a62:	d816      	bhi.n	8103a92 <UART_SetConfig+0x13e>
 8103a64:	4a69      	ldr	r2, [pc, #420]	; (8103c0c <UART_SetConfig+0x2b8>)
 8103a66:	e7a8      	b.n	81039ba <UART_SetConfig+0x66>
 8103a68:	4a69      	ldr	r2, [pc, #420]	; (8103c10 <UART_SetConfig+0x2bc>)
 8103a6a:	4293      	cmp	r3, r2
 8103a6c:	d107      	bne.n	8103a7e <UART_SetConfig+0x12a>
 8103a6e:	4b5a      	ldr	r3, [pc, #360]	; (8103bd8 <UART_SetConfig+0x284>)
 8103a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a72:	f003 0307 	and.w	r3, r3, #7
 8103a76:	2b05      	cmp	r3, #5
 8103a78:	d80b      	bhi.n	8103a92 <UART_SetConfig+0x13e>
 8103a7a:	4a66      	ldr	r2, [pc, #408]	; (8103c14 <UART_SetConfig+0x2c0>)
 8103a7c:	e79d      	b.n	81039ba <UART_SetConfig+0x66>
 8103a7e:	4a54      	ldr	r2, [pc, #336]	; (8103bd0 <UART_SetConfig+0x27c>)
 8103a80:	4293      	cmp	r3, r2
 8103a82:	d106      	bne.n	8103a92 <UART_SetConfig+0x13e>
 8103a84:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8103a88:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8103a8a:	f003 0307 	and.w	r3, r3, #7
 8103a8e:	2b05      	cmp	r3, #5
 8103a90:	d901      	bls.n	8103a96 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8103a92:	2001      	movs	r0, #1
 8103a94:	e00e      	b.n	8103ab4 <UART_SetConfig+0x160>
 8103a96:	4960      	ldr	r1, [pc, #384]	; (8103c18 <UART_SetConfig+0x2c4>)
 8103a98:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8103a9a:	2b10      	cmp	r3, #16
 8103a9c:	d023      	beq.n	8103ae6 <UART_SetConfig+0x192>
 8103a9e:	d811      	bhi.n	8103ac4 <UART_SetConfig+0x170>
 8103aa0:	2b04      	cmp	r3, #4
 8103aa2:	d016      	beq.n	8103ad2 <UART_SetConfig+0x17e>
 8103aa4:	2b08      	cmp	r3, #8
 8103aa6:	d019      	beq.n	8103adc <UART_SetConfig+0x188>
 8103aa8:	2b02      	cmp	r3, #2
 8103aaa:	d1f2      	bne.n	8103a92 <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8103aac:	f7ff fbd6 	bl	810325c <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8103ab0:	bb10      	cbnz	r0, 8103af8 <UART_SetConfig+0x1a4>
 8103ab2:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8103ab4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8103ab8:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8103aba:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8103abc:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 8103ac0:	b007      	add	sp, #28
 8103ac2:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 8103ac4:	2b20      	cmp	r3, #32
 8103ac6:	d03e      	beq.n	8103b46 <UART_SetConfig+0x1f2>
 8103ac8:	2b40      	cmp	r3, #64	; 0x40
 8103aca:	d1e2      	bne.n	8103a92 <UART_SetConfig+0x13e>
 8103acc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8103ad0:	e012      	b.n	8103af8 <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103ad2:	4668      	mov	r0, sp
 8103ad4:	f7ff fbd4 	bl	8103280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103ad8:	9801      	ldr	r0, [sp, #4]
        break;
 8103ada:	e7e9      	b.n	8103ab0 <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103adc:	a803      	add	r0, sp, #12
 8103ade:	f7ff fc77 	bl	81033d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103ae2:	9804      	ldr	r0, [sp, #16]
        break;
 8103ae4:	e7e4      	b.n	8103ab0 <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103ae6:	6813      	ldr	r3, [r2, #0]
 8103ae8:	484c      	ldr	r0, [pc, #304]	; (8103c1c <UART_SetConfig+0x2c8>)
 8103aea:	f013 0f20 	tst.w	r3, #32
 8103aee:	d003      	beq.n	8103af8 <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103af0:	6813      	ldr	r3, [r2, #0]
 8103af2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8103af6:	40d8      	lsrs	r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103af8:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8103afa:	4b49      	ldr	r3, [pc, #292]	; (8103c20 <UART_SetConfig+0x2cc>)
 8103afc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103afe:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8103b02:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8103b06:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103b0a:	4299      	cmp	r1, r3
 8103b0c:	d8c1      	bhi.n	8103a92 <UART_SetConfig+0x13e>
 8103b0e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8103b12:	d8be      	bhi.n	8103a92 <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103b14:	2300      	movs	r3, #0
 8103b16:	4619      	mov	r1, r3
 8103b18:	f7fc fbe6 	bl	81002e8 <__aeabi_uldivmod>
 8103b1c:	0209      	lsls	r1, r1, #8
 8103b1e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8103b22:	086b      	lsrs	r3, r5, #1
 8103b24:	0200      	lsls	r0, r0, #8
 8103b26:	18c0      	adds	r0, r0, r3
 8103b28:	462a      	mov	r2, r5
 8103b2a:	f04f 0300 	mov.w	r3, #0
 8103b2e:	f141 0100 	adc.w	r1, r1, #0
 8103b32:	f7fc fbd9 	bl	81002e8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8103b36:	4b3b      	ldr	r3, [pc, #236]	; (8103c24 <UART_SetConfig+0x2d0>)
 8103b38:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8103b3c:	429a      	cmp	r2, r3
 8103b3e:	d8a8      	bhi.n	8103a92 <UART_SetConfig+0x13e>
          huart->Instance->BRR = usartdiv;
 8103b40:	6823      	ldr	r3, [r4, #0]
 8103b42:	60d8      	str	r0, [r3, #12]
 8103b44:	e7b5      	b.n	8103ab2 <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 8103b46:	4838      	ldr	r0, [pc, #224]	; (8103c28 <UART_SetConfig+0x2d4>)
 8103b48:	e7d6      	b.n	8103af8 <UART_SetConfig+0x1a4>
    switch (clocksource)
 8103b4a:	2b20      	cmp	r3, #32
 8103b4c:	d03b      	beq.n	8103bc6 <UART_SetConfig+0x272>
 8103b4e:	2b40      	cmp	r3, #64	; 0x40
 8103b50:	d00b      	beq.n	8103b6a <UART_SetConfig+0x216>
 8103b52:	2b10      	cmp	r3, #16
 8103b54:	d19d      	bne.n	8103a92 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103b56:	4b20      	ldr	r3, [pc, #128]	; (8103bd8 <UART_SetConfig+0x284>)
 8103b58:	4830      	ldr	r0, [pc, #192]	; (8103c1c <UART_SetConfig+0x2c8>)
 8103b5a:	681a      	ldr	r2, [r3, #0]
 8103b5c:	f012 0f20 	tst.w	r2, #32
 8103b60:	d003      	beq.n	8103b6a <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103b62:	681b      	ldr	r3, [r3, #0]
 8103b64:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8103b68:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103b6a:	6862      	ldr	r2, [r4, #4]
 8103b6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8103b6e:	4b2c      	ldr	r3, [pc, #176]	; (8103c20 <UART_SetConfig+0x2cc>)
 8103b70:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8103b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8103b78:	0850      	lsrs	r0, r2, #1
 8103b7a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8103b7e:	fbb0 f0f2 	udiv	r0, r0, r2
 8103b82:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103b84:	f1a3 0110 	sub.w	r1, r3, #16
 8103b88:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8103b8c:	4291      	cmp	r1, r2
 8103b8e:	d880      	bhi.n	8103a92 <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8103b90:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8103b94:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8103b96:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8103b98:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8103b9c:	4318      	orrs	r0, r3
 8103b9e:	60d0      	str	r0, [r2, #12]
 8103ba0:	e787      	b.n	8103ab2 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8103ba2:	f7fe fd91 	bl	81026c8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8103ba6:	2800      	cmp	r0, #0
 8103ba8:	d083      	beq.n	8103ab2 <UART_SetConfig+0x15e>
 8103baa:	e7de      	b.n	8103b6a <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 8103bac:	f7fe fd9e 	bl	81026ec <HAL_RCC_GetPCLK2Freq>
        break;
 8103bb0:	e7f9      	b.n	8103ba6 <UART_SetConfig+0x252>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103bb2:	4668      	mov	r0, sp
 8103bb4:	f7ff fb64 	bl	8103280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103bb8:	9801      	ldr	r0, [sp, #4]
        break;
 8103bba:	e7f4      	b.n	8103ba6 <UART_SetConfig+0x252>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103bbc:	a803      	add	r0, sp, #12
 8103bbe:	f7ff fc07 	bl	81033d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103bc2:	9804      	ldr	r0, [sp, #16]
        break;
 8103bc4:	e7ef      	b.n	8103ba6 <UART_SetConfig+0x252>
        pclk = (uint32_t) CSI_VALUE;
 8103bc6:	4818      	ldr	r0, [pc, #96]	; (8103c28 <UART_SetConfig+0x2d4>)
 8103bc8:	e7cf      	b.n	8103b6a <UART_SetConfig+0x216>
 8103bca:	bf00      	nop
 8103bcc:	cfff69f3 	.word	0xcfff69f3
 8103bd0:	58000c00 	.word	0x58000c00
 8103bd4:	40011000 	.word	0x40011000
 8103bd8:	58024400 	.word	0x58024400
 8103bdc:	081041ac 	.word	0x081041ac
 8103be0:	40004400 	.word	0x40004400
 8103be4:	081041d5 	.word	0x081041d5
 8103be8:	40004800 	.word	0x40004800
 8103bec:	081041d5 	.word	0x081041d5
 8103bf0:	40004c00 	.word	0x40004c00
 8103bf4:	081041d5 	.word	0x081041d5
 8103bf8:	40005000 	.word	0x40005000
 8103bfc:	081041d5 	.word	0x081041d5
 8103c00:	40011400 	.word	0x40011400
 8103c04:	081041ac 	.word	0x081041ac
 8103c08:	40007800 	.word	0x40007800
 8103c0c:	081041d5 	.word	0x081041d5
 8103c10:	40007c00 	.word	0x40007c00
 8103c14:	081041d5 	.word	0x081041d5
 8103c18:	081041db 	.word	0x081041db
 8103c1c:	03d09000 	.word	0x03d09000
 8103c20:	081041e2 	.word	0x081041e2
 8103c24:	000ffcff 	.word	0x000ffcff
 8103c28:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8103c2c:	2b08      	cmp	r3, #8
 8103c2e:	d817      	bhi.n	8103c60 <UART_SetConfig+0x30c>
 8103c30:	2b08      	cmp	r3, #8
 8103c32:	f63f af2e 	bhi.w	8103a92 <UART_SetConfig+0x13e>
 8103c36:	a201      	add	r2, pc, #4	; (adr r2, 8103c3c <UART_SetConfig+0x2e8>)
 8103c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c3c:	08103cb1 	.word	0x08103cb1
 8103c40:	08103cbd 	.word	0x08103cbd
 8103c44:	08103a93 	.word	0x08103a93
 8103c48:	08103a93 	.word	0x08103a93
 8103c4c:	08103cc3 	.word	0x08103cc3
 8103c50:	08103a93 	.word	0x08103a93
 8103c54:	08103a93 	.word	0x08103a93
 8103c58:	08103a93 	.word	0x08103a93
 8103c5c:	08103ccd 	.word	0x08103ccd
 8103c60:	2b20      	cmp	r3, #32
 8103c62:	d038      	beq.n	8103cd6 <UART_SetConfig+0x382>
 8103c64:	2b40      	cmp	r3, #64	; 0x40
 8103c66:	d038      	beq.n	8103cda <UART_SetConfig+0x386>
 8103c68:	2b10      	cmp	r3, #16
 8103c6a:	f47f af12 	bne.w	8103a92 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103c6e:	4a1d      	ldr	r2, [pc, #116]	; (8103ce4 <UART_SetConfig+0x390>)
 8103c70:	6813      	ldr	r3, [r2, #0]
 8103c72:	f013 0f20 	tst.w	r3, #32
 8103c76:	4b1c      	ldr	r3, [pc, #112]	; (8103ce8 <UART_SetConfig+0x394>)
 8103c78:	d032      	beq.n	8103ce0 <UART_SetConfig+0x38c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103c7a:	6810      	ldr	r0, [r2, #0]
 8103c7c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8103c80:	fa23 f000 	lsr.w	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103c84:	6862      	ldr	r2, [r4, #4]
 8103c86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8103c88:	4b18      	ldr	r3, [pc, #96]	; (8103cec <UART_SetConfig+0x398>)
 8103c8a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8103c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8103c92:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8103c96:	fbb3 f3f2 	udiv	r3, r3, r2
 8103c9a:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103c9c:	f1a3 0110 	sub.w	r1, r3, #16
 8103ca0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8103ca4:	4291      	cmp	r1, r2
 8103ca6:	f63f aef4 	bhi.w	8103a92 <UART_SetConfig+0x13e>
        huart->Instance->BRR = usartdiv;
 8103caa:	6822      	ldr	r2, [r4, #0]
 8103cac:	60d3      	str	r3, [r2, #12]
 8103cae:	e700      	b.n	8103ab2 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8103cb0:	f7fe fd0a 	bl	81026c8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8103cb4:	2800      	cmp	r0, #0
 8103cb6:	f43f aefc 	beq.w	8103ab2 <UART_SetConfig+0x15e>
 8103cba:	e7e3      	b.n	8103c84 <UART_SetConfig+0x330>
        pclk = HAL_RCC_GetPCLK2Freq();
 8103cbc:	f7fe fd16 	bl	81026ec <HAL_RCC_GetPCLK2Freq>
        break;
 8103cc0:	e7f8      	b.n	8103cb4 <UART_SetConfig+0x360>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103cc2:	4668      	mov	r0, sp
 8103cc4:	f7ff fadc 	bl	8103280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103cc8:	9801      	ldr	r0, [sp, #4]
        break;
 8103cca:	e7f3      	b.n	8103cb4 <UART_SetConfig+0x360>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103ccc:	a803      	add	r0, sp, #12
 8103cce:	f7ff fb7f 	bl	81033d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103cd2:	9804      	ldr	r0, [sp, #16]
        break;
 8103cd4:	e7ee      	b.n	8103cb4 <UART_SetConfig+0x360>
        pclk = (uint32_t) CSI_VALUE;
 8103cd6:	4806      	ldr	r0, [pc, #24]	; (8103cf0 <UART_SetConfig+0x39c>)
 8103cd8:	e7d4      	b.n	8103c84 <UART_SetConfig+0x330>
    switch (clocksource)
 8103cda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8103cde:	e7d1      	b.n	8103c84 <UART_SetConfig+0x330>
          pclk = (uint32_t) HSI_VALUE;
 8103ce0:	4618      	mov	r0, r3
 8103ce2:	e7cf      	b.n	8103c84 <UART_SetConfig+0x330>
 8103ce4:	58024400 	.word	0x58024400
 8103ce8:	03d09000 	.word	0x03d09000
 8103cec:	081041e2 	.word	0x081041e2
 8103cf0:	003d0900 	.word	0x003d0900

08103cf4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8103cf4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8103cf6:	07da      	lsls	r2, r3, #31
{
 8103cf8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8103cfa:	d506      	bpl.n	8103d0a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8103cfc:	6801      	ldr	r1, [r0, #0]
 8103cfe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8103d00:	684a      	ldr	r2, [r1, #4]
 8103d02:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8103d06:	4322      	orrs	r2, r4
 8103d08:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8103d0a:	079c      	lsls	r4, r3, #30
 8103d0c:	d506      	bpl.n	8103d1c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8103d0e:	6801      	ldr	r1, [r0, #0]
 8103d10:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8103d12:	684a      	ldr	r2, [r1, #4]
 8103d14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8103d18:	4322      	orrs	r2, r4
 8103d1a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8103d1c:	0759      	lsls	r1, r3, #29
 8103d1e:	d506      	bpl.n	8103d2e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8103d20:	6801      	ldr	r1, [r0, #0]
 8103d22:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8103d24:	684a      	ldr	r2, [r1, #4]
 8103d26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8103d2a:	4322      	orrs	r2, r4
 8103d2c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8103d2e:	071a      	lsls	r2, r3, #28
 8103d30:	d506      	bpl.n	8103d40 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8103d32:	6801      	ldr	r1, [r0, #0]
 8103d34:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8103d36:	684a      	ldr	r2, [r1, #4]
 8103d38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103d3c:	4322      	orrs	r2, r4
 8103d3e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8103d40:	06dc      	lsls	r4, r3, #27
 8103d42:	d506      	bpl.n	8103d52 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8103d44:	6801      	ldr	r1, [r0, #0]
 8103d46:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8103d48:	688a      	ldr	r2, [r1, #8]
 8103d4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8103d4e:	4322      	orrs	r2, r4
 8103d50:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8103d52:	0699      	lsls	r1, r3, #26
 8103d54:	d506      	bpl.n	8103d64 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8103d56:	6801      	ldr	r1, [r0, #0]
 8103d58:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8103d5a:	688a      	ldr	r2, [r1, #8]
 8103d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8103d60:	4322      	orrs	r2, r4
 8103d62:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8103d64:	065a      	lsls	r2, r3, #25
 8103d66:	d50f      	bpl.n	8103d88 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8103d68:	6801      	ldr	r1, [r0, #0]
 8103d6a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8103d6c:	684a      	ldr	r2, [r1, #4]
 8103d6e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8103d72:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8103d74:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8103d78:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8103d7a:	d105      	bne.n	8103d88 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8103d7c:	684a      	ldr	r2, [r1, #4]
 8103d7e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8103d80:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8103d84:	4322      	orrs	r2, r4
 8103d86:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8103d88:	061b      	lsls	r3, r3, #24
 8103d8a:	d506      	bpl.n	8103d9a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8103d8c:	6802      	ldr	r2, [r0, #0]
 8103d8e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8103d90:	6853      	ldr	r3, [r2, #4]
 8103d92:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8103d96:	430b      	orrs	r3, r1
 8103d98:	6053      	str	r3, [r2, #4]
}
 8103d9a:	bd10      	pop	{r4, pc}

08103d9c <UART_WaitOnFlagUntilTimeout>:
{
 8103d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8103da0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8103da4:	4604      	mov	r4, r0
 8103da6:	460e      	mov	r6, r1
 8103da8:	4615      	mov	r5, r2
 8103daa:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103dac:	6822      	ldr	r2, [r4, #0]
 8103dae:	69d3      	ldr	r3, [r2, #28]
 8103db0:	ea36 0303 	bics.w	r3, r6, r3
 8103db4:	bf0c      	ite	eq
 8103db6:	2301      	moveq	r3, #1
 8103db8:	2300      	movne	r3, #0
 8103dba:	42ab      	cmp	r3, r5
 8103dbc:	d001      	beq.n	8103dc2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8103dbe:	2000      	movs	r0, #0
 8103dc0:	e01c      	b.n	8103dfc <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8103dc2:	f1b8 3fff 	cmp.w	r8, #4294967295
 8103dc6:	d0f2      	beq.n	8103dae <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103dc8:	f7fd f880 	bl	8100ecc <HAL_GetTick>
 8103dcc:	1bc0      	subs	r0, r0, r7
 8103dce:	4540      	cmp	r0, r8
 8103dd0:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8103dd2:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103dd4:	d802      	bhi.n	8103ddc <UART_WaitOnFlagUntilTimeout+0x40>
 8103dd6:	f1b8 0f00 	cmp.w	r8, #0
 8103dda:	d111      	bne.n	8103e00 <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8103ddc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8103de0:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103de2:	6883      	ldr	r3, [r0, #8]
 8103de4:	f023 0301 	bic.w	r3, r3, #1
 8103de8:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8103dea:	2320      	movs	r3, #32
 8103dec:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8103df0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 8103df4:	2300      	movs	r3, #0
 8103df6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8103dfa:	2003      	movs	r0, #3
}
 8103dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8103e00:	075a      	lsls	r2, r3, #29
 8103e02:	d5d3      	bpl.n	8103dac <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8103e04:	69c3      	ldr	r3, [r0, #28]
 8103e06:	051b      	lsls	r3, r3, #20
 8103e08:	d5d0      	bpl.n	8103dac <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8103e0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8103e0e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8103e10:	6803      	ldr	r3, [r0, #0]
 8103e12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8103e16:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103e18:	6883      	ldr	r3, [r0, #8]
 8103e1a:	f023 0301 	bic.w	r3, r3, #1
 8103e1e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8103e20:	2320      	movs	r3, #32
 8103e22:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8103e26:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8103e2a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8103e2e:	e7e1      	b.n	8103df4 <UART_WaitOnFlagUntilTimeout+0x58>

08103e30 <UART_CheckIdleState>:
{
 8103e30:	b530      	push	{r4, r5, lr}
 8103e32:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103e34:	2500      	movs	r5, #0
{
 8103e36:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103e38:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8103e3c:	f7fd f846 	bl	8100ecc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8103e40:	6822      	ldr	r2, [r4, #0]
 8103e42:	6812      	ldr	r2, [r2, #0]
 8103e44:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8103e46:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8103e48:	d417      	bmi.n	8103e7a <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8103e4a:	6822      	ldr	r2, [r4, #0]
 8103e4c:	6812      	ldr	r2, [r2, #0]
 8103e4e:	0752      	lsls	r2, r2, #29
 8103e50:	d509      	bpl.n	8103e66 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103e52:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8103e56:	9200      	str	r2, [sp, #0]
 8103e58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8103e5c:	2200      	movs	r2, #0
 8103e5e:	4620      	mov	r0, r4
 8103e60:	f7ff ff9c 	bl	8103d9c <UART_WaitOnFlagUntilTimeout>
 8103e64:	b9b0      	cbnz	r0, 8103e94 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8103e66:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8103e68:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8103e6a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8103e6e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8103e72:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8103e76:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 8103e78:	e00d      	b.n	8103e96 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103e7a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8103e7e:	9200      	str	r2, [sp, #0]
 8103e80:	9003      	str	r0, [sp, #12]
 8103e82:	462a      	mov	r2, r5
 8103e84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8103e88:	4620      	mov	r0, r4
 8103e8a:	f7ff ff87 	bl	8103d9c <UART_WaitOnFlagUntilTimeout>
 8103e8e:	9b03      	ldr	r3, [sp, #12]
 8103e90:	2800      	cmp	r0, #0
 8103e92:	d0da      	beq.n	8103e4a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8103e94:	2003      	movs	r0, #3
}
 8103e96:	b005      	add	sp, #20
 8103e98:	bd30      	pop	{r4, r5, pc}

08103e9a <HAL_UART_Init>:
{
 8103e9a:	b510      	push	{r4, lr}
  if (huart == NULL)
 8103e9c:	4604      	mov	r4, r0
 8103e9e:	b350      	cbz	r0, 8103ef6 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8103ea0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8103ea4:	b91b      	cbnz	r3, 8103eae <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8103ea6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8103eaa:	f7fc fef9 	bl	8100ca0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8103eae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8103eb0:	2324      	movs	r3, #36	; 0x24
 8103eb2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8103eb6:	6813      	ldr	r3, [r2, #0]
 8103eb8:	f023 0301 	bic.w	r3, r3, #1
 8103ebc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8103ebe:	4620      	mov	r0, r4
 8103ec0:	f7ff fd48 	bl	8103954 <UART_SetConfig>
 8103ec4:	2801      	cmp	r0, #1
 8103ec6:	d016      	beq.n	8103ef6 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8103ec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8103eca:	b113      	cbz	r3, 8103ed2 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8103ecc:	4620      	mov	r0, r4
 8103ece:	f7ff ff11 	bl	8103cf4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8103ed2:	6823      	ldr	r3, [r4, #0]
 8103ed4:	685a      	ldr	r2, [r3, #4]
 8103ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8103eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8103edc:	689a      	ldr	r2, [r3, #8]
 8103ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8103ee2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8103ee4:	681a      	ldr	r2, [r3, #0]
 8103ee6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8103eea:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8103eec:	601a      	str	r2, [r3, #0]
}
 8103eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8103ef2:	f7ff bf9d 	b.w	8103e30 <UART_CheckIdleState>
}
 8103ef6:	2001      	movs	r0, #1
 8103ef8:	bd10      	pop	{r4, pc}
	...

08103efc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8103efc:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8103efe:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8103f00:	b91b      	cbnz	r3, 8103f0a <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8103f02:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8103f06:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8103f08:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8103f0a:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8103f0c:	4d0a      	ldr	r5, [pc, #40]	; (8103f38 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8103f0e:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8103f10:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8103f12:	4c0a      	ldr	r4, [pc, #40]	; (8103f3c <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8103f14:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8103f16:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8103f1a:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8103f1c:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8103f1e:	011b      	lsls	r3, r3, #4
 8103f20:	fbb3 f3f1 	udiv	r3, r3, r1
 8103f24:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8103f28:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8103f2a:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8103f2c:	011b      	lsls	r3, r3, #4
 8103f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8103f32:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8103f36:	e7e7      	b.n	8103f08 <UARTEx_SetNbDataToProcess+0xc>
 8103f38:	08104202 	.word	0x08104202
 8103f3c:	081041fa 	.word	0x081041fa

08103f40 <HAL_UARTEx_WakeupCallback>:
}
 8103f40:	4770      	bx	lr

08103f42 <HAL_UARTEx_RxFifoFullCallback>:
 8103f42:	4770      	bx	lr

08103f44 <HAL_UARTEx_TxFifoEmptyCallback>:
 8103f44:	4770      	bx	lr

08103f46 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8103f46:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8103f4a:	2b01      	cmp	r3, #1
 8103f4c:	d014      	beq.n	8103f78 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103f4e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8103f50:	2324      	movs	r3, #36	; 0x24
 8103f52:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103f56:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8103f58:	6813      	ldr	r3, [r2, #0]
 8103f5a:	f023 0301 	bic.w	r3, r3, #1
 8103f5e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8103f60:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8103f64:	2300      	movs	r3, #0
 8103f66:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103f68:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8103f6a:	2220      	movs	r2, #32
 8103f6c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8103f70:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8103f74:	4618      	mov	r0, r3
 8103f76:	4770      	bx	lr
  __HAL_LOCK(huart);
 8103f78:	2002      	movs	r0, #2
}
 8103f7a:	4770      	bx	lr

08103f7c <HAL_UARTEx_SetTxFifoThreshold>:
{
 8103f7c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8103f7e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8103f82:	2b01      	cmp	r3, #1
{
 8103f84:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8103f86:	d01b      	beq.n	8103fc0 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8103f88:	2301      	movs	r3, #1
 8103f8a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8103f8e:	2324      	movs	r3, #36	; 0x24
 8103f90:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103f94:	6803      	ldr	r3, [r0, #0]
 8103f96:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8103f98:	681a      	ldr	r2, [r3, #0]
 8103f9a:	f022 0201 	bic.w	r2, r2, #1
 8103f9e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8103fa0:	689a      	ldr	r2, [r3, #8]
 8103fa2:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8103fa6:	4311      	orrs	r1, r2
 8103fa8:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8103faa:	f7ff ffa7 	bl	8103efc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103fae:	6803      	ldr	r3, [r0, #0]
 8103fb0:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8103fb2:	2320      	movs	r3, #32
 8103fb4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8103fb8:	2000      	movs	r0, #0
 8103fba:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8103fbe:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8103fc0:	2002      	movs	r0, #2
 8103fc2:	e7fc      	b.n	8103fbe <HAL_UARTEx_SetTxFifoThreshold+0x42>

08103fc4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8103fc4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8103fc6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8103fca:	2b01      	cmp	r3, #1
{
 8103fcc:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8103fce:	d01b      	beq.n	8104008 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8103fd0:	2301      	movs	r3, #1
 8103fd2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8103fd6:	2324      	movs	r3, #36	; 0x24
 8103fd8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103fdc:	6803      	ldr	r3, [r0, #0]
 8103fde:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8103fe0:	681a      	ldr	r2, [r3, #0]
 8103fe2:	f022 0201 	bic.w	r2, r2, #1
 8103fe6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8103fe8:	689a      	ldr	r2, [r3, #8]
 8103fea:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8103fee:	4311      	orrs	r1, r2
 8103ff0:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8103ff2:	f7ff ff83 	bl	8103efc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103ff6:	6803      	ldr	r3, [r0, #0]
 8103ff8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8103ffa:	2320      	movs	r3, #32
 8103ffc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8104000:	2000      	movs	r0, #0
 8104002:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8104006:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8104008:	2002      	movs	r0, #2
 810400a:	e7fc      	b.n	8104006 <HAL_UARTEx_SetRxFifoThreshold+0x42>

0810400c <__libc_init_array>:
 810400c:	b570      	push	{r4, r5, r6, lr}
 810400e:	4d0d      	ldr	r5, [pc, #52]	; (8104044 <__libc_init_array+0x38>)
 8104010:	4c0d      	ldr	r4, [pc, #52]	; (8104048 <__libc_init_array+0x3c>)
 8104012:	1b64      	subs	r4, r4, r5
 8104014:	10a4      	asrs	r4, r4, #2
 8104016:	2600      	movs	r6, #0
 8104018:	42a6      	cmp	r6, r4
 810401a:	d109      	bne.n	8104030 <__libc_init_array+0x24>
 810401c:	4d0b      	ldr	r5, [pc, #44]	; (810404c <__libc_init_array+0x40>)
 810401e:	4c0c      	ldr	r4, [pc, #48]	; (8104050 <__libc_init_array+0x44>)
 8104020:	f000 f848 	bl	81040b4 <_init>
 8104024:	1b64      	subs	r4, r4, r5
 8104026:	10a4      	asrs	r4, r4, #2
 8104028:	2600      	movs	r6, #0
 810402a:	42a6      	cmp	r6, r4
 810402c:	d105      	bne.n	810403a <__libc_init_array+0x2e>
 810402e:	bd70      	pop	{r4, r5, r6, pc}
 8104030:	f855 3b04 	ldr.w	r3, [r5], #4
 8104034:	4798      	blx	r3
 8104036:	3601      	adds	r6, #1
 8104038:	e7ee      	b.n	8104018 <__libc_init_array+0xc>
 810403a:	f855 3b04 	ldr.w	r3, [r5], #4
 810403e:	4798      	blx	r3
 8104040:	3601      	adds	r6, #1
 8104042:	e7f2      	b.n	810402a <__libc_init_array+0x1e>
 8104044:	08104214 	.word	0x08104214
 8104048:	08104214 	.word	0x08104214
 810404c:	08104214 	.word	0x08104214
 8104050:	08104218 	.word	0x08104218

08104054 <memcpy>:
 8104054:	440a      	add	r2, r1
 8104056:	4291      	cmp	r1, r2
 8104058:	f100 33ff 	add.w	r3, r0, #4294967295
 810405c:	d100      	bne.n	8104060 <memcpy+0xc>
 810405e:	4770      	bx	lr
 8104060:	b510      	push	{r4, lr}
 8104062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8104066:	f803 4f01 	strb.w	r4, [r3, #1]!
 810406a:	4291      	cmp	r1, r2
 810406c:	d1f9      	bne.n	8104062 <memcpy+0xe>
 810406e:	bd10      	pop	{r4, pc}

08104070 <memmove>:
 8104070:	4288      	cmp	r0, r1
 8104072:	b510      	push	{r4, lr}
 8104074:	eb01 0402 	add.w	r4, r1, r2
 8104078:	d902      	bls.n	8104080 <memmove+0x10>
 810407a:	4284      	cmp	r4, r0
 810407c:	4623      	mov	r3, r4
 810407e:	d807      	bhi.n	8104090 <memmove+0x20>
 8104080:	1e43      	subs	r3, r0, #1
 8104082:	42a1      	cmp	r1, r4
 8104084:	d008      	beq.n	8104098 <memmove+0x28>
 8104086:	f811 2b01 	ldrb.w	r2, [r1], #1
 810408a:	f803 2f01 	strb.w	r2, [r3, #1]!
 810408e:	e7f8      	b.n	8104082 <memmove+0x12>
 8104090:	4402      	add	r2, r0
 8104092:	4601      	mov	r1, r0
 8104094:	428a      	cmp	r2, r1
 8104096:	d100      	bne.n	810409a <memmove+0x2a>
 8104098:	bd10      	pop	{r4, pc}
 810409a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810409e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 81040a2:	e7f7      	b.n	8104094 <memmove+0x24>

081040a4 <memset>:
 81040a4:	4402      	add	r2, r0
 81040a6:	4603      	mov	r3, r0
 81040a8:	4293      	cmp	r3, r2
 81040aa:	d100      	bne.n	81040ae <memset+0xa>
 81040ac:	4770      	bx	lr
 81040ae:	f803 1b01 	strb.w	r1, [r3], #1
 81040b2:	e7f9      	b.n	81040a8 <memset+0x4>

081040b4 <_init>:
 81040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81040b6:	bf00      	nop
 81040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81040ba:	bc08      	pop	{r3}
 81040bc:	469e      	mov	lr, r3
 81040be:	4770      	bx	lr

081040c0 <_fini>:
 81040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81040c2:	bf00      	nop
 81040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81040c6:	bc08      	pop	{r3}
 81040c8:	469e      	mov	lr, r3
 81040ca:	4770      	bx	lr
